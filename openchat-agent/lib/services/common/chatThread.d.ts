import type { ChatEvent, ChatSummary, EventsResponse, EventWrapper, Message } from "../../domain/chat/chat";
import type { ServiceContainer } from "../../services/serviceContainer";
import type { CreatedUser, User } from "../../domain/user/user";
export declare function selectReaction(api: ServiceContainer, chat: ChatSummary, userId: string, threadRootMessageIndex: number | undefined, messageId: bigint, reaction: string, username: string, kind: "add" | "remove"): Promise<boolean>;
export declare function deleteMessage(api: ServiceContainer, chat: ChatSummary, userId: string, threadRootMessageIndex: number | undefined, messageId: bigint): Promise<boolean>;
export declare function updateUserStore(api: ServiceContainer, chatId: string, userId: string, userIdsFromEvents: Set<string>): Promise<void>;
export declare function editMessage(api: ServiceContainer, chat: ChatSummary, msg: Message, threadRootMessageIndex: number | undefined): Promise<void>;
export declare function registerPollVote(api: ServiceContainer, userId: string, chatId: string, threadRootMessageIndex: number | undefined, messageId: bigint, messageIndex: number, answerIndex: number, type: "register" | "delete"): void;
export declare function blockUser(api: ServiceContainer, chatId: string, userId: string): Promise<void>;
export declare function loadEventWindow(api: ServiceContainer, user: CreatedUser, serverChat: ChatSummary, chat: ChatSummary, messageIndex: number): Promise<number | undefined>;
export declare function handleEventsResponse(api: ServiceContainer, user: CreatedUser, chat: ChatSummary, resp: EventsResponse<ChatEvent>, keepCurrentEvents?: boolean): Promise<void>;
export declare function loadPreviousMessages(api: ServiceContainer, user: CreatedUser, serverChat: ChatSummary, clientChat: ChatSummary): Promise<void>;
export declare function loadNewMessages(api: ServiceContainer, user: CreatedUser, serverChat: ChatSummary, clientChat: ChatSummary): Promise<boolean>;
export declare function morePreviousMessagesAvailable(clientChat: ChatSummary): boolean;
export declare function moreNewMessagesAvailable(serverChat: ChatSummary): boolean;
export declare function refreshAffectedEvents(api: ServiceContainer, user: CreatedUser, clientChat: ChatSummary, affectedEventIndexes: number[]): Promise<void>;
export declare function loadDetails(api: ServiceContainer, user: CreatedUser, clientChat: ChatSummary, currentEvents: EventWrapper<ChatEvent>[]): Promise<void>;
export declare function updateDetails(api: ServiceContainer, user: CreatedUser, clientChat: ChatSummary, currentEvents: EventWrapper<ChatEvent>[]): Promise<void>;
export declare function unpinMessage(api: ServiceContainer, clientChat: ChatSummary, messageIndex: number): void;
export declare function pinMessage(api: ServiceContainer, clientChat: ChatSummary, messageIndex: number): void;
export declare function removeMessage(currentUserId: string, clientChat: ChatSummary, messageId: bigint, userId: string): void;
export declare function sendMessage(api: ServiceContainer, user: CreatedUser, serverChat: ChatSummary, clientChat: ChatSummary, currentEvents: EventWrapper<ChatEvent>[], messageEvent: EventWrapper<Message>): Promise<number | undefined>;
export declare function handleMessageSentByOther(api: ServiceContainer, user: CreatedUser, clientChat: ChatSummary, currentEvents: EventWrapper<ChatEvent>[], messageEvent: EventWrapper<Message>): Promise<void>;
export declare function forwardMessage(api: ServiceContainer, user: CreatedUser, serverChat: ChatSummary, clientChat: ChatSummary, currentEvents: EventWrapper<ChatEvent>[], evt: EventWrapper<Message>): Promise<number | undefined>;
export declare function sendMessageWithAttachment(api: ServiceContainer, user: CreatedUser, serverChat: ChatSummary, clientChat: ChatSummary, currentEvents: EventWrapper<ChatEvent>[], evt: EventWrapper<Message>, mentioned: User[]): Promise<number | undefined>;
