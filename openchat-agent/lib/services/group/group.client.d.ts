import type { Identity } from "@dfinity/agent";
import type { AddMembersResponse, EventsResponse, GroupChatEvent, Message, SendMessageResponse, RemoveMemberResponse, UpdateGroupResponse, AddRemoveReactionResponse, IndexRange, DeleteMessageResponse, EditMessageResponse, BlockUserResponse, ChangeRoleResponse, GroupChatDetails, GroupChatDetailsResponse, UnblockUserResponse, GroupChatSummary, MemberRole, PinMessageResponse, UnpinMessageResponse, RegisterPollVoteResponse, GroupPermissions, MakeGroupPrivateResponse, InviteCodeResponse, EnableInviteCodeResponse, DisableInviteCodeResponse, ResetInviteCodeResponse, ThreadPreviewsResponse, RegisterProposalVoteResponse, GroupRules } from "../../domain/chat/chat";
import type { User } from "../../domain/user/user";
import { CandidService, ServiceRetryInterrupt } from "../candidService";
import type { IGroupClient } from "./group.client.interface";
import { Database } from "../../utils/caching";
import type { SearchGroupChatResponse } from "../../domain/search/search";
export declare class GroupClient extends CandidService implements IGroupClient {
    private chatId;
    private inviteCode;
    private groupService;
    constructor(identity: Identity, chatId: string, inviteCode: string | undefined);
    static create(chatId: string, identity: Identity, db: Database | undefined, inviteCode: string | undefined): IGroupClient;
    chatEventsByIndex(eventIndexes: number[], threadRootMessageIndex: number | undefined, latestClientEventIndex: number | undefined): Promise<EventsResponse<GroupChatEvent>>;
    chatEventsWindow(_eventIndexRange: IndexRange, messageIndex: number, latestClientEventIndex: number | undefined, interrupt?: ServiceRetryInterrupt): Promise<EventsResponse<GroupChatEvent>>;
    chatEvents(eventIndexRange: IndexRange, startIndex: number, ascending: boolean, threadRootMessageIndex: number | undefined, latestClientEventIndex: number | undefined, interrupt?: ServiceRetryInterrupt): Promise<EventsResponse<GroupChatEvent>>;
    addMembers(userIds: string[], myUsername: string, allowBlocked: boolean): Promise<AddMembersResponse>;
    changeRole(userId: string, newRole: MemberRole): Promise<ChangeRoleResponse>;
    removeMember(userId: string): Promise<RemoveMemberResponse>;
    editMessage(message: Message, threadRootMessageIndex?: number): Promise<EditMessageResponse>;
    sendMessage(senderName: string, mentioned: User[], message: Message, threadRootMessageIndex?: number): Promise<[SendMessageResponse, Message]>;
    updateGroup(name?: string, description?: string, rules?: GroupRules, permissions?: Partial<GroupPermissions>, avatar?: Uint8Array): Promise<UpdateGroupResponse>;
    addReaction(messageId: bigint, reaction: string, username: string, threadRootMessageIndex?: number): Promise<AddRemoveReactionResponse>;
    removeReaction(messageId: bigint, reaction: string, threadRootMessageIndex?: number): Promise<AddRemoveReactionResponse>;
    deleteMessage(messageId: bigint, threadRootMessageIndex?: number): Promise<DeleteMessageResponse>;
    blockUser(userId: string): Promise<BlockUserResponse>;
    unblockUser(userId: string): Promise<UnblockUserResponse>;
    getGroupDetails(_latestEventIndex: number): Promise<GroupChatDetailsResponse>;
    getGroupDetailsUpdates(previous: GroupChatDetails): Promise<GroupChatDetails>;
    makeGroupPrivate(): Promise<MakeGroupPrivateResponse>;
    getPublicSummary(): Promise<GroupChatSummary | undefined>;
    getRules(): Promise<GroupRules | undefined>;
    getMessagesByMessageIndex(messageIndexes: Set<number>, latestClientEventIndex: number | undefined): Promise<EventsResponse<Message>>;
    pinMessage(messageIndex: number): Promise<PinMessageResponse>;
    unpinMessage(messageIndex: number): Promise<UnpinMessageResponse>;
    registerPollVote(messageIdx: number, answerIdx: number, voteType: "register" | "delete", threadRootMessageIndex?: number): Promise<RegisterPollVoteResponse>;
    searchGroupChat(searchTerm: string, maxResults: number): Promise<SearchGroupChatResponse>;
    getInviteCode(): Promise<InviteCodeResponse>;
    enableInviteCode(): Promise<EnableInviteCodeResponse>;
    disableInviteCode(): Promise<DisableInviteCodeResponse>;
    resetInviteCode(): Promise<ResetInviteCodeResponse>;
    threadPreviews(threadRootMessageIndexes: number[], latestClientThreadUpdate: bigint | undefined): Promise<ThreadPreviewsResponse>;
    registerProposalVote(messageIdx: number, adopt: boolean): Promise<RegisterProposalVoteResponse>;
}
