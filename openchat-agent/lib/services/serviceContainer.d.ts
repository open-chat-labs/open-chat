import type { Identity } from "@dfinity/agent";
import type { CheckUsernameResponse, CurrentUserResponse, SetUsernameResponse, SubmitPhoneNumberResponse, ConfirmPhoneNumberResponse, PhoneNumber, ResendCodeResponse, UsersArgs, UsersResponse, UserSummary, User, SetBioResponse, RegisterUserResponse, UpgradeStorageResponse, PartialUserSummary, ChallengeAttempt, CreateChallengeResponse, PublicProfile, PinChatResponse, UnpinChatResponse, MigrateUserPrincipalResponse, ArchiveChatResponse, CreatedUser } from "../domain/user/user";
import type { EventsResponse, UpdateArgs, CandidateGroupChat, CreateGroupResponse, DirectChatEvent, GroupChatEvent, ChatEvent, ChatSummary, MergedUpdatesResponse, AddMembersResponse, Message, SendMessageResponse, RemoveMemberResponse, BlockUserResponse, UnblockUserResponse, LeaveGroupResponse, MarkReadResponse, UpdateGroupResponse, AddRemoveReactionResponse, IndexRange, EventWrapper, DeleteMessageResponse, JoinGroupResponse, EditMessageResponse, MarkReadRequest, ChangeRoleResponse, GroupChatDetailsResponse, GroupChatDetails, DeleteGroupResponse, GroupChatSummary, MemberRole, PinMessageResponse, UnpinMessageResponse, RegisterPollVoteResponse, GroupPermissions, PendingCryptocurrencyWithdrawal, WithdrawCryptocurrencyResponse, MakeGroupPrivateResponse, InviteCodeResponse, EnableInviteCodeResponse, DisableInviteCodeResponse, ResetInviteCodeResponse, CurrentChatState, ThreadPreview, ThreadSyncDetails, RegisterProposalVoteResponse, ListNervousSystemFunctionsResponse, GroupRules } from "../domain/chat/chat";
import type { BlobReference, DataContent } from "../domain/data/data";
import type { GroupSearchResponse, SearchAllMessagesResponse, SearchDirectChatResponse, SearchGroupChatResponse } from "../domain/search/search";
import { MarkMessagesRead } from "../stores/markRead";
import type { ToggleMuteNotificationResponse } from "../domain/notifications";
import type { Cryptocurrency, Tokens } from "../domain/crypto";
import type { ServiceRetryInterrupt } from "./candidService";
export declare const apiKey: unique symbol;
export declare type GroupInvite = {
    chatId: string;
    code: string;
};
export declare class ServiceContainer implements MarkMessagesRead {
    private identity;
    private _userIndexClient;
    private _onlineClient;
    private _groupIndexClient;
    private _userClient?;
    private _notificationClient;
    private _ledgerClients;
    private _groupClients;
    private _groupInvite;
    private db?;
    constructor(identity: Identity);
    set groupInvite(value: GroupInvite);
    createUserClient(userId: string): ServiceContainer;
    private getGroupClient;
    private get userClient();
    private getProvidedInviteCode;
    editMessage(chat: ChatSummary, msg: Message, threadRootMessageIndex?: number): Promise<EditMessageResponse>;
    sendMessage(chat: ChatSummary, user: CreatedUser, mentioned: User[], msg: Message, threadRootMessageIndex?: number): Promise<[SendMessageResponse, Message]>;
    private sendGroupMessage;
    private editGroupMessage;
    private sendDirectMessage;
    private editDirectMessage;
    createGroupChat(candidate: CandidateGroupChat): Promise<CreateGroupResponse>;
    updateGroup(chatId: string, name?: string, desc?: string, rules?: GroupRules, permissions?: Partial<GroupPermissions>, avatar?: Uint8Array): Promise<UpdateGroupResponse>;
    addMembers(chatId: string, userIds: string[], myUsername: string, allowBlocked: boolean): Promise<AddMembersResponse>;
    directChatEventsWindow(eventIndexRange: IndexRange, theirUserId: string, messageIndex: number, latestClientMainEventIndex: number | undefined): Promise<EventsResponse<DirectChatEvent>>;
    chatEvents(chat: ChatSummary, eventIndexRange: IndexRange, startIndex: number, ascending: boolean, threadRootMessageIndex: number | undefined, latestClientEventIndex: number | undefined): Promise<EventsResponse<ChatEvent>>;
    private directChatEvents;
    directChatEventsByEventIndex(theirUserId: string, eventIndexes: number[], threadRootMessageIndex: number | undefined, latestClientEventIndex: number | undefined): Promise<EventsResponse<DirectChatEvent>>;
    groupChatEventsWindow(eventIndexRange: IndexRange, chatId: string, messageIndex: number, latestClientMainEventIndex: number | undefined): Promise<EventsResponse<GroupChatEvent>>;
    private groupChatEvents;
    groupChatEventsByEventIndex(chatId: string, eventIndexes: number[], threadRootMessageIndex: number | undefined, latestClientEventIndex: number | undefined): Promise<EventsResponse<GroupChatEvent>>;
    private rehydrateMessageContent;
    private rehydrateEventList;
    /**
     * Given a list of events, identify all eventIndexes which we may need to look up
     * In practice this means the event indexes of embedded reply contexts
     */
    private findMissingEventIndexesByChat;
    private messagesFromEventsResponse;
    private resolveMissingIndexes;
    private rehydrateMissingReplies;
    private rehydrateEventResponse;
    rehydrateUserSummary<T extends UserSummary | PartialUserSummary>(userSummary: T): T;
    rehydrateDataContent<T extends DataContent>(dataContent: T, blobType?: "blobs" | "avatar"): T;
    rehydrateMessage(chatType: "direct" | "group", currentChatId: string, message: EventWrapper<Message>, threadRootMessageIndex: number | undefined, latestClientEventIndex: number | undefined): Promise<EventWrapper<Message>>;
    searchUsers(searchTerm: string, maxResults?: number): Promise<UserSummary[]>;
    searchGroups(searchTerm: string, maxResults?: number): Promise<GroupSearchResponse>;
    searchAllMessages(searchTerm: string, maxResults?: number): Promise<SearchAllMessagesResponse>;
    searchGroupChat(chatId: string, searchTerm: string, maxResults?: number): Promise<SearchGroupChatResponse>;
    searchDirectChat(userId: string, searchTerm: string, maxResults?: number): Promise<SearchDirectChatResponse>;
    getUser(userId: string, allowStale?: boolean): Promise<PartialUserSummary | undefined>;
    getUsers(users: UsersArgs, allowStale?: boolean): Promise<UsersResponse>;
    private handleMergedUpdatesResponse;
    getInitialState(selectedChatId: string | undefined): Promise<MergedUpdatesResponse>;
    getUpdates(currentState: CurrentChatState, args: UpdateArgs, selectedChatId: string | undefined): Promise<MergedUpdatesResponse>;
    getCurrentUser(): Promise<CurrentUserResponse>;
    submitPhoneNumber(phoneNumber: PhoneNumber): Promise<SubmitPhoneNumberResponse>;
    resendRegistrationCode(): Promise<ResendCodeResponse>;
    confirmPhoneNumber(code: string): Promise<ConfirmPhoneNumberResponse>;
    checkUsername(username: string): Promise<CheckUsernameResponse>;
    setUsername(userId: string, username: string): Promise<SetUsernameResponse>;
    changeRole(chatId: string, userId: string, newRole: MemberRole): Promise<ChangeRoleResponse>;
    deleteGroup(chatId: string): Promise<DeleteGroupResponse>;
    makeGroupPrivate(chatId: string): Promise<MakeGroupPrivateResponse>;
    removeMember(chatId: string, userId: string): Promise<RemoveMemberResponse>;
    blockUserFromDirectChat(userId: string): Promise<BlockUserResponse>;
    blockUserFromGroupChat(chatId: string, userId: string): Promise<BlockUserResponse>;
    unblockUserFromGroupChat(chatId: string, userId: string): Promise<UnblockUserResponse>;
    unblockUserFromDirectChat(userId: string): Promise<UnblockUserResponse>;
    leaveGroup(chatId: string): Promise<LeaveGroupResponse>;
    joinGroup(chatId: string): Promise<JoinGroupResponse>;
    markMessagesRead(request: MarkReadRequest): Promise<MarkReadResponse>;
    setUserAvatar(data: Uint8Array): Promise<BlobReference>;
    addGroupChatReaction(chatId: string, messageId: bigint, reaction: string, username: string, threadRootMessageIndex?: number): Promise<AddRemoveReactionResponse>;
    removeGroupChatReaction(chatId: string, messageId: bigint, reaction: string, threadRootMessageIndex?: number): Promise<AddRemoveReactionResponse>;
    addDirectChatReaction(otherUserId: string, messageId: bigint, reaction: string, username: string, threadRootMessageIndex?: number): Promise<AddRemoveReactionResponse>;
    removeDirectChatReaction(otherUserId: string, messageId: bigint, reaction: string, threadRootMessageIndex?: number): Promise<AddRemoveReactionResponse>;
    deleteMessage(chat: ChatSummary, messageId: bigint, threadRootMessageIndex?: number): Promise<DeleteMessageResponse>;
    private deleteGroupMessage;
    private deleteDirectMessage;
    markAsOnline(): Promise<void>;
    subscriptionExists(p256dh_key: string): Promise<boolean>;
    pushSubscription(subscription: PushSubscription): Promise<void>;
    removeSubscription(subscription: PushSubscription): Promise<void>;
    toggleMuteNotifications(chatId: string, muted: boolean): Promise<ToggleMuteNotificationResponse>;
    getGroupDetails(chatId: string, latestEventIndex: number): Promise<GroupChatDetailsResponse>;
    getGroupDetailsUpdates(chatId: string, previous: GroupChatDetails): Promise<GroupChatDetails>;
    getPublicGroupSummary(chatId: string): Promise<GroupChatSummary | undefined>;
    getGroupRules(chatId: string): Promise<GroupRules | undefined>;
    getRecommendedGroups(interrupt: ServiceRetryInterrupt): Promise<GroupChatSummary[]>;
    dismissRecommendation(chatId: string): Promise<void>;
    getBio(userId?: string): Promise<string>;
    getPublicProfile(userId?: string): Promise<PublicProfile>;
    setBio(bio: string): Promise<SetBioResponse>;
    createChallenge(): Promise<CreateChallengeResponse>;
    registerUser(username: string, challengeAttempt: ChallengeAttempt, referredBy: string | undefined): Promise<RegisterUserResponse>;
    getUserStorageLimits(): Promise<void>;
    upgradeStorage(newLimitBytes: number): Promise<UpgradeStorageResponse>;
    refreshAccountBalance(crypto: Cryptocurrency, account: string): Promise<Tokens>;
    getGroupMessagesByMessageIndex(chatId: string, messageIndexes: Set<number>, latestClientEventIndex: number | undefined): Promise<EventsResponse<Message>>;
    pinMessage(chatId: string, messageIndex: number): Promise<PinMessageResponse>;
    unpinMessage(chatId: string, messageIndex: number): Promise<UnpinMessageResponse>;
    registerPollVote(chatId: string, messageIdx: number, answerIdx: number, voteType: "register" | "delete", threadRootMessageIndex?: number): Promise<RegisterPollVoteResponse>;
    withdrawCryptocurrency(domain: PendingCryptocurrencyWithdrawal): Promise<WithdrawCryptocurrencyResponse>;
    getInviteCode(chatId: string): Promise<InviteCodeResponse>;
    enableInviteCode(chatId: string): Promise<EnableInviteCodeResponse>;
    disableInviteCode(chatId: string): Promise<DisableInviteCodeResponse>;
    resetInviteCode(chatId: string): Promise<ResetInviteCodeResponse>;
    pinChat(chatId: string): Promise<PinChatResponse>;
    unpinChat(chatId: string): Promise<UnpinChatResponse>;
    archiveChat(chatId: string): Promise<ArchiveChatResponse>;
    unarchiveChat(chatId: string): Promise<ArchiveChatResponse>;
    registerProposalVote(chatId: string, messageIndex: number, adopt: boolean): Promise<RegisterProposalVoteResponse>;
    initUserPrincipalMigration(newPrincipal: string): Promise<void>;
    migrateUserPrincipal(userId: string): Promise<MigrateUserPrincipalResponse>;
    listNervousSystemFunctions(snsGovernanceCanisterId: string): Promise<ListNervousSystemFunctionsResponse>;
    threadPreviews(threadsByChat: Record<string, [ThreadSyncDetails[], number | undefined]>): Promise<ThreadPreview[]>;
    private rehydrateThreadPreview;
}
