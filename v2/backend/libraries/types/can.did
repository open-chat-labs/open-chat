type CanisterId = principal;
type EventIndex = nat32;
type ChatId = CanisterId;
type MessageId = nat;
type MessageIndex = nat32;
type Milliseconds = nat64;
type TimestampMillis = nat64;
type TimestampNanos = nat64;
type UserId = CanisterId;

type AudioContent =
    record {
        caption: opt text;
        mime_type: text;
        blob_reference: opt BlobReference;
    };

type Avatar = 
    record {
        id: nat;
        mime_type: text;
        data: blob;
    };

type BlobReference =
    record {
        canister_id: CanisterId;
        blob_id: nat;
    };

type CanisterCreationStatus =
    variant {
        Pending;
        InProgress;
        Created;
    };

type CanisterUpgradeStatus =
    variant {
        Required;
        InProgress;
        NotRequired;
    };

type CanisterWasm =
    record {
        module: vec nat8;
        version: Version;
    };

type ChatSummary =
    variant {
        Direct: DirectChatSummary;
        Group: GroupChatSummary;
    };

type ChatSummaryUpdates =
    variant {
        Direct: DirectChatSummaryUpdates;
        Group: GroupChatSummaryUpdates;
    };

type ConfirmationCodeSms =
    record {
         phone_number: text;
         confirmation_code: text;
    };

type CyclesContent =
    record {
        amount: nat;
        caption: opt text;
    };

type DeletedMessage =
    record {
        message_index: MessageIndex;
        message_id: MessageId;
        sender: UserId;
    };

type DirectChatCreated =
    record {
    };

type DirectChatEvent =
    variant {
        Message: Message;
        DeletedMessage: DeletedMessage;
        DirectChatCreated: DirectChatCreated;
        MessageDeleted: UpdatedMessage;
        MessageReactionAdded: UpdatedMessage;
        MessageReactionRemoved: UpdatedMessage;
    };

type DirectChatEventWrapper =
    record {
        index: EventIndex;
        timestamp: TimestampMillis;
        event: DirectChatEvent;
    };

type DirectChatSummary =
    record {
        them: UserId;
        latest_message: MessageEventWrapper;
        latest_event_index: EventIndex;
        date_created: TimestampMillis;
        read_by_me: vec MessageIndexRange;
        read_by_them: vec MessageIndexRange;
    };

type DirectChatSummaryUpdates =
    record {
        chat_id: ChatId;
        latest_message: opt MessageEventWrapper;
        latest_event_index: opt EventIndex;
        read_by_me: opt vec MessageIndexRange;
        read_by_them: opt vec MessageIndexRange;
        webrtc_session_details: opt WebRtcSessionDetailsEvent;
    };

type DirectMessageNotification =
    record {
        sender: UserId;
        sender_name: text;
        recipient: UserId;
        message: Message;
    };

type FieldTooLongResult =
    record {
        length_provided: nat32;
        max_length: nat32;
    };

type FileContent =
    record {
        name: text;
        caption: opt text;
        mime_type: text;
        file_size: nat32;
        blob_reference: opt BlobReference;
    };

type GroupChatCreated =
    record {
        name: text;
        description: text;
        created_by: UserId;
    };

type GroupChatEvent =
    variant {
        Message: Message;
        DeletedMessage: DeletedMessage;
        GroupChatCreated: GroupChatCreated;
        GroupNameChanged: GroupNameChanged;
        GroupDescriptionChanged: GroupDescriptionChanged;
        AvatarChanged: AvatarChanged;
        ParticipantsAdded: ParticipantsAdded;
        ParticipantsRemoved: ParticipantsRemoved;
        ParticipantJoined: ParticipantJoined;
        ParticipantLeft: ParticipantLeft;
        ParticipantsPromotedToAdmin: ParticipantsPromotedToAdmin;
        ParticipantsDismissedAsAdmin: ParticipantsDismissedAsAdmin;
        MessageDeleted: UpdatedMessage;
        MessageReactionAdded: UpdatedMessage;
        MessageReactionRemoved: UpdatedMessage;
    };

type GroupChatEventWrapper =
    record {
        index: EventIndex;
        timestamp: TimestampMillis;
        event: GroupChatEvent;
    };

type GroupChatSummary =
    record {
        chat_id: ChatId;
        last_updated: TimestampMillis;
        name: text;
        description: text;
        avatar_id: opt nat;
        is_public: bool;
        min_visible_event_index: EventIndex;
        min_visible_message_index: MessageIndex;
        participants: vec Participant;
        latest_message: opt MessageEventWrapper;
        latest_event_index: EventIndex;
        joined: TimestampMillis;
        read_by_me: vec MessageIndexRange;
    };

type GroupChatSummaryUpdates =
    record {
        chat_id: ChatId;
        last_updated: TimestampMillis;
        name: opt text;
        description: opt text;
        avatar_id: opt nat;
        participants_added_or_updated: vec Participant;
        participants_removed: vec UserId;
        latest_message: opt MessageEventWrapper;
        latest_event_index: opt EventIndex;
        read_by_me: opt vec MessageIndexRange;
        webrtc_session_details: vec WebRtcSessionDetailsEvent;
    };

type GroupDescriptionChanged =
    record {
        new_description: text;
        previous_description: text;
        changed_by: UserId;
    };

type AvatarChanged =
    record {
        new_avatar: nat;
        previous_avatar: opt nat;
        changed_by: UserId;
    };

type Message =
    record {
        message_index: MessageIndex;
        message_id: MessageId;
        sender: UserId;
        content: MessageContent;
        replies_to: opt ReplyContext;
        reactions: vec record { text; vec UserId; };
    };

type MessageEventWrapper =
    record {
        index: EventIndex;
        timestamp: TimestampMillis;
        event: Message;
    };

type GroupMessageNotification =
    record {
        chat_id: ChatId;
        group_name: text;
        sender: UserId;
        sender_name: text;
        recipients: vec UserId;
        message: Message;
    };

type GroupNameChanged =
    record {
        new_name: text;
        previous_name: text;
        changed_by: UserId;
    };

type ReplyContext =
    record {
        chat_id: ChatId;
        event_index: EventIndex;
        message_id: MessageId;
        user_id: UserId;
        content: opt MessageContent;
    };

type ImageContent =
    record {
        width: nat32;
        height: nat32;
        thumbnail_data: text;
        caption: opt text;
        mime_type: text;
        blob_reference: opt BlobReference;
    };

type IndexedNotification =
    record {
        index: nat64;
        value: NotificationEnvelope;
    };

type MessageContent =
    variant {
        Text: TextContent;
        Image: ImageContent;
        Video: VideoContent;
        Audio: AudioContent;
        File: FileContent;
        Cycles: CyclesContent;
    };

type MessageIndexRange =
    record {
        from: MessageIndex;
        to: MessageIndex;
    };

type UpdatedMessage =
    record {
        event_index: EventIndex;
        message_id: MessageId;
    };

type MessageMatch =
    record {
        chat_id: ChatId;
        event_index: EventIndex;
        content: MessageContent;
        sender: UserId;
        score: nat32;
    };

type Notification =
    variant {
        DirectMessageNotification: DirectMessageNotification;
        GroupMessageNotification: GroupMessageNotification;
        V1DirectMessageNotification: V1DirectMessageNotification;
        V1GroupMessageNotification: V1GroupMessageNotification;
    };

type NotificationEnvelope =
    record {
        recipients: vec UserId;
        notification: Notification;
    };

type Participant =
    record {
        user_id: UserId;
        date_added: TimestampMillis;
        role: Role;
    };

type ParticipantJoined =
    record {
        user_id: UserId;
    };

type ParticipantLeft =
    record {
        user_id: UserId;
    };

type ParticipantsAdded =
    record {
        user_ids: vec UserId;
        added_by: UserId;
    };

type ParticipantsDismissedAsAdmin =
    record {
        user_ids: vec UserId;
        dismissed_by: UserId;
    };

type ParticipantsPromotedToAdmin =
    record {
        user_ids: vec UserId;
        promoted_by: UserId;
    };

type ParticipantsRemoved =
    record {
        user_ids: vec UserId;
        removed_by: UserId;
    };

type ReplyContextArgs =
    record {
        chat_id_if_other: opt ChatId;
        sender: UserId;
        message_id: MessageId;
    };

type Role =
    variant {
        Admin;
        Participant;
    };

type Subscription =
    record {
        value: SubscriptionInfo;
        last_active: TimestampMillis;
    };

type SubscriptionInfo =
    record {
        endpoint: text;
        keys: SubscriptionKeys;
    };

type SubscriptionKeys =
    record {
        p256dh: text;
        auth: text;
    };

type TextContent =
    record {
        text: text;
    };

type UserSummary =
    record {
        user_id: UserId;
        username: text;
        seconds_since_last_online: nat32;
        avatar_id: opt nat;
    };

type PartialUserSummary =
    record {
        user_id: UserId;
        username: opt text;
        seconds_since_last_online: nat32;
        avatar_id: opt nat;
    };

type Version =
    record {
        major: nat32;
        minor: nat32;
        patch: nat32;
    };

// TODO Delete the V1 stuff below

type V1GroupId = nat;
type V1ChatId = nat;

type V1TextContent =
    record {
        text: text;
    };

type V1MediaContent =
    record {
        caption: opt text;
        mime_type: text;
        width: nat32;
        height: nat32;
        blob_id: text;
        blob_size: nat32;
        chunk_size: nat32;
        thumbnail_data: text;
        blob_deleted: bool;
    };

type V1FileContent =
    record {
        caption: opt text;
        name: text;
        mime_type: text;
        blob_id: text;
        blob_size: nat32;
        chunk_size: nat32;
        blob_deleted: bool;
    };

type V1CyclesContent =
    record {
        amount: nat;
        caption: opt text;
    };

type V1MessageContent =
    variant {
        Text: V1TextContent;
        Media: V1MediaContent;
        File: V1FileContent;
        Cycles: V1CyclesContent;
    };

type V1ReplyContext =
    record {
        chat_id: V1ChatId;
        user_id: UserId;
        message_id: nat32;
        content: V1MessageContent;
    };

type V1Message =
    record {
        id: nat32;
        client_message_id: text;
        timestamp: TimestampMillis;
        sender: UserId;
        content: V1MessageContent;
        replies_to: opt V1ReplyContext;
    };

type V1DirectMessageNotification =
    record {
        sender: UserId;
        sender_name: text;
        recipient: UserId;
        message: V1Message;
    };

type V1GroupMessageNotification =
    record {
        chat_id: nat;
        group_name: text;
        sender: UserId;
        sender_name: text;
        recipients: vec UserId;
        message: V1Message;
    };

type VideoContent =
    record {
        width: nat32;
        height: nat32;
        thumbnail_data: text;
        caption: opt text;
        mime_type: text;
        image_blob_reference: opt BlobReference;
        video_blob_reference: opt BlobReference;
    };

type WebRtcSessionDetails =
    variant {
        Offer: WebRtcOffer;
        Answer: WebRtcAnswer;
    };

type WebRtcOffer = 
    record {
        user_id: UserId;
        endpoint: WebRtcEndpoint;
    };

type WebRtcAnswer =
    record {
        user_id: UserId;
        offer_id: text;
        endpoint: WebRtcEndpoint;
    };

type WebRtcEndpoint =
    record {
        id: text;
        connection_string: text;
        ice_candidates: vec text;
    };

type WebRtcSessionDetailsEvent =
    record {
        session_details: WebRtcSessionDetails;
        timestamp: TimestampMillis;
    };