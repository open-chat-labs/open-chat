// This is the root of the tree of OpenChat canisters.
// Maintains a registry of the top-level canisters (id, version).
// All descendant install/upgrades and top-ups happen via this canister.
// In the heartbeat function top-up needy top-level canisters with cycles

type CanisterId = principal;

type IndexCanister = 
    variant {
        PhoneIndex;
        UserIndex;
        GroupIndex;
    };

type BackendCanister = 
    variant {
        PhoneIndex;
        UserIndex;
        GroupIndex;
        User;
        Group;
    };

type InstallIndexRequest = 
    record {
        canister_type: IndexCanister;
        wasm: vec nat8;
        version: text;
    };

type InstallIndexResponse = 
    variant {
        Success: CanisterId;
        Failure; // Need to enumerate these
    };

type InstallWebsiteRequest = 
    record {
        canister_type: IndexCanister;
        wasm: vec nat8;
        version: text;
        // Assets?
    };

type InstallWebsiteResponse = 
    variant {
        Success: CanisterId;
        Failure; // Need to enumerate these
    };

type UpgradeRequest = 
    record {
        canister_type: BackendCanister;
        wasm: vec nat8;
        version: text;
    };

type UpgradeResponse = 
    variant {
        Success: record {
            canister_id: CanisterId;
        };
        Failure; // Need to enumerate these
    };

type BalanceNotification =
    record {
        balance: nat;
    };

type Metrics = 
    record {
        cycles_balance: int64;
        bytes_used: nat64;
        timestamp: nat64;
        caller_id: principal;
        wasm_memory_used: nat64;
    };

service: {
    // This creates and installs the initial WASM of the index canisters
    install_index: (InstallIndexRequest) -> (InstallIndexResponse);

    // This creates/installs or upgrades the website canister
    install_website: (InstallWebsiteRequest) -> (InstallWebsiteResponse);
    
    // This is used to upgrade the WASM of any back-end canister
    upgrade: (UpgradeRequest) -> (UpgradeResponse);

    // Called by a top-level canister when it is low on cycles
    notify_balance: (BalanceNotification) -> ();

    metrics: () -> (Metrics) query;
}