import "../../../libraries/types/can.did";

type PushSubscriptionArgs =
    record {
        user_id: UserId;
        subscription: Subscription;
    };

type PushSubscriptionResponse =
    variant {
        Success;
    };

type PushDirectMessageNotificationArgs =
    record {
        recipient: UserId;
        notification: DirectMessageNotification;
    };

type PushDirectMessageNotificationResponse =
    variant {
        Success;
    };

type PushGroupMessageNotificationArgs =
    record {
        recipients: vec UserId;
        notification: GroupMessageNotification;
    };

type PushGroupMessageNotificationResponse =
    variant {
        Success;
    };

type PushV1GroupMessageNotificationArgs =
    record {
        recipients: vec UserId;
        notification: V1GroupMessageNotification;
    };

type PushV1GroupMessageNotificationResponse =
    variant {
        Success;
    };

type PushV1DirectMessageNotificationArgs =
    record {
        recipient: UserId;
        notification: V1DirectMessageNotification;
    };

type PushV1DirectMessageNotificationResponse =
    variant {
        Success;
    };

type NotificationsSuccessResult =
    record {
        notifications: vec IndexedNotification;
        subscriptions: vec record { UserId; vec Subscription }
    };

type NotificationsArgs =
    record {
        from_notification_index: nat64;
    };

type NotificationsResponse =
    variant {
        Success: NotificationsSuccessResult;
        NotAuthorized;
    };

type RemoveNotificationsArgs =
    record {
        up_to_notification_index: nat64;
    };

type RemoveNotificationsResponse =
    variant {
        Success;
        NotAuthorized;
    };

type RemoveSubscriptionsArgs = 
    record {
        subscriptions_by_user: vec record {
            user_id: UserId;
            p256dh_keys: vec text;
        };
    };

type RemoveSubscriptionsResponse =
    variant {
        Success;
        NotAuthorized;
    };

type SubscriptionExistsArgs =
    record {
        user_id: UserId;
        p256dh_key: text;
    };

type SubscriptionExistsResponse =
    variant {
        Yes;
        No;
    };

type InitArgs = 
    record {
        push_service_principals: vec principal;
    };

service: (InitArgs) -> {
    push_subscription: (PushSubscriptionArgs) -> (PushSubscriptionResponse);
    push_direct_message_notification: (PushDirectMessageNotificationArgs) -> (PushDirectMessageNotificationResponse);
    push_group_message_notification: (PushGroupMessageNotificationArgs) -> (PushGroupMessageNotificationResponse);
    push_v1direct_message_notification: (PushV1DirectMessageNotificationArgs) -> (PushV1DirectMessageNotificationResponse);
    push_v1group_message_notification: (PushV1GroupMessageNotificationArgs) -> (PushV1GroupMessageNotificationResponse);
    
    remove_notifications: (RemoveNotificationsArgs) -> (RemoveNotificationsResponse);
    remove_subscriptions: (RemoveSubscriptionsArgs) -> (RemoveSubscriptionsResponse);
    notifications: (NotificationsArgs) -> (NotificationsResponse) query;
    subscription_exists: (SubscriptionExistsArgs) -> (SubscriptionExistsResponse) query;
}
