type GroupId = CanisterId;
type MessageIndex = nat32;
type UserId = CanisterId;

type DirectMessageNotification =
    record {
        sender: UserId;
        recipient: UserId;
        message_index: MessageIndex;
    };

type GroupMessageNotification =
    record {
        chat_id: GroupId;
        sender: UserId;
        recipients: vec UserId;
        message_index: MessageIndex;
    };

type Notification =
    variant {
        DirectMessageNotification: DirectMessageNotification;
        GroupMessageNotification: GroupMessageNotification;
    };

type IndexedNotification =
    record {
        index: nat64;
        notification: Notification;
    };

type NotificationsSuccessResult =
    record {
        notifications: vec IndexedNotification;
        subscriptions: vec { UserId, vec text; }
    };

type NotificationsArgs =
    record {
        from_notification_index: nat64;
    };

type NotificationsResponse =
    variant {
        Success(GetNotificationsSuccessResult);
        NotAuthorized;
    };

type RemoveNotificationsArgs =
    record {
        up_to_notification_index: nat64;
    };

type RemoveNotificationsResponse =
    variant {
        Success;
        NotAuthorized;
    };

service: {
    notifications: (NotificationsArgs) -> (NotificationsResponse);
    remove_notifications: (RemoveNotificationsArgs) -> (RemoveNotificationsResponse);
}
