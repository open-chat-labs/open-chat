import "../../../libraries/types/can.did";

type ActiveGroupsArgs =
    record {
        chat_ids: vec ChatId;
        active_in_last: Milliseconds;
    };

type ActiveGroupsResponse =
    variant {
        Success: ActiveGroupsSuccessResult;
    };

type ActiveGroupsSuccessResult = 
    record {
        active_groups: vec ChatId;
        deleted_groups: vec ChatId;
    };

type SearchArgs =
    record {
        search_term: text;
        max_results: nat8;
    };

type SearchResponse =
    variant {
        Success: SearchSuccessResult;
        TermTooShort: nat8;
        TermTooLong: nat8;
        InvalidTerm;
    };

type SearchSuccessResult =
    record {
        matches: vec GroupMatch;
    };

type GroupMatch =
    record {
        chat_id: ChatId;
        name: text;
        description: text;
        avatar_id: opt nat;
    };

type UpdateGroupCanisterWasmArgs =
    record {
        group_canister_wasm: CanisterWasm;
    };

type UpdateGroupCanisterWasmResponse =
    variant {
        Success;
        NotAuthorized;
        InvalidVersion;
        VersionNotHigher;
    };

type InitArgs =
    record {
        service_principals: vec principal;
        group_wasm_module: blob;
        notifications_canister_id: CanisterId;
        test_mode: bool;
    };

service: (InitArgs) -> {
    active_groups: (ActiveGroupsArgs) -> (ActiveGroupsResponse) query;
    search: (SearchArgs) -> (SearchResponse) query;

    // Update the stored group canister WASM module
    update_group_canister_wasm: (UpdateGroupCanisterWasmArgs) -> (UpdateGroupCanisterWasmResponse);
}
