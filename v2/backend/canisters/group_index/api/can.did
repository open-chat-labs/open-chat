import "../../../libraries/types/can.did";

type CreateArgs =
    record {
        name: text;
        is_public: bool;
    };

type CreateResponse =
    variant {
        Success: record {
            canister_id: CanisterId;
        };
        PublicGroupAlreadyExists;
        GroupLimitExceeded;
        InvalidName;
        NameTooLong: nat16;
        UnknownError;
    };

type UpgradeArgs =
    record {
        wasm: vec nat8;
        version: text;
    };

type UpgradeResponse =
    variant {
        Success: record {
            canister_id: CanisterId;
        };
        Failure; // Need to enumerate these
    };

type DeleteArgs =
    record {
        chat_id: ChatId;
    };

type DeleteResponse =
    variant {
        Success;
        NotAdmin;
        NotFound;
    };

type SearchArgs =
    record {
        search_term: text;
        max_results: nat8;
    };

type SearchResponse =
    variant {
        Success: record {
            groups: vec record {
                chat_id: ChatId;
                name: text;
                score: nat32;
            };
        };
        TermTooShort: nat16;
        TermTooLong: nat16;
        InvalidTerm;
    };

type NotifyBalanceArgs =
    record {
        balance: nat;
    };

type MetricsArgs =
    record {
    };

type MetricsResponse = 
    record {
        public_group_count: nat64;
        private_group_count: nat64;
        active_public_group_count: nat64;
        active_private_group_count: nat64;
        deleted_public_group_count: nat64;
        deleted_private_group_count: nat64;
        cycles_balance: int64;
        bytes_used: nat64;
        timestamp: TimestampMillis;
        caller_id: principal;
        wasm_memory_used: nat64;
    };

service: {
    // Called by a user canister - costs 0.2T
    create: (CreateArgs) -> (CreateResponse);
    
    // Takes a new Group canister WASM and schedules a rolling upgrade
    upgrade: (UpgradeArgs) -> (UpgradeResponse);
    
    // Any group admin can delete the group
    delete: (DeleteArgs) -> (DeleteResponse);

    // Search for public groups
    search: (SearchArgs) -> (SearchResponse) query;

    // Called by a group canister when it is low on cycles
    notify_balance: (NotifyBalanceArgs) -> ();

    metrics: (MetricsArgs) -> (MetricsResponse) query;
}
