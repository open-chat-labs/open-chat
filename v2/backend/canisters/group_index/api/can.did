import "../../../libraries/types/can.did";

type RecommendedGroupsArgs =
    record {
        count: nat8;
    };

type RecommendedGroupsResponse =
    variant {
        Success: RecommendedGroupsSuccessResult;
    };

type RecommendedGroupsSuccessResult =
    record {
        groups: vec PublicGroupSummary;
    };

type SearchArgs =
    record {
        search_term: text;
        max_results: nat8;
    };

type SearchResponse =
    variant {
        Success: SearchSuccessResult;
        TermTooShort: nat8;
        TermTooLong: nat8;
        InvalidTerm;
    };

type SearchSuccessResult =
    record {
        matches: vec GroupMatch;
    };

type GroupMatch =
    record {
        chat_id: ChatId;
        name: text;
        description: text;
        avatar_id: opt nat;
    };

service: {
    recommended_groups: (RecommendedGroupsArgs) -> (RecommendedGroupsResponse) query;
    search: (SearchArgs) -> (SearchResponse) query;
}
