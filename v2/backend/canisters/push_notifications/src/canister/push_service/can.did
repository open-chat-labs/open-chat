type GroupId = CanisterId;
type MessageIndex = nat32;
type UserId = CanisterId;

type DirectMessageNotification =
    record {
        sender: UserId;
        recipient: UserId;
        message_index: MessageIndex;
    };

type GroupMessageNotification =
    record {
        chat_id: GroupId;
        sender: UserId;
        recipients: vec UserId;
        message_index: MessageIndex;
    };

type Subscription =
    record {
        user_id: UserId;
        subscription: text;
    };

type Event =
    variant {
        DirectMessageNotification: DirectMessageNotification;
        GroupMessageNotification: GroupMessageNotification;
        Subscription: Subscription;
    };

type IndexedEvent =
    record {
        index: nat64;
        event: Event;
    };

type GetEventsSuccessResult =
    record {
        events: vec IndexedEvent;
    };

type GetEventsArgs =
    record {
        from_event_index: nat64;
    };

type GetEventsResponse =
    variant {
        Success(SuccessResult);
        NotAuthorized;
    };

type RemoveEventsArgs =
    record {
        up_to_event_index: nat64;
    };

type RemoveEventsResponse =
    variant {
        Success;
        NotAuthorized;
    };

service: {
    get_events: (GetEventsArgs) -> (GetEventsResponse);
    remove_events: (RemoveEventsArgs) -> (RemoveEventsResponse);
}
