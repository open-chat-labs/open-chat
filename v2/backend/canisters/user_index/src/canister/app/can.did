// Maintains a registry of users and manages the user canisters

type Milliseconds = nat64;
type TimestampMillis = nat64;
type CanisterId = principal;
type UserId = CanisterId;

type PhoneNumber = 
    record {
        country_code: nat16;
        number: text;
    };

type SubmitPhoneNumberArgs = 
    record {
        number: PhoneNumber;
    };

type SubmitPhoneNumberResponse = 
    variant {
        Success;
        AlreadyRegistered;
        AlreadyRegisteredByOther;
        InvalidPhoneNumber;
    };

type ConfirmPhoneNumberArgs = 
    record {
        confirmation_code: text;
    };

type ConfirmPhoneNumberResponse = 
    variant {
        Success;
        ConfirmationCodeIncorrect;
        ConfirmationCodeExpired;
        AlreadyClaimed;
        UserNotFound;
    };

type ResendCodeArgs = 
    record {        
    };

type ResendCodeResponse = 
    variant {
        Success;
        AlreadyClaimed;
        UserNotFound;
    };


type CreateCanisterArgs =
    record {
    };

type SetUsernameArgs =
    record {
        username: text;
    };

type SetUsernameResponse =
    variant {
        Success;
        UsernameTaken;
        UserNotFound;
        UsernameInvalid;
        UsernameTooShort: nat16;
        UsernameTooLong: nat16;
    };

type UpdateWasmArgs =
    record {
        wasm: vec nat8;
        version: text;
    };

type UpgradeCanisterArgs =
    record {
    };

type MarkAsOnlineArgs = 
    record {
    };

type TransferCyclesArgs = 
    record {
        sender: UserId;
        recipient: UserId;
        amount: nat;
    };

type TransferCyclesResponse = 
    variant {
        Success: record {
            new_balance: nat;
        };
        UserNotFound;
        RecipientNotFound;
        BalanceExceeded;
    };

type NotifyBalanceArgs =
    record {
        balance: nat;
    };

type CurrentUserArgs = 
    record {
    };

type CurrentUserResponse =
    variant {
        UserNotFound;
        Unconfirmed: record {
            phone_number: PhoneNumber;
        };
        ConfirmedPendingUsername: record {
            canister_creation_status: variant {
                Pending;
                InProgress;
                Created;
            };
        };
        Confirmed: record {
            username: text;
            canister_creation_status: variant {
                Pending;
                InProgress;
            };
        };
        Created: record {
            user_id: UserId;
            username: text;
            account_balance: nat;
            upgrade_required: bool;
        };
        UpgradeInProgress;
    };

type UserSummary =
    record {
        user_id: UserId;
        username: text;
        seconds_since_last_online: nat32;
    };

type PartialUserSummary =
    record {
        user_id: UserId;
        username: opt text;
        seconds_since_last_online: nat32;
    };

type UserArgs = 
    record {
        user_id: opt UserId;
        username: opt text;
    };

type UserResponse =
    variant {
        Success: UserSummary;
        UserNotFound;
    };

type UsersArgs =
    record {
        users: vec UserId;
        updated_since: opt TimestampMillis;
    };

type UsersResponse =
    variant {
        Success: record {
            users: vec PartialUserSummary;
            timestamp: TimestampMillis;
        }
    };

type SearchArgs =
    record {
        search_term: text;
        max_results: nat8
    };

type SearchResponse =
    variant {
        Success: record {
            users: vec UserSummary;
        }
    };

type MetricsArgs =
    record {
    };

type MetricsResponse = 
    record {
        unconfirmed_user_count: nat64;
        confirmed_user_count: nat64;
        created_user_count: nat64;
        active_user_count: nat64;
        online_user_count: nat64;
        cycles_transferred: nat;
        cycles_balance: int64;
        bytes_used: nat64;
        timestamp: TimestampMillis;
        caller_id: principal;
        wasm_memory_used: nat64;
    };

service : {
    // If the current user does not exist, the phone number is valid, and not already in use 
    // then send an SMS with a confirmation code to this phone number
    submit_phone_number: (SubmitPhoneNumberArgs) -> (SubmitPhoneNumberResponse);

    // Once the user receives a confirmation code by SMS and enters it, call this method to
    // confirm the code matches and this set the user state as "confirmed"
    confirm_phone_number: (ConfirmPhoneNumberArgs) -> (ConfirmPhoneNumberResponse);

    // If the user did not receive or enter the confirmation code before it expired then
    // call this to resend the code
    resend_code: (ResendCodeArgs) -> (ResendCodeResponse);

    // Once the confirm_phone_number call has succeeded (user is in one of the "confirmed" states)
    // then call this to create a canister for the user
    create_canister: (CreateCanisterArgs) -> ();

    // This is used to set the initial username and subsequently to change it
    set_username: (SetUsernameArgs) -> (SetUsernameResponse);

    // Update the WASM version for the user canisters - this doesn't actually upgrade any user canisters
    update_wasm: (UpdateWasmArgs) -> ();

    // If the current user is "upgrade_required" then call this to upgrade the user canister
    // Will need to block in the app until this has completed
    upgrade_canister: (UpgradeCanisterArgs) -> ();

    // Call this regularly to maintain the online status of the user
    mark_as_online: (MarkAsOnlineArgs) -> ();

    // Called by a user canister - authorized based on caller
    transfer_cycles: (TransferCyclesArgs) -> (TransferCyclesResponse);

    // Called by a user canister when it is low on cycles
    notify_balance: (NotifyBalanceArgs) -> ();

    // Gets the user based on the caller principal. The user can be in a variety of states
    current_user: (CurrentUserArgs) -> (CurrentUserResponse) query;

    // Gets a user by id or username
    user: (UserArgs) -> (UserResponse) query;

    // Gets some users by id
    users: (UsersArgs) -> (UsersResponse) query;

    // Search for users matching some query
    search: (SearchArgs) -> (SearchResponse) query;

    // Canister metrics
    metrics: (MetricsArgs) -> (MetricsResponse) query;
}