import "../../../libraries/types/can.did";

type RegisterUserArgs = 
    record {
        username: text;
    };

type RegisterUserResponse = 
    variant {
        Success: UserId;
        AlreadyRegistered;
        UserLimitReached;
        UsernameTaken;
        UsernameInvalid;
        UsernameTooShort: nat16;
        UsernameTooLong: nat16;
        CyclesBalanceTooLow;
        InternalError: text;
        NotSupported;
    };

type PhoneNumber = 
    record {
        country_code: nat16;
        number: text;
    };

type SubmitPhoneNumberArgs = 
    record {
        phone_number: PhoneNumber;
    };

type SubmitPhoneNumberResponse = 
    variant {
        Success;
        AlreadyRegistered;
        AlreadyRegisteredByOther;
        InvalidPhoneNumber;
        UserLimitReached;
    };

type ConfirmPhoneNumberArgs = 
    record {
        confirmation_code: text;
    };

type ConfirmPhoneNumberResponse = 
    variant {
        Success: SuccessResult;
        ConfirmationCodeIncorrect;
        ConfirmationCodeExpired;
        AlreadyClaimed;
        PhoneNumberNotSubmitted;
    };

type SuccessResult =
    record {
        open_storage_limit_bytes: nat64;
    };

type ResendCodeArgs = 
    record {        
    };

type ResendCodeResponse = 
    variant {
        Success;
        AlreadyClaimed;
        PhoneNumberNotSubmitted;
        UserNotFound;
    };

type GenerateRegistrationFeeArgs =
    record {
        currency: Cryptocurrency;
    };

type GenerateRegistrationFeeResponse =
    variant {
        Success: record {
            fee: RegistrationFee;
        };
        AlreadyRegistered;
        InvalidCurrency;
    };

type NotifyRegistrationFeePaidArgs =
    record {
    };

type NotifyRegistrationFeePaidResponse =
    variant {
        Success;
        AlreadyRegistered;
        PaymentNotFound;
        UserNotFound;
        InternalError: text;
    };

type RefreshAccountBalanceArgs =
    record {
    };

type RefreshAccountBalanceResponse =
    variant {
        Success: AccountCredit;
        SuccessNoChange: AccountCredit;
        UserNotFound;
        InternalError: text;
    };

type AccountCredit =
    record {
        account_credit: ICP;
    };

type UpgradeStorageArgs =
    record {
        new_storage_limit_bytes: nat64;
    };

type UpgradeStorageResponse =
    variant {
        Success: record {
            remaining_account_credit: ICP;
        };
        SuccessNoChange;
        PaymentInsufficient: record {
            account_credit: ICP;
            amount_required: ICP;
        };
        PaymentNotFound;
        StorageLimitExceeded: nat64; // Returns the storage limit in bytes
        UserNotFound;
    };

type CreateCanisterArgs =
    record {
    };

type CreateCanisterResponse =
    variant {
        Success: CanisterId;
        UserNotFound;
        UserUnconfirmed;
        UserAlreadyCreated;
        CreationInProgress;
        CyclesBalanceTooLow;
        InternalError: text;
    };

type SetUsernameArgs =
    record {
        username: text;
    };

type SetUsernameResponse =
    variant {
        Success;
        UsernameTaken;
        UserUnconfirmed;
        UserNotFound;
        UsernameInvalid;
        UsernameTooShort: nat16;
        UsernameTooLong: nat16;
    };

type UpgradeCanisterArgs =
    record {
    };

type UpgradeCanisterResponse =
    variant {
        Success;
        UserNotFound;
        UserNotCreated;
        UpgradeNotRequired;
        UpgradeInProgress;
        InternalError: text;
    };

type TransferCyclesArgs = 
    record {
        sender: UserId;
        recipient: UserId;
        amount: nat;
    };

type TransferCyclesResponse = 
    variant {
        Success: record {
            new_balance: nat;
        };
        UserNotFound;
        RecipientNotFound;
        BalanceExceeded;
    };

type CurrentUserArgs = 
    record {
    };

type CurrentUserResponse =
    variant {
        UserNotFound;
        Unconfirmed: record {
            state: UnconfirmedUserState;
        };
        ConfirmedPendingUsername: record {
            canister_creation_status: CanisterCreationStatus;
            confirmation_state: ConfirmationState;
        };
        Confirmed: record {
            username: text;
            canister_creation_status: CanisterCreationStatus;
            confirmation_state: ConfirmationState;
        };
        Created: record {
            user_id: UserId;
            username: text;
            canister_upgrade_status: CanisterUpgradeStatus;
            avatar_id: opt nat;
            wasm_version: Version;
            open_storage_limit_bytes: nat64;
            phone_status: PhoneStatus;
            billing_account: AccountIdentifier;
            account_credit: ICP;
        };
    };

type UnconfirmedUserState =
    variant {
        PhoneNumber: UnconfirmedPhoneNumberState;
        RegistrationFee: RegistrationFee;
    };

type UnconfirmedPhoneNumberState =
    record {
        phone_number: PhoneNumber;
        valid_until: TimestampMillis;
    };

type ConfirmationState =
    variant {
        PhoneNumber: PhoneNumber;
        RegistrationFee: RegistrationFee;
    };

type PhoneStatus =
    variant {
        None;
        Unconfirmed: UnconfirmedPhoneNumberState;
        Confirmed;
    };

type UserArgs = 
    record {
        user_id: opt UserId;
        username: opt text;
    };

type UserResponse =
    variant {
        Success: UserSummary;
        UserNotFound;
    };

type UsersArgs =
    record {
        user_groups: vec record {
            users: vec UserId;
            updated_since: TimestampMillis;
        };
    };

type UsersResponse =
    variant {
        Success: record {
            users: vec PartialUserSummary;
            timestamp: TimestampMillis;
        }
    };

type SearchArgs =
    record {
        search_term: text;
        max_results: nat8
    };

type SearchResponse =
    variant {
        Success: record {
            users: vec UserSummary;
            timestamp: TimestampMillis;
        }
    };

type AddSuperAdminArgs =
    record {
        user_id: UserId;
    };

type AddSuperAdminResponse =
    variant {
        Success;
        AlreadySuperAdmin;
        InternalError: text;
    };

type RemoveSuperAdminArgs =
    record {
        user_id: UserId;
    };

type RemoveSuperAdminResponse =
    variant {
        Success;
        NotSuperAdmin;
        InternalError: text;
    };

type SuperAdminsArgs =
    record {
    };

type SuperAdminsResponse =
    variant {
        Success: record {
            users: vec UserId;
        };
    };

service: {
    register_user: (RegisterUserArgs) -> (RegisterUserResponse);

    // If the current user does not exist, the phone number is valid, and not already in use 
    // then send an SMS with a confirmation code to this phone number
    submit_phone_number: (SubmitPhoneNumberArgs) -> (SubmitPhoneNumberResponse);

    // Once the user receives a confirmation code by SMS and enters it, call this method to
    // confirm the code matches and this set the user state as "confirmed"
    confirm_phone_number: (ConfirmPhoneNumberArgs) -> (ConfirmPhoneNumberResponse);

    // If the user did not receive or enter the confirmation code before it expired then
    // call this to resend the code
    resend_code: (ResendCodeArgs) -> (ResendCodeResponse);

    // If the user wants to register by paying a small fee, they should call this endpoint with their chosen currency,
    // the response will contain the payment details
    generate_registration_fee: (GenerateRegistrationFeeArgs) -> (GenerateRegistrationFeeResponse);

    notify_registration_fee_paid: (NotifyRegistrationFeePaidArgs) -> (NotifyRegistrationFeePaidResponse);

    // Checks the user's ledger account and credits their account if there has been a payment
    refresh_account_balance: (RefreshAccountBalanceArgs) -> (RefreshAccountBalanceResponse);

    // Increases the user's storage limit in OpenStorage (provided the user has enough credit)
    upgrade_storage: (UpgradeStorageArgs) -> (UpgradeStorageResponse);

    // Once the confirm_phone_number call has succeeded (user is in one of the "confirmed" states)
    // then call this to create a canister for the user
    create_canister: (CreateCanisterArgs) -> (CreateCanisterResponse);

    // This is used to set the initial username and subsequently to change it
    set_username: (SetUsernameArgs) -> (SetUsernameResponse);

    // If the current user is "upgrade_required" then call this to upgrade the user canister
    // Will need to block in the app until this has completed
    upgrade_canister: (UpgradeCanisterArgs) -> (UpgradeCanisterResponse);

    // Gets the user based on the caller principal. The user can be in a variety of states
    current_user: (CurrentUserArgs) -> (CurrentUserResponse) query;

    // Gets a user by id or username
    user: (UserArgs) -> (UserResponse) query;

    // Gets some users by id
    users: (UsersArgs) -> (UsersResponse) query;

    // Search for users matching some query
    search: (SearchArgs) -> (SearchResponse) query;

    // Only callable by "service principals"
    add_super_admin: (AddSuperAdminArgs) -> (AddSuperAdminResponse);
    remove_super_admin: (RemoveSuperAdminArgs) -> (RemoveSuperAdminResponse);
    super_admins: (SuperAdminsArgs) -> (SuperAdminsResponse) query;
}