import "../../../libraries/types/can.did";

type SendMessageArgs =
    record {
        message_id: MessageId;
        content: MessageContent;
        sender_name: text;
        replies_to: opt ReplyContextArgs;
    };

type SendMessageResponse =
    variant {
        Success: record {
            message_index: MessageIndex;
            event_index: EventIndex;
            timestamp: TimestampMillis;
        };
        NotInGroup;
    };

type DeleteMessagesArgs =
    record {
        message_ids: vec MessageId;
    };

type DeleteMessagesResponse =
    variant {
        Success;
        NotInGroup;
    };

type ToggleReactionArgs =
    record {
        message_id: MessageId;
        reaction: text;
    };

type ToggleReactionResponse =
    variant {
        Added;
        Removed;
        InvalidReaction;
        MessageNotFound;
        ChatNotFound;
    };

type MarkReadArgs =
    record {
        message_ranges: vec MessageIndexRange;
    };

type MarkReadResponse =
    variant {
        Success;
        SuccessNoChange;
        NotInGroup;
    };

type BlockUserArgs =
    record {
        user_id: UserId;
    };

type BlockUserResponse =
    variant {
        Success;
        CallerNotInGroup;
        CannotBlockSelf;
        GroupNotPublic;
        InternalError: text;
        NotAuthorized;
        UserNotInGroup;
    }; 

type UnblockUserArgs =
    record {
        user_id: UserId;
    };

type UnblockUserResponse =
    variant {
        Success;
        CallerNotInGroup;
        CannotUnblockSelf;
        GroupNotPublic;
        NotAuthorized;
    }; 

type AddParticipantsArgs =
    record {
        user_ids: vec UserId;
    };

type AddParticipantsResponse =
    variant {
        Success;
        PartialSuccess: AddParticipantsPartialSuccessResult;
        Failed: AddParticipantsFailedResult;
        NotInGroup;
        NotAuthorized;
    };

type AddParticipantsPartialSuccessResult =
    record {
        users_added: vec UserId;
        users_already_in_group: vec UserId;
        users_blocked_from_group: vec UserId;
        users_who_blocked_request: vec UserId;
        errors: vec UserId;
    };

type AddParticipantsFailedResult =
    record {
        users_already_in_group: vec UserId;
        users_blocked_from_group: vec UserId;
        users_who_blocked_request: vec UserId;
        errors: vec UserId;
    };

type RemoveParticipantArgs =
    record {
        user_id: UserId;
    };

type RemoveParticipantResponse =
    variant {
        Success;
        CallerNotInGroup;
        CannotRemoveSelf;
        InternalError: text;
        NotAuthorized;
        UserNotInGroup;
    }; 

type MakeAdminArgs =
    record {
        user_id: UserId;
    };

type MakeAdminResponse =
    variant {
        Success;
        CallerNotInGroup;
        NotAuthorized;
        UserNotInGroup;
    }; 

type RemoveAdminArgs =
    record {
        user_id: UserId;
    };

type RemoveAdminResponse =
    variant {
        Success;
        CallerNotInGroup;
        NotAuthorized;
        UserNotInGroup;
    };

type PutChunkArgs =
    record {
        blob_id: nat;
        mime_type: text;
        total_chunks: nat32;
        index: nat32;
        bytes: blob;
    };

type PutChunkResponse =
    variant {
        Success;
        CallerNotInGroup;
        BlobAlreadyExists;
        ChunkAlreadyExists;
        ChunkTooBig;
        Full;
    };

type AddWebRtcSessionDetailsArgs =
    record {
        session_details: vec WebRtcSessionDetails;
    };

type AddWebRtcSessionDetailsResponse =
    variant {
        Success;
        Blocked;
    }; 

type RemoveWebRtcSessionDetailsArgs =
    record {
        ids: vec text;
    };

type RemoveWebRtcSessionDetailsResponse =
    variant {
        Success;
    }; 

type UpdateGroupArgs =
    record {
        name: text;
        description: text;
        avatar: opt Avatar;
    };

type UpdateGroupResponse =
    variant {
        Success;
        NotAuthorized;
        NameTooLong: FieldTooLongResult;
        DescriptionTooLong: FieldTooLongResult;
        Unchanged;
        NameTaken;
        InternalError;
    };

type SummaryArgs =
    record {
    };

type SummaryResponse =
    variant {
        Success: GroupChatSummary;
        SuccessNoUpdates;
        NotInGroup;
    };

type SummaryUpdatesArgs =
    record {
        updates_since: TimestampMillis;
    };

type SummaryUpdatesSuccess =
    record {
        updates: GroupChatSummaryUpdates;
    };

type SummaryUpdatesResponse =
    variant {
        Success: SummaryUpdatesSuccess;
        SuccessNoUpdates;
        NotInGroup;
    };

type EventsArgs =
    record {
        start_index: EventIndex;
        ascending: bool;
        max_messages: nat32;
        max_events: nat32;
    };

type EventsRangeArgs =
    record {
        from_index: EventIndex;
        to_index: EventIndex;
    };

type EventsByIndexArgs =
    record {
        events: vec GroupChatEventWrapper;
    };

type EventsSuccessResult =
    record {
        events: vec GroupChatEventWrapper;
        affected_events: vec GroupChatEventWrapper;
        latest_event_index: EventIndex;
    };

type EventsResponse =
    variant {
        Success: EventsSuccessResult;
        ChatNotFound;
    }; 

type SearchMessagesArgs =
    record {
        search_term: text;
        max_results: nat8;
    };

type SearchMessagesResponse =
    variant {
        Success: SearchMessagesSuccessResult;
        TermTooShort: nat8;
        TermTooLong: nat8;
        InvalidTerm;
        NotInGroup;
    }; 

type SearchMessagesSuccessResult =
    record {
        matches: vec MessageMatch;
    };

type MetricsArgs =
    record {
    };

type MetricsResponse = 
    record {
        text_message_count: nat64;
        image_message_count: nat64;
        video_message_count: nat64;
        file_message_count: nat64;
        cycles_balance: int64;
        bytes_used: nat64;
        blob_bytes_used: nat64;
        chunk_count: nat32;
        timestamp: TimestampMillis;
        caller_id: principal;
        wasm_memory_used: nat64;
    };

service: {
    // Admin only
    block_user: (BlockUserArgs) -> (BlockUserResponse); // public only
    unblock_user: (UnblockUserArgs) -> (UnblockUserResponse); // public only
    make_admin: (MakeAdminArgs) -> (MakeAdminResponse);
    remove_admin: (RemoveAdminArgs) -> (RemoveAdminResponse);
    remove_participant: (RemoveParticipantArgs) -> (RemoveParticipantResponse);
    update_group: (UpdateGroupArgs) -> (UpdateGroupResponse);

    // Can be called by admins or regular users of public groups
    add_participants: (AddParticipantsArgs) -> (AddParticipantsResponse); 

    // Regular users
    send_message: (SendMessageArgs) -> (SendMessageResponse);
    delete_messages: (DeleteMessagesArgs) -> (DeleteMessagesResponse);
    toggle_reaction: (ToggleReactionArgs) -> (ToggleReactionResponse);
    mark_read: (MarkReadArgs) -> (MarkReadResponse);
    put_chunk: (PutChunkArgs) -> (PutChunkResponse);
    add_webrtc_session_details: (AddWebRtcSessionDetailsArgs) -> (AddWebRtcSessionDetailsResponse);
    remove_webrtc_session_details: (RemoveWebRtcSessionDetailsArgs) -> (RemoveWebRtcSessionDetailsResponse);

    summary: (SummaryArgs) -> (SummaryResponse) query;
    summary_updates: (SummaryUpdatesArgs) -> (SummaryUpdatesResponse) query;
    events: (EventsArgs) -> (EventsResponse) query;
    events_range: (EventsRangeArgs) -> (EventsResponse) query;
    events_by_index: (EventsByIndexArgs) -> (EventsResponse) query;
    search_messages: (SearchMessagesArgs) -> (SearchMessagesResponse) query; // Use Tantivy
    metrics: (MetricsArgs) -> (MetricsResponse) query;
}
