import "../../../libraries/types/can.did";

type SendMessageArgs =
    record {
        recipient: UserId;
        sender_name: text;
        message_id: MessageId;
        content: MessageContent;
        replies_to: opt ReplyContext;
    };

type SendMessageResponse =
    variant {
        Success: record {
            chat_id: ChatId;
            event_index: EventIndex;
            message_index: MessageIndex;
            timestamp: TimestampMillis;
        };
        RecipientNotFound;
        BalanceExceeded;
        MessageTooLong: nat32;
        InvalidRequest;
        RecipientBlocked;
    };

type EditMessageArgs =
    record {
        user_id: UserId;
        message_id: MessageId;
        content: MessageContent;
    };

type EditMessageResponse =
    variant {
        Success;
        MessageNotFound;
        ChatNotFound;
    };

type DeleteMessagesArgs =
    record {
        user_id: UserId;
        message_ids: vec MessageId;
    };

type DeleteMessagesResponse =
    variant {
        Success;
        ChatNotFound;
    };

type ToggleReactionArgs =
    record {
        user_id: UserId;
        message_id: MessageId;
        reaction: text;
    };

type ToggleReactionResponse =
    variant {
        Added: EventIndex;
        Removed: EventIndex;
        InvalidReaction;
        MessageNotFound;
        ChatNotFound;
    };

type MarkReadArgs =
    record {
        messages_read: vec ChatMessagesRead;
    };

type ChatMessagesRead = 
    record {
        chat_id: ChatId;
        message_ranges: vec MessageIndexRange;
    };

type MarkReadResponse =
    variant {
        Success;
    };

type BlockUserArgs =
    record {
        user_id: UserId;        
    };

type BlockUserResponse =
    variant {
        Success;
    }; 

type UnblockUserArgs =
    record {
        user_id: UserId;        
    };

type UnblockUserResponse =
    variant {
        Success;
    }; 

type PutChunkArgs =
    record {
        blob_id: nat;
        mime_type: text;
        total_chunks: nat32;
        index: nat32;
        bytes: vec nat8;
    };

type PutChunkResponse =
    variant {
        Success;
        BlobAlreadyExists;
        ChunkAlreadyExists;
        ChunkTooBig;
        BlobTooBig;
        Full;
    }; 

type CreateGroupArgs =
    record {
        is_public: bool;
        name: text;
        description: text;
        avatar: opt Avatar;
        history_visible_to_new_joiners: bool;
    };

type CreateGroupSuccessResult =
    record {
        chat_id: ChatId;
    };

type CreateGroupResponse =
    variant {
        Success: CreateGroupSuccessResult;
        NameTooLong: FieldTooLongResult;
        DescriptionTooLong: FieldTooLongResult;
        AvatarTooBig: FieldTooLongResult;
        MaxGroupsCreated: nat32;
        NameTaken;
        Throttled;
        InternalError;
    };

type JoinGroupArgs =
    record {
        chat_id: ChatId;
    };

type JoinGroupResponse =
    variant {
        Success;
        AlreadyInGroup;
        Blocked;
        GroupNotFound;
        GroupNotPublic;
        ParticipantLimitReached: nat32;
        InternalError: text;
    };

type LeaveGroupArgs =
    record {
        chat_id: ChatId;
    };

type LeaveGroupResponse =
    variant {
        Success;
        GroupNotFound;
        InternalError: text;
        CallerNotInGroup;
    }; 

type SetAvatarArgs =
    record {
        id: nat;
        mime_type: text;
        data: blob;
    };

type SetAvatarResponse =
    variant {
        Success: nat;
        AvatarTooBig: FieldTooLongResult;
    }; 

type MuteNotificationsArgs =
    record {
        chat_id: ChatId;
    };

type MuteNotificationsResponse =
    variant {
        Success;
        ChatNotFound;
    }; 

type UnmuteNotificationsArgs =
    record {
        chat_id: ChatId;
    };

type UnmuteNotificationsResponse =
    variant {
        Success;
        ChatNotFound;
    }; 

type GroupChatUpdatesSince =
    record {
        chat_id: ChatId;
        updates_since: TimestampMillis;
    };

type UpdatesSince =
    record {
        timestamp: TimestampMillis;
        group_chats: vec GroupChatUpdatesSince;
    };

type UpdatesArgs = 
    record {
        updates_since: opt UpdatesSince;
    };

type UpdatesResponse =
    variant {
        Success: record {
            timestamp: TimestampMillis;
            chats_added: vec ChatSummary;
            chats_updated: vec ChatSummaryUpdates;
            chats_removed: vec ChatId;
            transactions: vec Transaction;
            blocked_users: vec UserId;
            cycles_balance: opt Cycles;
        }
    };

type EventsArgs =
    record {
        user_id: UserId;
        start_index: EventIndex;
        ascending: bool;
        max_messages: nat32;
        max_events: nat32;
    };

type EventsByIndexArgs =
    record {
        user_id: UserId;
        events: vec EventIndex;
    };

type EventsRangeArgs =
    record {
        user_id: UserId;
        from_index: EventIndex;
        to_index: EventIndex;
    };

type EventsWindowArgs =
    record {
        user_id: UserId;
        mid_point: MessageIndex;
        max_messages: nat32;
        max_events: nat32;
    };

type EventsSuccessResult =
    record {
        events: vec DirectChatEventWrapper;
        affected_events: vec DirectChatEventWrapper;
    };

type EventsResponse =
    variant {
        Success: EventsSuccessResult;
        ChatNotFound;
    };

type TransactionsArgs =
    record {
        start_index: nat32;
        ascending: bool;
        max_transactions: nat8;
    };

type TransactionsResponse =
    variant {
        Success: TransactionsSuccessResult;
    };

type TransactionsSuccessResult =
    record {
        transactions: vec TransactionWrapper;
        latest_transaction_index: opt nat32;
    };

type SearchMessagesArgs =
    record {
        user_id: UserId;
        search_term: text;
        max_results: nat8;
    };

type SearchMessagesResponse =
    variant {
        Success: SearchMessagesSuccessResult;
        TermTooShort: nat8;
        TermTooLong: nat8;
        InvalidTerm;
        ChatNotFound;
    }; 

type SearchMessagesSuccessResult =
    record {
        matches: vec MessageMatch;
    };

type SearchAllMessagesArgs =
    record {
        search_term: text;
        max_results: nat8;
    };

type SearchAllMessagesResponse =
    variant {
        Success: SearchMessagesSuccessResult;
        TermTooShort: nat8;
        TermTooLong: nat8;
        InvalidTerm;
    }; 

type MetricsArgs =
    record {
    };

type MetricsResponse = 
    record {
        direct_chat_count: nat32;
        group_chat_count: nat32;
        text_message_count: nat64;
        image_message_count: nat64;
        video_message_count: nat64;
        file_message_count: nat64;
        cycles_message_count: nat64;
        cycles_balance: int64;
        bytes_used: nat64;
        blob_bytes_used: nat64;
        chunk_count: nat32;
        timestamp: TimestampMillis;
        caller_id: principal;
        wasm_memory_used: nat64;
    };

type InitArgs = 
    record {
        owner: principal;
        notification_canister_ids: vec CanisterId;
    };

service: (InitArgs) -> {
    send_message: (SendMessageArgs) -> (SendMessageResponse);
    edit_message: (EditMessageArgs) -> (EditMessageResponse);
    delete_messages: (DeleteMessagesArgs) -> (DeleteMessagesResponse);
    toggle_reaction: (ToggleReactionArgs) -> (ToggleReactionResponse);
    mark_read: (MarkReadArgs) -> (MarkReadResponse);
    block_user: (BlockUserArgs) -> (BlockUserResponse);
    unblock_user: (UnblockUserArgs) -> (UnblockUserResponse);
    put_chunk: (PutChunkArgs) -> (PutChunkResponse);
    create_group: (CreateGroupArgs) -> (CreateGroupResponse);
    join_group: (JoinGroupArgs) -> (JoinGroupResponse);
    leave_group: (LeaveGroupArgs) -> (LeaveGroupResponse);
    set_avatar: (SetAvatarArgs) -> (SetAvatarResponse);
    mute_notifications: (MuteNotificationsArgs) -> (MuteNotificationsResponse);
    unmute_notifications: (UnmuteNotificationsArgs) -> (UnmuteNotificationsResponse);
    
    events: (EventsArgs) -> (EventsResponse) query;
    events_by_index: (EventsByIndexArgs) -> (EventsResponse) query;
    events_range: (EventsRangeArgs) -> (EventsResponse) query;
    events_window: (EventsWindowArgs) -> (EventsResponse) query;

    transactions: (TransactionsArgs) -> (TransactionsResponse) query;

    updates: (UpdatesArgs) -> (UpdatesResponse) query;
    search_messages: (SearchMessagesArgs) -> (SearchMessagesResponse) query; // Search just the messages of one direct chat
    search_all_messages: (SearchAllMessagesArgs) -> (SearchAllMessagesResponse) query; // Uses ICQC to search all group chats too

    metrics: (MetricsArgs) -> (MetricsResponse) query;
}
