import "../../../libraries/types/can.did";

type ReplyContextArgs =
    record {
        chat_id_if_other: opt GroupChatId;
        message_index: MessageIndex;
    };

type SendMessageArgs =
    record {
        recipient: UserId;
        sender_name: text;
        message_id: MessageId;
        content: MessageContent;
        replies_to: opt ReplyContextArgs;
    };

type SendMessageResponse =
    variant {
        Success: record {
            message_index: MessageIndex;
            timestamp: TimestampMillis;
            latest_read_by_me: MessageIndex;
            latest_read_by_them: MessageIndex;
        };
        RecipientNotFound;
        BalanceExceeded;
        MessageTooLong: nat32;
        InvalidRequest;
        SenderBlocked;
        RecipientBlocked;
    }; 

type MarkReadArgs =
    record {
        user_id: UserId;
        up_to_message_index: MessageIndex;
    };

type MarkReadResponse =
    variant {
        Success;
        SuccessNoChange;
        ChatNotFound;
        NotAuthorized;
    }; 

type SetAvatarArgs =
    record {
        mime_type: text;
        bytes: vec nat8;
    };

type SetAvatarResponse =
    variant {
        Success;
        FileTooBig: nat32;
        InvalidMimeType: nat32;
    }; 

type BlockUserArgs =
    record {
        user_id: UserId;        
    };

type UnblockUserArgs =
    record {
        user_id: UserId;        
    };

type PutChunkArgs =
    record {
        blob_id: nat;
        index: nat32;
        bytes: vec nat8;
    };

type PutChunkResponse =
    variant {
        Success;
        Full;
    }; 

type CreateGroupArgs =
    record {
        is_public: bool;
        name: text;
        description: text;
        history_visible_to_new_joiners: bool;
    };

type CreateGroupFieldTooLongResult =
    record {
        group_chat_id: GroupChatId;
    };

type CreateGroupSuccessResult =
    record {
        group_chat_id: GroupChatId;
    };

type CreateGroupResponse =
    variant {
        Success: CreateGroupSuccessResult;
        NameTooLong: CreateGroupFieldTooLongResult;
        DescriptionTooLong: CreateGroupFieldTooLongResult;
        PublicGroupAlreadyExists;
        Throttled;
        InternalError;
        NotAuthorized;
    };

type JoinGroupArgs =
    record {
        chat_id: GroupChatId;
    };

type JoinGroupResponse =
    variant {
        Success;
        AlreadyInGroup;
        GroupNotFound;
        GroupNotPublic;
        Blocked;
        NotAuthorized;
        InternalError: text;
    };

type GroupChatUpdatesSince =
    record {
        chat_id: GroupChatId;
        updates_since: TimestampMillis;
    };

type UpdatesSince =
    record {
        timestamp: TimestampMillis;
        group_chats: vec GroupChatUpdatesSince;
    };

type UpdatesArgs = 
    record {
        updates_since: opt UpdatesSince;
    };

type UpdatesResponse =
    variant {
        Success: record {
            timestamp: TimestampMillis;
            chats_added: vec ChatSummary;
            chats_updated: vec ChatSummaryUpdates;
            chats_removed: vec ChatId;
        }
    };

type EventsSuccessResult =
    record {
        events: vec DirectChatEventWrapper;
        latest_event_index: EventIndex;
    };

type EventsArgs =
    record {
        user_id: UserId;
        from_index: EventIndex;
        to_index: EventIndex;
    };

type EventsResponse =
    variant {
        Success: EventsSuccessResult;
        ChatNotFound;
        NotAuthorized;
    };

type EventsByIndexArgs =
    record {
        user_id: UserId;
        events: vec EventIndex;
    };

type EventsByIndexResponse =
    variant {
        Success: EventsSuccessResult;
        ChatNotFound;
    }; 

type SearchAllMessagesArgs =
    record {
        search_term: text;
        max_results: nat8;
    };

type SearchAllMessagesResponse =
    variant {
        Success: record {
            matches: vec record {
                is_direct: bool;
                chat: CanisterId;
                message: DirectMessage;
            };
        };
        Failure;
    }; 

type ChunkArgs =
    record {
        blob_id: nat;
        index: nat32;
    };

type ChunkResponse =
    variant {
        Success: record {
            bytes: vec nat8;
        };
        NotFound;
    };

type MetricsArgs =
    record {
    };

type MetricsResponse = 
    record {
        direct_chat_count: nat32;
        group_chat_count: nat32;
        text_message_count: nat64;
        image_message_count: nat64;
        video_message_count: nat64;
        file_message_count: nat64;
        cycles_message_count: nat64;
        cycles_balance: int64;
        bytes_used: nat64;
        blob_bytes_used: nat64;
        chunk_count: nat32;
        timestamp: TimestampMillis;
        caller_id: principal;
        wasm_memory_used: nat64;
    };

type InitArgs = 
    record {
        owner: principal;
        notification_canister_ids: vec CanisterId;
    };

service: (InitArgs) -> {
    send_message: (SendMessageArgs) -> (SendMessageResponse);
    mark_read: (MarkReadArgs) -> (MarkReadResponse);
    set_avatar: (SetAvatarArgs) -> (SetAvatarResponse);
    block_user: (BlockUserArgs) -> ();
    unblock_user: (UnblockUserArgs) -> ();
    put_chunk: (PutChunkArgs) -> (PutChunkResponse);
    create_group: (CreateGroupArgs) -> (CreateGroupResponse);
    join_group: (JoinGroupArgs) -> (JoinGroupResponse);
    
    events: (EventsArgs) -> (EventsResponse) query;
    events_by_index: (EventsByIndexArgs) -> (EventsByIndexResponse) query;
    updates: (UpdatesArgs) -> (UpdatesResponse) query;

    // Use ICQC to search all group chats too - use Tantivy. How to resolve filter/sort/page across multiple groups?
    search_all_messages: (SearchAllMessagesArgs) -> (SearchAllMessagesResponse) query;
    chunk: (ChunkArgs) -> (ChunkResponse) query;
    metrics: (MetricsArgs) -> (MetricsResponse) query;
}