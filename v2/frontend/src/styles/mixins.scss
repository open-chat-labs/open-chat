$breakpoints: (
    xxs: 354px,
    xs: 576px,
    sm: 768px,
    md: 992px,
    lg: 1200px,
);

$font-weights: (
    light: 200,
    book: 400,
    medium: 500,
    mediumBold: 600,
    bold: 700,
);

// =============================================
// FONT-SIZES
// =============================================

// Usage: @include font-size(fs-100);
// The purpose of the key-numbers is to have them ordered relative to their font-size.
// The key-numbers are not related in any other way to the font-size or line-height.
$font-sizes: (
    fs-50: (
        font-size: 11px,
        line-height: 130%,
    ),
    fs-60: (
        font-size: 12px,
        line-height: 135%,
    ),
    fs-70: (
        font-size: 13px,
        line-height: 140%,
    ),
    fs-80: (
        font-size: 14px,
        line-height: 140%,
    ),
    fs-90: (
        font-size: 15px,
        line-height: 145%,
    ),
    fs-100: (
        font-size: 16px,
        line-height: 150%,
    ),
    fs-110: (
        font-size: 18px,
        line-height: 130%,
    ),
    fs-120: (
        font-size: 20px,
        line-height: 120%,
    ),
    fs-140: (
        font-size: 24px,
        line-height: 120%,
    ),
    fs-160: (
        font-size: 28px,
        line-height: 120%,
    ),
    fs-180: (
        font-size: 32px,
        line-height: 120%,
    ),
    fs-220: (
        font-size: 40px,
        line-height: 120%,
    ),
    fs-230: (
        font-size: 48px,
        line-height: 105%,
    ),
    fs-240: (
        font-size: 60px,
        line-height: 120%,
    ),
    fs-260: (
        font-size: 80px,
        line-height: 120%,
    ),
);

// =========================================================
// SPACING
// =========================================================

$sp1: 2px;
$sp2: 4px;
$sp3: 8px;
$sp4: 16px;
$sp5: 24px;
$sp6: 32px;
$sp7: 48px;
$sp8: 64px;
$sp9: 96px;
$sp10: 144px;
$sp11: 192px;

@mixin fullScreenImg($img) {
    background: linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.5)), url($img);
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
}

@mixin ellipsis($width: auto) {
    width: $width;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin fullHeight() {
    height: 100vh;
    height: calc(var(--vh, 1vh) * 100);
}

/* Media query stuff */

@mixin size-above($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $breakpoint-value: map-get($breakpoints, $breakpoint);
        @media (min-width: $breakpoint-value) {
            @content;
        }
    } @else {
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}

@mixin size-below($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $breakpoint-value: map-get($breakpoints, $breakpoint);
        @media (max-width: ($breakpoint-value - 1)) {
            @content;
        }
    } @else {
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}

@mixin spin() {
    animation: loading-spinner 0.8s linear infinite;
}

@mixin loading-spinner(
    $size: 1.2em,
    $offset: 0.6em,
    $block: false,
    $spinner-color: #191919,
    $background-color: #efefef
) {
    position: relative;

    &::after {
        content: "";
        display: block;
        width: $size;
        height: $size;
        position: absolute;
        // border: 3px solid;
        opacity: 0.5;
        background-image: url("../assets/spinner.svg");
        left: calc(50% - #{$offset});
        top: calc(50% - #{$offset});
        // border-color: transparent transparent currentColor currentColor;
        // border-radius: 50%;
        transform-origin: 50% 50%;
        @include spin();
        color: $spinner-color;
        z-index: 10;
    }

    @if $block {
        &::before {
            content: "";
            position: absolute;
            top: 0;
            height: 100%;
            width: 100%;
            pointer-events: none;
            background-color: $background-color;
            z-index: 9;
            opacity: 0.4;
        }
    }
}

@keyframes loading-spinner {
    to {
        transform: rotate(360deg);
    }
}

/* z-index stuff */

/* 
    Add items to this map in the order that they need to stack in the UI 
    then apply z-index using the z-index mixin and the real z-indexes will 
    be sorted out magically
*/
$z-indexed-items: (
    "global": (
        "login",
        "bubble-stem",
        "left-panel",
        "current-user",
        "right-panel",
        "date-label",
        "section-header",
        "fab",
        "footer-overlay",
        "overlay",
        "toast",
        "popup-menu",
    ),
);

$z-index-map: ();

@each $group-name, $group-list in $z-indexed-items {
    $counter: 1;
    $group-map: ();
    @each $item in $group-list {
        $group-map: map-merge(
            $group-map,
            (
                $item: $counter,
            )
        );
        $counter: $counter + 1;
    }
    $z-index-map: map-merge(
        $z-index-map,
        (
            $group-name: $group-map,
        )
    );
}

@mixin z-index($key, $group: "global") {
    @if map-has-key($z-index-map, $group) {
        @if map-has-key(map-get($z-index-map, $group), $key) {
            z-index: map-get(map-get($z-index-map, $group), $key);
        } @else {
            @error ('@include z-index() expects $key to be found in map z-indexed-items #{$group}, given `#{$key}`');
        }
    } @else {
        @error ('@include z-index() expects $group to be found in map z-indexed-items, given `#{$group}`');
    }
}

$shadow-level-1: 0 2px 5px 0 rgba(25, 25, 25, 0.3);
$shadow-level-2: 0 2px 10px 0 rgba(25, 25, 25, 0.3);
$shadow-level-3: 2px 6px 12px 0 rgba(25, 25, 25, 0.55);

@mixin box-shadow($level) {
    @if $level == 1 {
        box-shadow: $shadow-level-1;
    } @else if $level == 2 {
        box-shadow: $shadow-level-2;
    } @else if $level == 3 {
        box-shadow: $shadow-level-3;
    } @else {
        @error ('box-shadow $level does not exist!');
    }
}

@mixin font-size($type: fs-100) {
    // Generating mixins below: Do not change
    $type: map-get($font-sizes, $type);

    // LINE-HEIGHTS
    @if map-has-key($type, line-height) {
        line-height: map-get($type, line-height);
        @include size-below(sm) {
            line-height: calc(#{map-get($type, line-height)} * 0.95);
        }
        @include size-below(xs) {
            line-height: calc(#{map-get($type, line-height)} * 0.9);
        }
    }

    // FONT-SIZES
    @if map-has-key($type, font-size) {
        font-size: map-get($type, font-size);
        @include size-below(sm) {
            font-size: calc(#{map-get($type, font-size)} * 0.95);
        }
        @include size-below(xs) {
            font-size: calc(#{map-get($type, font-size)} * 0.9);
        }
    }
}

@mixin font($weight: book, $style: null, $size: null) {
    // Error handling
    @if map-has-key($font-weights, $weight) {
        font-weight: map-get($font-weights, $weight);
    } @else {
        @error ('@include font() expects $weight to be found in map font, given `#{$weight}`');
    }

    @if $style {
        font-style: $style;
    }

    @if $size {
        @include font-size($size);
    }
}

@mixin nice-scrollbar() {
    &::-webkit-scrollbar {
        background-color: transparent;
        width: 5px;
    }

    &::-webkit-scrollbar-track {
        background-color: transparent;
    }

    &::-webkit-scrollbar-thumb {
        // background-color: rgba(34, 167, 242, 0.4);
        background-color: var(--scrollbar-bg);
        border-radius: 2px;
    }

    overflow-y: overlay;
    scrollbar-color: var(--scrollbar-bg) transparent;
    scrollbar-width: thin;
}
