// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

/**
 * Generic ID on Internet Computer.
 *
 * Principals are generic identifiers for canisters, users
 * and possibly other concepts in the future.
 * As far as most uses of the IC are concerned they are
 * opaque binary blobs with a length between 0 and 29 bytes,
 * and there is intentionally no mechanism to tell canister ids and user ids apart.
 *
 * Note a principal is not necessarily tied with a public key-pair,
 * yet we need at least a key-pair of a related principal to sign
 * requests.
 *
 * A Principal can be serialized to a byte array ([`Vec<u8>`]) or a text
 * representation, but the inner structure of the byte representation
 * is kept private.
 *
 * Example of using a Principal object:
 * ```
 * # #[cfg(feature = "convert")] {
 * use ic_principal::Principal;
 *
 * let text = "aaaaa-aa";  // The management canister ID.
 * let principal = Principal::from_text(text).expect("Could not decode the principal.");
 * assert_eq!(principal.as_slice(), &[]);
 * assert_eq!(principal.to_text(), text);
 *
 * # }
 * ```
 *
 * Serialization is enabled with the "serde" feature. It supports serializing
 * to a byte bufer for non-human readable serializer, and a string version for human
 * readable serializers.
 *
 * ```
 * # #[cfg(all(feature = "convert", feature = "serde"))] {
 * use ic_principal::Principal;
 * use serde::{Deserialize, Serialize};
 * use std::str::FromStr;
 *
 * #[derive(Serialize)]
 * struct Data {
 *     id: Principal,
 * }
 *
 * let id = Principal::from_str("2chl6-4hpzw-vqaaa-aaaaa-c").unwrap();
 *
 * // JSON is human readable, so this will serialize to a textual
 * // representation of the Principal.
 * assert_eq!(
 *     serde_json::to_string(&Data { id: id.clone() }).unwrap(),
 *     r#"{"id":"2chl6-4hpzw-vqaaa-aaaaa-c"}"#
 * );
 *
 * // CBOR is not human readable, so will serialize to bytes.
 * assert_eq!(
 *     serde_cbor::to_vec(&Data { id: id.clone() }).unwrap(),
 *     &[161, 98, 105, 100, 73, 239, 205, 171, 0, 0, 0, 0, 0, 1],
 * );
 * # }
 * ```
 */
export type Principal = string;
