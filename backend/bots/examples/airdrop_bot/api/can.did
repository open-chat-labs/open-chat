type CanisterId = principal;
type Cycles = nat;

type InitializeBotArgs = record {
    username : text;
};

type InitializeBotResponse = variant {
    Success;
    EndDateInPast;
    AlreadyRegistered;
    UserLimitReached;
    UsernameTaken;
    UsernameInvalid;
    UsernameTooShort : nat16;
    UsernameTooLong : nat16;
    InsufficientCyclesProvided : Cycles;
    InternalError : text;
};

type Document = record {
    id : nat;
    mime_type : text;
    data : blob;
};

type FieldTooLongResult = record {
    length_provided : nat32;
    max_length : nat32;
};

type SetAvatarArgs = record {
    avatar : opt Document;
};

type SetAvatarResponse = variant {
    Success;
    AvatarTooBig : FieldTooLongResult;
};

type SetAirdropArgs = record {
    community_id : CommunityId;
    channel_id : ChannelId;
    start : TimestampMillis;
    main_chat_fund : u128;
    main_chit_band : u32;
    lottery_prizes : Vec<u128>;
    lottery_chit_band : u32;
};

type SetAirdropResponse = variant {
    Success;
    ChannelUsed;
    InThePast;
    ClashesWithPrevious;
};

type InitArgs = record {
    user_index_canister_id : CanisterId;
    local_user_index_canister_id : CanisterId;
    ck_btc_ledger_canister_id : CanisterId;
    admins : vec principal;
    wasm_version : BuildVersion;
    test_mode : bool;
};

type BuildVersion = record {
    major : nat32;
    minor : nat32;
    patch : nat32;
};

service : (InitArgs) -> {
    initialize_bot : (InitializeBotArgs) -> (InitializeBotResponse);
    set_airdrop : (SetAirdropArgs) -> (SetAirdropResponse);
    set_avatar : (SetAvatarArgs) -> (SetAvatarResponse);
};
