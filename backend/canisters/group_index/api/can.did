import "../../../libraries/types/can.did";

type SearchArgs =
    record {
        search_term: text;
        max_results: nat8;
    };

type SearchResponse =
    variant {
        Success: SearchSuccessResult;
        TermTooShort: nat8;
        TermTooLong: nat8;
        InvalidTerm;
    };

type SearchSuccessResult =
    record {
        matches: vec GroupMatch;
    };

type GroupMatch =
    record {
        chat_id: ChatId;
        name: text;
        description: text;
        avatar_id: opt nat;
    };

type FreezeGroupArgs =
    record {
        chat_id: ChatId;
        reason: opt text;
    };

type FreezeGroupResponse =
    variant {
        Success: record {
            index: EventIndex;
            timestamp: TimestampMillis;
            correlation_id: nat64;
            event: ChatFrozen;
        };
        ChatAlreadyFrozen;
        ChatNotFound;
        NotAuthorized;
        InternalError: text;
    };

type UnfreezeGroupArgs =
    record {
        chat_id: ChatId;
    };

type UnfreezeGroupResponse =
    variant {
        Success: record {
            index: EventIndex;
            timestamp: TimestampMillis;
            correlation_id: nat64;
            event: ChatUnfrozen;
        };
        ChatNotFrozen;
        ChatNotFound;
        NotAuthorized;
        InternalError: text;
    };

service: {
    search: (SearchArgs) -> (SearchResponse) query;
    freeze_group: (FreezeGroupArgs) -> (FreezeGroupResponse);
    unfreeze_group: (UnfreezeGroupArgs) -> (UnfreezeGroupResponse);
}
