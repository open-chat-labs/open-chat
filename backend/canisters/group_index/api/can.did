import "../../../libraries/types/can.did";

type FilterGroupsArgs =
    record {
        chat_ids: vec ChatId;
        active_since: opt TimestampMillis;
    };

type FilterGroupsResponse =
    variant {
        Success: record {
            timestamp: TimestampMillis;
            active_groups: vec ChatId;
            deleted_groups: vec DeletedGroupInfo;
            upgrades_in_progress: vec ChatId;
        };
    };

type RecommendedGroupsArgs =
    record {
        count: nat8;
        exclusions: vec ChatId;
    };

type RecommendedGroupsResponse =
    variant {
        Success: record {
            groups: vec PublicGroupSummary;
        }
    };

type DeletedGroupInfo =
    record {
        id: ChatId;
        timestamp: TimestampMillis;
        deleted_by: UserId;
        group_name: text;
        public: bool;
    };

type SearchArgs =
    record {
        search_term: text;
        max_results: nat8;
    };

type SearchResponse =
    variant {
        Success: SearchSuccessResult;
        TermTooShort: nat8;
        TermTooLong: nat8;
        InvalidTerm;
    };

type SearchSuccessResult =
    record {
        matches: vec GroupMatch;
    };

type GroupMatch =
    record {
        chat_id: ChatId;
        name: text;
        description: text;
        avatar_id: opt nat;
    };

type FreezeGroupArgs =
    record {
        chat_id: ChatId;
        reason: opt text;
    };

type FreezeGroupResponse =
    variant {
        Success: record {
            index: EventIndex;
            timestamp: TimestampMillis;
            correlation_id: nat64;
            event: ChatFrozen;
        };
        ChatAlreadyFrozen;
        ChatNotFound;
        NotAuthorized;
        InternalError: text;
    };

type UnfreezeGroupArgs =
    record {
        chat_id: ChatId;
    };

type UnfreezeGroupResponse =
    variant {
        Success: record {
            index: EventIndex;
            timestamp: TimestampMillis;
            correlation_id: nat64;
            event: ChatUnfrozen;
        };
        ChatNotFrozen;
        ChatNotFound;
        NotAuthorized;
        InternalError: text;
    };

type DeleteFrozenGroupArgs =
    record {
        chat_id: ChatId;
    };

type DeleteFrozenGroupResponse =
    variant {
        Success;
        ChatNotFrozen;
        ChatNotFrozenLongEnough: TimestampMillis;
        ChatNotFound;
        NotAuthorized;
        InternalError: text;
    };

service: {
    filter_groups: (FilterGroupsArgs) -> (FilterGroupsResponse) query;
    recommended_groups: (RecommendedGroupsArgs) -> (RecommendedGroupsResponse) query;
    search: (SearchArgs) -> (SearchResponse) query;
    freeze_group: (FreezeGroupArgs) -> (FreezeGroupResponse);
    unfreeze_group: (UnfreezeGroupArgs) -> (UnfreezeGroupResponse);
    delete_frozen_group: (DeleteFrozenGroupArgs) -> (DeleteFrozenGroupResponse);
}
