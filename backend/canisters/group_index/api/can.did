import "../../../libraries/types/can.did";

type ActiveGroupsArgs = record {
    group_ids : vec ChatId;
    community_ids : vec CommunityId;
    active_since : opt TimestampMillis;
};

type ActiveGroupsResponse = variant {
    Success : record {
        timestamp : TimestampMillis;
        active_groups : vec ChatId;
        active_communities : vec CommunityId;
        deleted_groups : vec DeletedGroupInfo;
        deleted_communities : vec DeletedCommunityInfo;
    };
};

type FilterGroupsArgs = record {
    chat_ids : vec ChatId;
    active_since : opt TimestampMillis;
};

type FilterGroupsResponse = variant {
    Success : record {
        timestamp : TimestampMillis;
        active_groups : vec ChatId;
        deleted_groups : vec DeletedGroupInfo;
        upgrades_in_progress : vec ChatId;
    };
};

type RecommendedGroupsArgs = record {
    count : nat8;
    exclusions : vec ChatId;
};

type RecommendedGroupsResponse = variant {
    Success : record {
        groups : vec PublicGroupSummary;
    };
};

type DeletedCommunityInfo = record {
    id : CommunityId;
    timestamp : TimestampMillis;
    deleted_by : UserId;
    name : text;
    public : bool;
};

type DeletedGroupInfo = record {
    id : ChatId;
    timestamp : TimestampMillis;
    deleted_by : UserId;
    group_name : text;
    name : text;
    public : bool;
};

type SearchArgs = record {
    search_term : text;
    max_results : nat8;
};

type SearchResponse = variant {
    Success : SearchSuccessResult;
    TermTooShort : nat8;
    TermTooLong : nat8;
    InvalidTerm;
};

type SearchSuccessResult = record {
    matches : vec GroupMatch;
};

type ExploreCommunitiesArgs = record {
    search_term : opt text;
    page_index : nat32;
    page_size : nat8;
    exclude_moderation_flags : opt nat32;
};

type ExploreCommunitiesResponse = variant {
    Success : ExploreCommunitiesSuccess;
    TermTooShort : nat8;
    TermTooLong : nat8;
    InvalidTerm;
    InvalidFlags;
};

type ExploreCommunitiesSuccess = record {
    matches : vec CommunityMatch;
};

type ExploreGroupsArgs = record {
    search_term : opt text;
    page_index : nat32;
    page_size : nat8;
};

type ExploreGroupsResponse = variant {
    Success : ExploreGroupsSuccess;
    TermTooShort : nat8;
    TermTooLong : nat8;
    InvalidTerm;
};

type ExploreGroupsSuccess = record {
    matches : vec GroupMatch;
};

type FreezeCommunityArgs = record {
    community_id : ChatId;
    reason : opt text;
    suspend_members : opt record {
        duration : opt Milliseconds;
        reason : text;
    };
};

type FreezeCommunityResponse = variant {
    Success : record {
        index : EventIndex;
        timestamp : TimestampMillis;
        expires_at : opt TimestampMillis;
        correlation_id : nat64;
        event : GroupFrozen;
    };
    CommunityAlreadyFrozen;
    CommunityNotFound;
    NotAuthorized;
    InternalError : text;
};

type FreezeGroupArgs = record {
    chat_id : ChatId;
    reason : opt text;
    suspend_members : opt record {
        duration : opt Milliseconds;
        reason : text;
    };
};

type FreezeGroupResponse = variant {
    Success : record {
        index : EventIndex;
        timestamp : TimestampMillis;
        expires_at : opt TimestampMillis;
        correlation_id : nat64;
        event : GroupFrozen;
    };
    ChatAlreadyFrozen;
    ChatNotFound;
    NotAuthorized;
    InternalError : text;
};

type UnfreezeCommunityArgs = record {
    community_id : ChatId;
};

type UnfreezeCommunityResponse = variant {
    Success : record {
        index : EventIndex;
        timestamp : TimestampMillis;
        expires_at : opt TimestampMillis;
        correlation_id : nat64;
        event : GroupUnfrozen;
    };
    CommunityNotFrozen;
    CommunityNotFound;
    NotAuthorized;
    InternalError : text;
};

type UnfreezeGroupArgs = record {
    chat_id : ChatId;
};

type UnfreezeGroupResponse = variant {
    Success : record {
        index : EventIndex;
        timestamp : TimestampMillis;
        expires_at : opt TimestampMillis;
        correlation_id : nat64;
        event : GroupUnfrozen;
    };
    ChatNotFrozen;
    ChatNotFound;
    NotAuthorized;
    InternalError : text;
};

type DeleteFrozenGroupArgs = record {
    chat_id : ChatId;
};

type DeleteFrozenGroupResponse = variant {
    Success;
    ChatNotFrozen;
    ChatNotFound;
    NotAuthorized;
    InternalError : text;
};

type AddHotGroupExclusionArgs = record {
    chat_id : ChatId;
};

type AddHotGroupExclusionResponse = variant {
    Success;
    ChatAlreadyExcluded;
    ChatNotFound;
    NotAuthorized;
    InternalError : text;
};

type RemoveHotGroupExclusionArgs = record {
    chat_id : ChatId;
};

type RemoveHotGroupExclusionResponse = variant {
    Success;
    ChatNotExcluded;
    ChatNotFound;
    NotAuthorized;
    InternalError : text;
};

type SetCommunityModerationFlagsArgs = record {
    community_id : CommunityId;
    flags : nat32;
};

type SetCommunityModerationFlagsResponse = variant {
    Success;
    Unchanged;
    CommunityNotFound;
    InvalidFlags;
    NotAuthorized;
    InternalError : text;
};

type SetUpgradeConcurrencyArgs = record {
    value : nat32;
};

type SetUpgradeConcurrencyResponse = variant {
    Success;
    NotAuthorized;
    InternalError : text;
};

service : {
    active_groups : (ActiveGroupsArgs) -> (ActiveGroupsResponse) query;
    filter_groups : (FilterGroupsArgs) -> (FilterGroupsResponse) query;
    recommended_groups : (RecommendedGroupsArgs) -> (RecommendedGroupsResponse) query;
    search : (SearchArgs) -> (SearchResponse) query;
    explore_communities : (ExploreCommunitiesArgs) -> (ExploreCommunitiesResponse) query;
    explore_groups : (ExploreGroupsArgs) -> (ExploreGroupsResponse) query;

    // Only callable by "platform moderators"
    freeze_community : (FreezeCommunityArgs) -> (FreezeCommunityResponse);
    freeze_group : (FreezeGroupArgs) -> (FreezeGroupResponse);
    unfreeze_community : (UnfreezeCommunityArgs) -> (UnfreezeCommunityResponse);
    unfreeze_group : (UnfreezeGroupArgs) -> (UnfreezeGroupResponse);
    delete_frozen_group : (DeleteFrozenGroupArgs) -> (DeleteFrozenGroupResponse);
    add_hot_group_exclusion : (AddHotGroupExclusionArgs) -> (AddHotGroupExclusionResponse);
    remove_hot_group_exclusion : (RemoveHotGroupExclusionArgs) -> (RemoveHotGroupExclusionResponse);
    set_community_moderation_flags : (SetCommunityModerationFlagsArgs) -> (SetCommunityModerationFlagsResponse);

    // Only callable by "platform operators"
    set_group_upgrade_concurrency : (SetUpgradeConcurrencyArgs) -> (SetUpgradeConcurrencyResponse);
    set_community_upgrade_concurrency : (SetUpgradeConcurrencyArgs) -> (SetUpgradeConcurrencyResponse);
};
