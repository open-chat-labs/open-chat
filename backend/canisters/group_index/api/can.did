import "../../../libraries/types/can.did";

type ActiveGroupsArgs =
    record {
        group_ids: vec ChatId;
        community_ids: vec CommunityId;
        active_since: opt TimestampMillis;
    };

type ActiveGroupsResponse =
    variant {
        Success: record {
            timestamp: TimestampMillis;
            active_groups: vec ChatId;
            active_communities: vec CommunityId;
            deleted_groups: vec DeletedGroupInfo;
            deleted_communities: vec DeletedCommunityInfo;
        };
    };

type FilterGroupsArgs =
    record {
        chat_ids: vec ChatId;
        active_since: opt TimestampMillis;
    };

type FilterGroupsResponse =
    variant {
        Success: record {
            timestamp: TimestampMillis;
            active_groups: vec ChatId;
            deleted_groups: vec DeletedGroupInfo;
            upgrades_in_progress: vec ChatId;
        };
    };

type RecommendedGroupsArgs =
    record {
        count: nat8;
        exclusions: vec ChatId;
    };

type RecommendedGroupsResponse =
    variant {
        Success: record {
            groups: vec PublicGroupSummary;
        }
    };

type DeletedCommunityInfo =
    record {
        id: CommunityId;
        timestamp: TimestampMillis;
        deleted_by: UserId;
        name: text;
        public: bool;
    };

type DeletedGroupInfo =
    record {
        id: ChatId;
        timestamp: TimestampMillis;
        deleted_by: UserId;
        group_name: text;
        name: text;
        public: bool;
    };

type SearchArgs =
    record {
        search_term: text;
        max_results: nat8;
    };

type SearchResponse =
    variant {
        Success: SearchSuccessResult;
        TermTooShort: nat8;
        TermTooLong: nat8;
        InvalidTerm;
    };

type SearchSuccessResult =
    record {
        matches: vec GroupMatch;
    };

type SearchV2Args =
    record {
        scope: SearchScope;
        search_term: text;
        max_results: nat8;
    };

type SearchScope =
    variant {
        All;
        Communities;
        Groups;
    };

type SearchV2Response =
    variant {
        Success: SearchV2Success;
        TermTooShort: nat8;
        TermTooLong: nat8;
        InvalidTerm;
    };

type SearchV2Success =
    record {
        group_matches: vec GroupMatch;
        community_matches: vec CommunityMatch;
    };

type CommunityMatch =
    record {
        id: CommunityId;
        name: text;
        description: text;
        avatar_id: opt nat;
        banner_id: opt nat;
    };

type GroupMatch =
    record {
        chat_id: ChatId;
        name: text;
        description: text;
        avatar_id: opt nat;
    };

type FreezeGroupArgs =
    record {
        chat_id: ChatId;
        reason: opt text;
    };

type FreezeGroupResponse =
    variant {
        Success: record {
            index: EventIndex;
            timestamp: TimestampMillis;
            correlation_id: nat64;
            event: ChatFrozen;
        };
        ChatAlreadyFrozen;
        ChatNotFound;
        NotAuthorized;
        InternalError: text;
    };

type UnfreezeGroupArgs =
    record {
        chat_id: ChatId;
    };

type UnfreezeGroupResponse =
    variant {
        Success: record {
            index: EventIndex;
            timestamp: TimestampMillis;
            correlation_id: nat64;
            event: ChatUnfrozen;
        };
        ChatNotFrozen;
        ChatNotFound;
        NotAuthorized;
        InternalError: text;
    };

type DeleteFrozenGroupArgs =
    record {
        chat_id: ChatId;
    };

type DeleteFrozenGroupResponse =
    variant {
        Success;
        ChatNotFrozen;
        ChatNotFound;
        NotAuthorized;
        InternalError: text;
    };

type AddHotGroupExclusionArgs =
    record {
        chat_id: ChatId;
    };

type AddHotGroupExclusionResponse =
    variant {
        Success;
        ChatAlreadyExcluded;
        ChatNotFound;
        NotAuthorized;
        InternalError: text;
    };

type RemoveHotGroupExclusionArgs =
    record {
        chat_id: ChatId;
    };

type RemoveHotGroupExclusionResponse =
    variant {
        Success;
        ChatNotExcluded;
        ChatNotFound;
        NotAuthorized;
        InternalError: text;
    };

type SetUpgradeConcurrencyArgs =
    record {
        value: nat32;
    };

type SetUpgradeConcurrencyResponse =
    variant {
        Success;
        NotAuthorized;
        InternalError: text;
    };

service: {
    active_groups: (ActiveGroupsArgs) -> (ActiveGroupsResponse) query;
    filter_groups: (FilterGroupsArgs) -> (FilterGroupsResponse) query;
    recommended_groups: (RecommendedGroupsArgs) -> (RecommendedGroupsResponse) query;
    search: (SearchArgs) -> (SearchResponse) query;
    search_v2: (SearchV2Args) -> (SearchV2Response) query;

    // Only callable by "platform moderators"
    freeze_group: (FreezeGroupArgs) -> (FreezeGroupResponse);
    unfreeze_group: (UnfreezeGroupArgs) -> (UnfreezeGroupResponse);
    delete_frozen_group: (DeleteFrozenGroupArgs) -> (DeleteFrozenGroupResponse);
    add_hot_group_exclusion: (AddHotGroupExclusionArgs) -> (AddHotGroupExclusionResponse);
    remove_hot_group_exclusion: (RemoveHotGroupExclusionArgs) -> (RemoveHotGroupExclusionResponse);

    // Only callable by "platform operators"
    set_group_upgrade_concurrency: (SetUpgradeConcurrencyArgs) -> (SetUpgradeConcurrencyResponse);
    set_community_upgrade_concurrency: (SetUpgradeConcurrencyArgs) -> (SetUpgradeConcurrencyResponse);
}
