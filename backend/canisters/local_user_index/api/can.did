import "../../../libraries/types/can.did";

type AccessTokenArgs = record {
    token_type : AccessTokenType;
    chat : Chat;
};

type AccessTokenResponse = variant {
    Success : text;
    NotAuthorized;
    InternalError : text;
};

type ChatEventsArgs = record {
    requests : vec ChatEventsArgsInner;
};

type EventsContext = variant {
    Direct : UserId;
    Group : record { ChatId; opt MessageIndex };
    Channel : record { CommunityId; ChannelId; opt MessageIndex };
};

type ChatEventsArgsInner = record {
    context : EventsContext;
    args : variant {
        Page : record {
            start_index : EventIndex;
            ascending : bool;
            max_messages : nat32;
            max_events : nat32;
        };
        ByIndex : record {
            events : vec EventIndex;
        };
        Window : record {
            mid_point : MessageIndex;
            max_messages : nat32;
            max_events : nat32;
        };
    };
    latest_known_update : opt TimestampMillis;
};

type ChatEventsResponse = variant {
    Success : record {
        responses : vec ChatEventsResponseInner;
        timestamp : TimestampMillis;
    };
};

type ChatEventsResponseInner = variant {
    Success : EventsSuccessResult;
    NotFound;
    ReplicaNotUpToDate : TimestampMillis;
    InternalError : text;
};

type GroupAndCommunitySummaryUpdatesArgs = record {
    requests : vec SummaryUpdatesArgs;
};

type SummaryUpdatesArgs = record {
    canister_id : CanisterId;
    is_community : bool;
    invite_code : opt nat64;
    updates_since : opt TimestampMillis;
};

type GroupAndCommunitySummaryUpdatesResponse = variant {
    Success : vec SummaryUpdatesResponse;
};

type SummaryUpdatesResponse = variant {
    SuccessGroup : GroupCanisterGroupChatSummary;
    SuccessCommunity : CommunityCanisterCommunitySummary;
    SuccessGroupUpdates : GroupCanisterGroupChatSummaryUpdates;
    SuccessCommunityUpdates : CommunityCanisterCommunitySummaryUpdates;
    SuccessNoUpdates;
    NotFound;
    InternalError : text;
};

type JoinChannelArgs = record {
    community_id : CommunityId;
    channel_id : ChannelId;
    invite_code : opt nat64;
    referred_by : opt UserId;
    verified_credential_args : opt VerifiedCredentialGateArgs;
};

type JoinChannelResponse = variant {
    Success : CommunityCanisterChannelSummary;
    SuccessJoinedCommunity : CommunityCanisterCommunitySummary;
    AlreadyInChannel : CommunityCanisterChannelSummary;
    GateCheckFailed : GateCheckFailedReason;
    CommunityNotFound;
    CommunityNotPublic;
    ChannelNotFound;
    MemberLimitReached : nat32;
    UserBlocked;
    UserSuspended;
    CommunityFrozen;
    NotInvited;
    InternalError : text;
};

type JoinCommunityArgs = record {
    community_id : CommunityId;
    invite_code : opt nat64;
    referred_by : opt UserId;
    verified_credential_args : opt VerifiedCredentialGateArgs;
};

type JoinCommunityResponse = variant {
    Success : CommunityCanisterCommunitySummary;
    AlreadyInCommunity : CommunityCanisterCommunitySummary;
    GateCheckFailed : GateCheckFailedReason;
    CommunityNotFound;
    CommunityNotPublic;
    NotInvited;
    MemberLimitReached : nat32;
    UserBlocked;
    UserSuspended;
    CommunityFrozen;
    InternalError : text;
};

type JoinGroupArgs = record {
    chat_id : ChatId;
    invite_code : opt nat64;
    verified_credential_args : opt VerifiedCredentialGateArgs;
    correlation_id : nat64;
};

type JoinGroupResponse = variant {
    Success : GroupCanisterGroupChatSummary;
    AlreadyInGroupV2 : GroupCanisterGroupChatSummary;
    AlreadyInGroup;
    GateCheckFailed : GateCheckFailedReason;
    GroupNotFound;
    GroupNotPublic;
    NotInvited;
    ParticipantLimitReached : nat32;
    Blocked;
    UserSuspended;
    ChatFrozen;
    InternalError : text;
};

type InviteUsersToChannelArgs = record {
    community_id : CommunityId;
    channel_id : ChannelId;
    user_ids : vec UserId;
    caller_username : text;
};

type InviteUsersToChannelResponse = variant {
    Success;
    PartialSuccess : InviteUsersToChannelPartialSuccess;
    Failed : InviteUsersToChannelFailed;
    CommunityFrozen;
    UserNotInCommunity;
    ChannelNotFound;
    UserNotInChannel;
    NotAuthorized;
    UserSuspended;
    TooManyInvites : nat32;
    InternalError : text;
};

type InviteUsersToChannelPartialSuccess = record {
    failed_users : vec UserId;
};

type InviteUsersToChannelFailed = record {
    failed_users : vec UserId;
};

type InviteUsersToCommunityArgs = record {
    community_id : CommunityId;
    user_ids : vec UserId;
    caller_username : text;
};

type InviteUsersToCommunityResponse = variant {
    Success;
    UserNotInCommunity;
    NotAuthorized;
    CommunityFrozen;
    TooManyInvites : nat32;
    UserSuspended;
    InternalError : text;
};

type InviteUsersToGroupArgs = record {
    group_id : ChatId;
    user_ids : vec UserId;
    caller_username : text;
    correlation_id : nat64;
};

type InviteUsersToGroupResponse = variant {
    Success;
    GroupNotFound;
    CallerNotInGroup;
    NotAuthorized;
    ChatFrozen;
    TooManyInvites : nat32;
    InternalError : text;
};

type RegisterUserArgs = record {
    username : text;
    referral_code : opt text;
    public_key : blob;
};

type RegisterUserResponse = variant {
    Success : record {
        user_id : UserId;
        icp_account : AccountIdentifier;
    };
    RegistrationInProgress;
    AlreadyRegistered;
    UserLimitReached;
    UsernameInvalid;
    UsernameTooShort : nat16;
    UsernameTooLong : nat16;
    CyclesBalanceTooLow;
    InternalError : text;
    PublicKeyInvalid : text;
    ReferralCodeInvalid;
    ReferralCodeAlreadyClaimed;
    ReferralCodeExpired;
};

type ReportMessageV2Args = record {
    chat_id : MultiUserChat;
    thread_root_message_index : opt MessageIndex;
    event_index : EventIndex;
    reason_code : nat32;
    notes : opt text;
};

type ReportMessageResponse = variant {
    Success;
    InternalError : text;
};

service : {
    access_token : (AccessTokenArgs) -> (AccessTokenResponse) query;
    chat_events : (ChatEventsArgs) -> (ChatEventsResponse) query;
    group_and_community_summary_updates : (GroupAndCommunitySummaryUpdatesArgs) -> (GroupAndCommunitySummaryUpdatesResponse) query;

    join_channel : (JoinChannelArgs) -> (JoinChannelResponse);
    join_community : (JoinCommunityArgs) -> (JoinCommunityResponse);
    join_group : (JoinGroupArgs) -> (JoinGroupResponse);
    invite_users_to_channel : (InviteUsersToChannelArgs) -> (InviteUsersToChannelResponse);
    invite_users_to_community : (InviteUsersToCommunityArgs) -> (InviteUsersToCommunityResponse);
    invite_users_to_group : (InviteUsersToGroupArgs) -> (InviteUsersToGroupResponse);
    register_user : (RegisterUserArgs) -> (RegisterUserResponse);
    report_message_v2 : (ReportMessageV2Args) -> (ReportMessageResponse);
};
