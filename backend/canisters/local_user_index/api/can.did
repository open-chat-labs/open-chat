type CanisterId = principal;
type ChannelId = nat32;
type EventIndex = nat32;
type MessageId = nat64;
type MessageIndex = nat32;
type Milliseconds = nat64;
type TimestampMillis = nat64;
type UserId = CanisterId;

type BlobReference = record {
    canister_id : CanisterId;
    blob_id : nat;
};

type Document = record {
    id : nat;
    mime_type : text;
    data : blob;
};

type Rules = record {
    text : text;
    enabled : bool;
};

type PermissionRole = variant {
    None;
    Owner;
    Admins;
    Moderators;
    Members;
};

type GroupPermissions = record {
    change_roles : PermissionRole;
    remove_members : PermissionRole;
    delete_messages : PermissionRole;
    update_group : PermissionRole;
    pin_messages : PermissionRole;
    invite_users : PermissionRole;
    add_members : PermissionRole;
    react_to_messages : PermissionRole;
    mention_all_members : PermissionRole;
    start_video_call : PermissionRole;
    message_permissions : MessagePermissions;
    thread_permissions : opt MessagePermissions;
};

type MessagePermissions = record {
    default : PermissionRole;
    text : opt PermissionRole;
    image : opt PermissionRole;
    video : opt PermissionRole;
    audio : opt PermissionRole;
    file : opt PermissionRole;
    poll : opt PermissionRole;
    crypto : opt PermissionRole;
    giphy : opt PermissionRole;
    prize : opt PermissionRole;
    p2p_swap : opt PermissionRole;
    video_call : opt PermissionRole;
    custom : vec CustomPermission;
};

type CustomPermission = record {
    subtype : text;
    role : PermissionRole;
};

type AccessGateConfig = record {
    gate : AccessGate;
    expiry : opt Milliseconds;
};

type AccessGate = variant {
    DiamondMember;
    LifetimeDiamondMember;
    UniquePerson;
    VerifiedCredential : VerifiedCredentialGate;
    SnsNeuron : SnsNeuronGate;
    Payment : PaymentGate;
    TokenBalance : TokenBalanceGate;
    Composite : record {
        inner : vec AccessGateNonComposite;
        and : bool;
    };
    Locked;
    ReferredByMember;
};

type AccessGateNonComposite = variant {
    DiamondMember;
    LifetimeDiamondMember;
    UniquePerson;
    VerifiedCredential : VerifiedCredentialGate;
    SnsNeuron : SnsNeuronGate;
    Payment : PaymentGate;
    TokenBalance : TokenBalanceGate;
    Locked;
    ReferredByMember;
};

type VerifiedCredentialGate = record {
    issuer_canister_id : CanisterId;
    issuer_origin : text;
    credential_type : text;
    credential_name : text;
    credential_arguments : vec record {
        text;
        variant { String : text; Int : int32 };
    };
};

type SnsNeuronGate = record {
    governance_canister_id : CanisterId;
    min_stake_e8s : opt nat64;
    min_dissolve_delay : opt Milliseconds;
};

type PaymentGate = record {
    ledger_canister_id : CanisterId;
    amount : nat;
    fee : nat;
};

type TokenBalanceGate = record {
    ledger_canister_id : CanisterId;
    min_balance : nat;
};

type AuthToken = variant {
    Jwt : text;
    ApiKey : text;
};

type MessageContent = variant {
    Text : TextContent;
    Image : ImageContent;
    Video : VideoContent;
    Audio : AudioContent;
    File : FileContent;
    Poll : PollContent;
    Giphy : GiphyContent;
};

type TextContent = record {
    text : text;
};

type ImageContent = record {
    width : nat32;
    height : nat32;
    thumbnail_data : text;
    caption : opt text;
    mime_type : text;
    blob_reference : opt BlobReference;
};

type VideoContent = record {
    width : nat32;
    height : nat32;
    thumbnail_data : text;
    caption : opt text;
    mime_type : text;
    image_blob_reference : opt BlobReference;
    video_blob_reference : opt BlobReference;
};

type AudioContent = record {
    caption : opt text;
    mime_type : text;
    blob_reference : opt BlobReference;
};

type FileContent = record {
    name : text;
    caption : opt text;
    mime_type : text;
    file_size : nat32;
    blob_reference : opt BlobReference;
};

type PollContent = record {
    config : PollConfig;
    votes : PollVotes;
    ended : bool;
};

type PollConfig = record {
    text : opt text;
    options : vec text;
    end_date : opt TimestampMillis;
    anonymous : bool;
    show_votes_before_end_date : bool;
    allow_multiple_votes_per_user : bool;
    allow_user_to_change_vote : bool;
};

type PollVotes = record {
    total : TotalPollVotes;
    user : vec nat32;
};

type TotalPollVotes = variant {
    Visible : vec record { nat32; vec UserId };
    Anonymous : vec record { nat32; nat32 };
    Hidden : nat32;
};

type GiphyContent = record {
    caption : opt text;
    title : text;
    desktop : GiphyImageVariant;
    mobile : GiphyImageVariant;
};

type GiphyImageVariant = record {
    width : nat32;
    height : nat32;
    url : text;
    mime_type : text;
};

type BotCreateChannelArgs = record {
    is_public : bool;
    name : text;
    description : text;
    rules : Rules;
    avatar : opt Document;
    history_visible_to_new_joiners : bool;
    messages_visible_to_non_members : bool;
    permissions : opt GroupPermissions;
    events_ttl : opt Milliseconds;
    gate_config : opt AccessGateConfig;
    external_url : opt text;
    auth_token : AuthToken;
};

type BotCreateChannelResponse = variant {
    Success : record {
        channel_id : ChannelId;
    };
    InvalidRequest : text;
    FailedAuthentication : text;
    NotAuthorized;
    Frozen;
    C2CError : record {int32; text};
};

type BotDeleteChannelArgs = record {
    channel_id : ChannelId;
    auth_token : AuthToken;
};

type BotDeleteChannelResponse = variant {
    Success;
    FailedAuthentication : text;
    NotAuthorized;
    InvalidRequest : text;
    ChannelNotFound;
    Frozen;
    C2CError : record {int32; text};
};

type BotSendMessageArgs = record {
    channel_id : opt ChannelId;
    message_id : opt MessageId;
    content : MessageContent;
    block_level_markdown : bool;
    finalised : bool;
    auth_token: AuthToken;
};

type BotSendMessageResponse = variant {
    Success : record {
        message_id : MessageId;
        event_index : EventIndex;
        message_index : MessageIndex;
        timestamp : TimestampMillis;
        expires_at : opt TimestampMillis;
    };
    InvalidRequest : text;
    FailedAuthentication : text;
    NotAuthorized;
    Frozen;
    ThreadNotFound;
    MessageAlreadyFinalised;
    C2CError : record {int32; text};
};

service : {
    bot_create_channel : (BotCreateChannelArgs) -> (BotCreateChannelResponse);
    bot_delete_channel : (BotDeleteChannelArgs) -> (BotDeleteChannelResponse);
    bot_send_message : (BotSendMessageArgs) -> (BotSendMessageResponse);
};
