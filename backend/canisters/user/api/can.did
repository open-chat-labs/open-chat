import "../../../libraries/types/can.did";

type SendMessageArgs =
    record {
        recipient: UserId;
        sender_name: text;
        message_id: MessageId;
        content: MessageContent;
        replies_to: opt ReplyContext;
        forwarding: bool;
    };

type SendMessageResponse =
    variant {
        Success: record {
            chat_id: ChatId;
            event_index: EventIndex;
            message_index: MessageIndex;
            timestamp: TimestampMillis;
        };
        TransferSuccess: record {
            chat_id: ChatId;
            event_index: EventIndex;
            message_index: MessageIndex;
            timestamp: TimestampMillis;
            transfer: CompletedCryptoTransaction;
        };
        TransferSuccessV2: record {
            chat_id: ChatId;
            event_index: EventIndex;
            message_index: MessageIndex;
            timestamp: TimestampMillis;
            transfer: CompletedCryptocurrencyTransfer;
        };
        MessageEmpty;
        TextTooLong: nat32;
        RecipientBlocked;
        InvalidPoll: InvalidPollReason;
        InvalidRequest: text;
        TransferFailed: text;
        TransferCannotBeZero;
        TransferLimitExceeded: nat64;
    };

type EditMessageArgs =
    record {
        user_id: UserId;
        message_id: MessageId;
        content: MessageContent;
    };

type EditMessageResponse =
    variant {
        Success;
        MessageNotFound;
        ChatNotFound;
        UserBlocked;
    };

type DeleteMessagesArgs =
    record {
        user_id: UserId;
        message_ids: vec MessageId;
    };

type DeleteMessagesResponse =
    variant {
        Success;
        ChatNotFound;
    };

type RegisterPollVoteArgs =
    record {
        user_id: UserId;
        message_index: MessageIndex;
        poll_option: nat32;
        operation: VoteOperation;
    };

type RegisterPollVoteResponse =
    variant {
        Success: PollVotes;
        PollNotFound;
        PollEnded;
        OptionIndexOutOfRange;
        ChatNotFound;
    };

type ToggleReactionArgs =
    record {
        user_id: UserId;
        message_id: MessageId;
        reaction: text;
    };

type ToggleReactionResponse =
    variant {
        Added: EventIndex;
        Removed: EventIndex;
        InvalidReaction;
        MessageNotFound;
        ChatNotFound;
    };

type MarkReadArgs =
    record {
        messages_read: vec ChatMessagesRead;
    };

type ChatMessagesRead =
    record {
        chat_id: ChatId;
        message_ranges: vec MessageIndexRange;
    };

type MarkReadResponse =
    variant {
        Success;
    };

type BlockUserArgs =
    record {
        user_id: UserId;
    };

type BlockUserResponse =
    variant {
        Success;
    };

type UnblockUserArgs =
    record {
        user_id: UserId;
    };

type UnblockUserResponse =
    variant {
        Success;
    };

type CreateGroupArgs =
    record {
        is_public: bool;
        name: text;
        description: text;
        avatar: opt Avatar;
        history_visible_to_new_joiners: bool;
        permissions: opt GroupPermissions;
    };

type CreateGroupSuccessResult =
    record {
        chat_id: ChatId;
    };

type CreateGroupResponse =
    variant {
        Success: CreateGroupSuccessResult;
        NameTooShort: FieldTooShortResult;
        NameTooLong: FieldTooLongResult;
        DescriptionTooLong: FieldTooLongResult;
        AvatarTooBig: FieldTooLongResult;
        MaxGroupsCreated: nat32;
        NameTaken;
        Throttled;
        InternalError;
    };

type JoinGroupArgs =
    record {
        chat_id: ChatId;
        as_super_admin: bool;
        invite_code: opt nat64;
    };

type JoinGroupResponse =
    variant {
        Success: GroupChatSummary;
        AlreadyInGroup;
        Blocked;
        GroupNotFound;
        GroupNotPublic;
        ParticipantLimitReached: nat32;
        InternalError: text;
        NotSuperAdmin;
    };

type LeaveGroupArgs =
    record {
        chat_id: ChatId;
    };

type LeaveGroupResponse =
    variant {
        Success;
        GroupNotFound;
        GroupNotPublic;
        InternalError: text;
        CallerNotInGroup;
        OwnerCannotLeave;
    };

type DeleteGroupArgs =
    record {
        chat_id: ChatId;
    };

type DeleteGroupResponse =
    variant {
        Success;
        NotAuthorized;
        InternalError: text;
    };

type SetAvatarArgs =
    record {
        avatar: opt Avatar
    };

type SetAvatarResponse =
    variant {
        Success;
        AvatarTooBig: FieldTooLongResult;
    };

type MuteNotificationsArgs =
    record {
        chat_id: ChatId;
    };

type MuteNotificationsResponse =
    variant {
        Success;
        ChatNotFound;
    };

type UnmuteNotificationsArgs =
    record {
        chat_id: ChatId;
    };

type UnmuteNotificationsResponse =
    variant {
        Success;
        ChatNotFound;
    };

type AssumeGroupSuperAdminArgs =
    record {
        chat_id: ChatId;
    };

type AssumeGroupSuperAdminResponse =
    variant {
        Success;
        CallerNotInGroup;
        NotSuperAdmin;
        AlreadyOwner;
        AlreadySuperAdmin;
        InternalError: text;
    };

type RelinquishGroupSuperAdminArgs =
    record {
        chat_id: ChatId;
    };

type RelinquishGroupSuperAdminResponse =
    variant {
        Success;
        CallerNotInGroup;
        NotSuperAdmin;
        InternalError: text;
    };

type AddRecommendedGroupExclusionsArgs =
    record {
        groups: vec ChatId;
        duration: opt Milliseconds;
    };

type AddRecommendedGroupExclusionsResponse =
    variant {
        Success;
    };

type SetBioArgs =
    record {
        text: text;
    };

type SetBioResponse =
    variant {
        Success;
        TooLong: FieldTooLongResult;
    };

type TransferCryptocurrencyWithinGroupArgs =
    record {
        message_id: MessageId;
        group_id: ChatId;
        recipient: UserId;
        content: CryptocurrencyContentV2;
        sender_name: text;
        replies_to: opt GroupReplyContext;
        mentioned: vec User;
    };

type TransferCryptocurrencyWithinGroupResponse =
    variant {
        Success: record {
            event_index: EventIndex;
            message_index: MessageIndex;
            timestamp: TimestampMillis;
            transfer: CompletedCryptocurrencyTransfer;
        };
        TextTooLong: nat32;
        RecipientBlocked;
        CallerNotInGroup: opt CompletedCryptocurrencyTransfer;
        CryptocurrencyNotSupported: Cryptocurrency;
        InvalidRequest: text;
        TransferFailed: text;
        TransferCannotBeZero;
        TransferLimitExceeded: nat64;
        InternalError: record { text; CompletedCryptocurrencyTransfer; };
    };

type TransferCryptoWithinGroupArgs =
    record {
        message_id: MessageId;
        group_id: ChatId;
        recipient: UserId;
        content: CryptocurrencyContent;
        sender_name: text;
        replies_to: opt GroupReplyContext;
        mentioned: vec User;
    };

type TransferCryptoWithinGroupResponse =
    variant {
        Success: record {
            event_index: EventIndex;
            message_index: MessageIndex;
            timestamp: TimestampMillis;
            transfer: CompletedCryptoTransaction;
        };
        TextTooLong: nat32;
        RecipientBlocked;
        CallerNotInGroup: opt CompletedCryptoTransaction;
        CryptocurrencyNotSupported: Cryptocurrency;
        InvalidRequest: text;
        TransferFailed: text;
        TransferCannotBeZero;
        TransferLimitExceeded: Tokens;
        InternalError: record { text; CompletedCryptoTransaction; };
    };

type WithdrawCryptocurrencyRequest =
    record {
        withdrawal: PendingCryptocurrencyWithdrawal;
    };

type WithdrawCryptocurrencyResponse =
    variant {
        Success: CompletedCryptocurrencyWithdrawal;
        TransactionFailed: FailedCryptocurrencyWithdrawal;
        CurrencyNotSupported;
    };

type WithdrawCryptoRequest =
    record {
        withdrawal: PendingCryptoTransaction;
    };

type WithdrawCryptoResponse =
    variant {
        Success: CompletedCryptoTransaction;
        TransactionFailed: FailedCryptoTransaction;
        CurrencyNotSupported;
    };

type InitialStateArgs =
    record {
    };

type InitialStateResponse =
    variant {
        Success: record {
            timestamp: TimestampMillis;
            chats: vec ChatSummary;
            blocked_users: vec UserId;
            cycles_balance: Cycles;
            upgrades_in_progress: vec ChatId;
            user_canister_wasm_version: Version;
        };
        InternalError: text;
    };

type GroupChatUpdatesSince =
    record {
        chat_id: ChatId;
        updates_since: TimestampMillis;
    };

type UpdatesSince =
    record {
        timestamp: TimestampMillis;
        group_chats: vec GroupChatUpdatesSince;
    };

type UpdatesArgs =
    record {
        updates_since: UpdatesSince;
    };

type UpdatesResponse =
    variant {
        Success: record {
            timestamp: TimestampMillis;
            chats_added: vec ChatSummary;
            chats_updated: vec ChatSummaryUpdates;
            chats_removed: vec ChatId;
            blocked_users: vec UserId;
            cycles_balance: opt Cycles;
            avatar_id: AvatarIdUpdate;
            upgrades_in_progress: vec ChatId;
            user_canister_wasm_version: opt Version;
        };
        InternalError: text;
    };

type EventsArgs =
    record {
        user_id: UserId;
        start_index: EventIndex;
        ascending: bool;
        max_events: nat32;
    };

type EventsByIndexArgs =
    record {
        user_id: UserId;
        events: vec EventIndex;
    };

type EventsRangeArgs =
    record {
        user_id: UserId;
        from_index: EventIndex;
        to_index: EventIndex;
    };

type EventsWindowArgs =
    record {
        user_id: UserId;
        mid_point: MessageIndex;
        max_events: nat32;
    };

type EventsSuccessResult =
    record {
        events: vec DirectChatEventWrapper;
        affected_events: vec DirectChatEventWrapper;
    };

type EventsResponse =
    variant {
        Success: EventsSuccessResult;
        ChatNotFound;
    };

type MessagesByMessageIndexArgs =
    record {
        user_id: UserId;
        messages: vec MessageIndex;
    };

type MessagesByMessageIndexResponse =
    variant {
        Success: record {
            messages: vec MessageEventWrapper;
            latest_event_index: EventIndex;
        };
        ChatNotFound;
    };

type RecommendedGroupsArgs =
    record {
        count: nat8;
    };

type RecommendedGroupsResponse =
    variant {
        Success: RecommendedGroupsSuccessResult;
        InternalError: text;
    };

type RecommendedGroupsSuccessResult =
    record {
        groups: vec PublicGroupSummary;
    };

type SearchMessagesArgs =
    record {
        user_id: UserId;
        search_term: text;
        max_results: nat8;
    };

type SearchMessagesResponse =
    variant {
        Success: SearchMessagesSuccessResult;
        TermTooShort: nat8;
        TermTooLong: nat8;
        InvalidTerm;
        ChatNotFound;
    };

type SearchMessagesSuccessResult =
    record {
        matches: vec MessageMatch;
    };

type SearchAllMessagesArgs =
    record {
        search_term: text;
        max_results: nat8;
    };

type SearchAllMessagesResponse =
    variant {
        Success: SearchMessagesSuccessResult;
        TermTooShort: nat8;
        TermTooLong: nat8;
        InvalidTerm;
    };

type BioArgs = record {};

type BioResponse =
    variant {
        Success: text;
    };

type PublicProfileArgs = record {};

type PublicProfileResponse =
    variant {
        Success: PublicProfile;
    };

type PublicProfile = 
    record {
        username: text;
        avatar_id: opt nat;
        bio: text;
        is_premium: bool;
        phone_is_verified: bool;
    };

service: {
    send_message: (SendMessageArgs) -> (SendMessageResponse);
    edit_message: (EditMessageArgs) -> (EditMessageResponse);
    delete_messages: (DeleteMessagesArgs) -> (DeleteMessagesResponse);
    register_poll_vote: (RegisterPollVoteArgs) -> (RegisterPollVoteResponse);
    toggle_reaction: (ToggleReactionArgs) -> (ToggleReactionResponse);
    mark_read: (MarkReadArgs) -> (MarkReadResponse);
    block_user: (BlockUserArgs) -> (BlockUserResponse);
    unblock_user: (UnblockUserArgs) -> (UnblockUserResponse);
    create_group: (CreateGroupArgs) -> (CreateGroupResponse);
    join_group_v2: (JoinGroupArgs) -> (JoinGroupResponse);
    leave_group: (LeaveGroupArgs) -> (LeaveGroupResponse);
    delete_group: (DeleteGroupArgs) -> (DeleteGroupResponse);
    set_avatar: (SetAvatarArgs) -> (SetAvatarResponse);
    mute_notifications: (MuteNotificationsArgs) -> (MuteNotificationsResponse);
    unmute_notifications: (UnmuteNotificationsArgs) -> (UnmuteNotificationsResponse);
    assume_group_super_admin: (AssumeGroupSuperAdminArgs) -> (AssumeGroupSuperAdminResponse);
    relinquish_group_super_admin: (RelinquishGroupSuperAdminArgs) -> (RelinquishGroupSuperAdminResponse);
    add_recommended_group_exclusions: (AddRecommendedGroupExclusionsArgs) -> (AddRecommendedGroupExclusionsResponse);
    set_bio: (SetBioArgs) -> (SetBioResponse);
    transfer_crypto_within_group: (TransferCryptoWithinGroupArgs) -> (TransferCryptoWithinGroupResponse);
    transfer_cryptocurrency_within_group: (TransferCryptocurrencyWithinGroupArgs) -> (TransferCryptocurrencyWithinGroupResponse);
    withdraw_crypto: (WithdrawCryptoRequest) -> (WithdrawCryptoResponse);
    withdraw_cryptocurrency: (WithdrawCryptocurrencyRequest) -> (WithdrawCryptocurrencyResponse);

    events: (EventsArgs) -> (EventsResponse) query;
    events_by_index: (EventsByIndexArgs) -> (EventsResponse) query;
    events_range: (EventsRangeArgs) -> (EventsResponse) query;
    events_window: (EventsWindowArgs) -> (EventsResponse) query;
    messages_by_message_index: (MessagesByMessageIndexArgs) -> (MessagesByMessageIndexResponse) query;

    recommended_groups: (RecommendedGroupsArgs) -> (RecommendedGroupsResponse) query;
    initial_state: (InitialStateArgs) -> (InitialStateResponse) query;
    updates: (UpdatesArgs) -> (UpdatesResponse) query;
    search_messages: (SearchMessagesArgs) -> (SearchMessagesResponse) query; // Search just the messages of one direct chat
    search_all_messages: (SearchAllMessagesArgs) -> (SearchAllMessagesResponse) query; // Uses ICQC to search all group chats too
    bio: (BioArgs) -> (BioResponse) query;
    public_profile: (PublicProfileArgs) -> (PublicProfileResponse) query;
}
