import "../../../libraries/types/can.did";

type ChallengeKey = nat32;

type CreateChallengeArgs =
    record {
    };

type CreateChallengeResponse =
    variant {
        Success: Challenge;
        Throttled;
    };

type Challenge = record {
    key: ChallengeKey;
    png_base64: text;
};

type RegisterUserArgs =
    record {
        username: text;
        challenge_attempt: ChallengeAttempt;
        referred_by: opt UserId;
    };

type ChallengeAttempt = record {
    key : ChallengeKey;
    chars : text;
};

type RegisterUserResponse =
    variant {
        Success: UserId;
        AlreadyRegistered;
        UserLimitReached;
        UsernameTaken;
        UsernameInvalid;
        UsernameTooShort: nat16;
        UsernameTooLong: nat16;
        CyclesBalanceTooLow;
        InternalError: text;
        ChallengeFailed;
    };

type SetUsernameArgs =
    record {
        username: text;
    };

type SetUsernameResponse =
    variant {
        Success;
        UsernameTaken;
        UserNotFound;
        UsernameInvalid;
        UsernameTooShort: nat16;
        UsernameTooLong: nat16;
    };

type CheckUsernameArgs =
    record {
        username: text;
    };

type CheckUsernameResponse =
    variant {
        Success;
        UsernameTaken;
        UsernameInvalid;
        UsernameTooShort: nat16;
        UsernameTooLong: nat16;
    };

type CurrentUserArgs =
    record {
    };

type CurrentUserResponse =
    variant {
        Success: record {
            user_id: UserId;
            username: text;
            canister_upgrade_status: CanisterUpgradeStatus;
            avatar_id: opt nat;
            wasm_version: Version;
            icp_account: AccountIdentifier;
            referrals: vec UserId;
            is_super_admin: bool;
            suspension_details: opt SuspensionDetails;
            is_suspected_bot: bool;
            diamond_membership_details: opt DiamondMembershipDetails;
        };
        UserNotFound;
    };

type SuspensionDetails =
    record {
        reason: text;
        action: SuspensionAction;
        suspended_by: UserId;
    };

type SuspensionAction =
    variant {
        Unsuspend: TimestampMillis;
        Delete: TimestampMillis;
    };

type UserArgs =
    record {
        user_id: opt UserId;
        username: opt text;
    };

type UserResponse =
    variant {
        Success: UserSummary;
        UserNotFound;
    };

type UsersArgs =
    record {
        user_groups: vec record {
            users: vec UserId;
            updated_since: TimestampMillis;
        };
    };

type UsersResponse =
    variant {
        Success: record {
            users: vec PartialUserSummary;
            timestamp: TimestampMillis;
        }
    };

type SearchArgs =
    record {
        search_term: text;
        max_results: nat8
    };

type SearchResponse =
    variant {
        Success: record {
            users: vec UserSummary;
            timestamp: TimestampMillis;
        }
    };

type AddPlatformModeratorArgs =
    record {
        user_id: UserId;
    };

type AddPlatformModeratorResponse =
    variant {
        Success;
        AlreadyPlatformModerator;
        InternalError: text;
    };

type RemovePlatformModeratorArgs =
    record {
        user_id: UserId;
    };

type RemovePlatformModeratorResponse =
    variant {
        Success;
        NotPlatformModerator;
        InternalError: text;
    };

type AddPlatformOperatorArgs =
    record {
        user_id: UserId;
    };

type AddPlatformOperatorResponse =
    variant {
        Success;
    };

type RemovePlatformOperatorArgs =
    record {
        user_id: UserId;
    };

type RemovePlatformOperatorResponse =
    variant {
        Success;
    };

type PlatformModeratorsArgs =
    record {
    };

type PlatformModeratorsResponse =
    variant {
        Success: record {
            users: vec UserId;
        };
    };

type PlatformOperatorsArgs =
    record {
    };

type PlatformOperatorsResponse =
    variant {
        Success: record {
            users: vec UserId;
        };
    };

type SuspectedBotsArgs =
    record {
        after: opt UserId;
        count: nat32;
    };

type SuspectedBotsResponse =
    variant {
        Success: record {
            users: vec UserId;
        };
    };

type SuspendUserArgs =
    record {
        user_id: UserId;
        duration: opt Milliseconds;
        reason: text;
    };

type SuspendUserResponse =
    variant {
        Success;
        UserAlreadySuspended;
        UserNotFound;
        InternalError: text;
    };


type UnsuspendUserArgs =
    record {
        user_id: UserId;
    };

type UnsuspendUserResponse =
    variant {
        Success;
        UserNotSuspended;
        UserNotFound;
        InternalError: text;
    };

type MarkSuspectedBotArgs =
    record {
    };

type MarkSuspectedBotResponse =
    variant {
        Success;
    };

type PayForDiamondMembershipArgs =
    record {
        duration: DiamondMembershipPlanDuration;
        token: Cryptocurrency;
        expected_price_e8s: nat64;
        recurring: bool;
    };

type PayForDiamondMembershipResponse =
    variant {
        Success: DiamondMembershipDetails;
        CannotExtend: record {
            diamond_membership_expires_at: TimestampMillis;
            can_extend_at: TimestampMillis;
        };
        CurrencyNotSupported;
        PriceMismatch;
        PaymentAlreadyInProgress;
        UserNotFound;
        InsufficientFunds: nat64; // Returns the account balance in e8s
        TransferFailed: text;
        InternalError: text;
    };

type SetUserUpgradeConcurrencyArgs =
    record {
        value: nat32;
    };

type SetUserUpgradeConcurrencyResponse =
    variant {
        Success;
    };

service: {
    create_challenge : (CreateChallengeArgs) -> (CreateChallengeResponse);

    register_user: (RegisterUserArgs) -> (RegisterUserResponse);

    // This is used to set the initial username and subsequently to change it
    set_username: (SetUsernameArgs) -> (SetUsernameResponse);

    // This is used to check whether the username already exists
    check_username: (CheckUsernameArgs) -> (CheckUsernameResponse) query;

    // Gets the user based on the caller principal. The user can be in a variety of states
    current_user: (CurrentUserArgs) -> (CurrentUserResponse) query;

    // Gets a user by id or username
    user: (UserArgs) -> (UserResponse) query;

    // Gets some users by id
    users: (UsersArgs) -> (UsersResponse) query;

    // Search for users matching some query
    search: (SearchArgs) -> (SearchResponse) query;

    // Mark the caller as a suspected bot
    mark_suspected_bot: (MarkSuspectedBotArgs) -> (MarkSuspectedBotResponse);

    pay_for_diamond_membership: (PayForDiamondMembershipArgs) -> (PayForDiamondMembershipResponse);

    // List the platform moderators/operators
    platform_moderators: (PlatformModeratorsArgs) -> (PlatformModeratorsResponse) query;
    platform_operators: (PlatformOperatorsArgs) -> (PlatformOperatorsResponse) query;

    // Only callable by SNS governance canister
    add_platform_moderator: (AddPlatformModeratorArgs) -> (AddPlatformModeratorResponse);
    add_platform_operator: (AddPlatformOperatorArgs) -> (AddPlatformOperatorResponse);
    remove_platform_moderator: (RemovePlatformModeratorArgs) -> (RemovePlatformModeratorResponse);
    remove_platform_operator: (RemovePlatformOperatorArgs) -> (RemovePlatformOperatorResponse);

    // Only callable by "platform moderators"
    suspend_user: (SuspendUserArgs) -> (SuspendUserResponse);
    unsuspend_user: (UnsuspendUserArgs) -> (UnsuspendUserResponse);
    suspected_bots: (SuspectedBotsArgs) -> (SuspectedBotsResponse) query;

    // Only callable by "platform operators"
    set_user_upgrade_concurrency: (SetUserUpgradeConcurrencyArgs) -> (SetUserUpgradeConcurrencyResponse);
}
