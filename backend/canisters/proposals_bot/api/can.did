import "../../../libraries/types/can.did";

type LookupProposalMessageArgs = record {
    governance_canister_id : CanisterId;
    proposal_id: ProposalId;
};

type LookupProposalMessageResponse = variant {
    Success : record {
        chat_id : MultiUserChat;
        message_index : MessageIndex;
        message_id : MessageId;
    };
    NotFound;
};

type StakeNeuronForSubmittingProposalsArgs = record {
    governance_canister_id : CanisterId;
    stake : nat;
};

type StakeNeuronForSubmittingProposalsResponse = variant {
    Success : SnsNeuronId;
    StakeTooLow;
    NeuronAlreadyExists : SnsNeuronId;
    TransferError : text;
    GovernanceCanisterNotSupported;
    Unauthorized;
    InternalError : text;
};

type TopUpNeuronArgs = record {
    governance_canister_id : CanisterId;
    amount : nat;
};

type TopUpNeuronResponse = variant {
    Success;
    TransferError : text;
    GovernanceCanisterNotSupported;
    Unauthorized;
    InternalError : text;
};

service : {
    lookup_proposal_message : (LookupProposalMessageArgs) -> (LookupProposalMessageResponse) query;
    stake_neuron_for_submitting_proposals : (StakeNeuronForSubmittingProposalsArgs) -> (StakeNeuronForSubmittingProposalsResponse);
    top_up_neuron : (TopUpNeuronArgs) -> (TopUpNeuronResponse);
};
