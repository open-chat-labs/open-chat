import "../../../libraries/types/can.did";

type UpdatesArgs = record {
    since : opt TimestampMillis;
};

type UpdatesResponse = variant {
    Success : record {
        last_updated : TimestampMillis;
        token_details : opt vec TokenDetails;
        nervous_system_details : vec NervousSystemSummary;
        message_filters_added : vec MessageFilterSummary;
        message_filters_removed : vec nat64;
    };
    SuccessNoUpdates;
};

type TokenDetails = record {
    ledger_canister_id : CanisterId;
    name : text;
    symbol : text;
    decimals : nat8;
    fee : nat;
    logo : text;
    info_url : text;
    how_to_buy_url : text;
    transaction_url_format : text;
    supported_standards : vec text;
    added : TimestampMillis;
    last_updated : TimestampMillis;
};

type NervousSystemSummary = record {
    root_canister_id : CanisterId;
    governance_canister_id : CanisterId;
    ledger_canister_id : CanisterId;
    index_canister_id : CanisterId;
    is_nns : bool;
    proposal_rejection_fee : nat64;
    submitting_proposals_enabled : bool;
};

type MessageFilterSummary = record {
    id : nat64;
    regex : text;
};

type AddMessageFilterArgs = record {
    regex : text;
};

type AddMessageFilterResponse = variant {
    Success : nat64;
    NotAuthorized;
    AlreadyAdded;
    InvalidRequest : text;
    InternalError : text;
};

type RemoveMessageFilterArgs = record {
    id : nat64;
};

type RemoveMessageFilterResponse = variant {
    Success;
    NotAuthorized;
    NotFound;
    InternalError : text;
};

service : {
    add_message_filter : (AddMessageFilterArgs) -> (AddMessageFilterResponse);
    remove_message_filter : (RemoveMessageFilterArgs) -> (RemoveMessageFilterResponse);
    updates : (UpdatesArgs) -> (UpdatesResponse) query;
};
