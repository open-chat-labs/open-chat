type Image = record {
    data : vec nat8;
    imageType : text;
};
type RuleId = text;
type Rule = record {
    description : text;
    id : RuleId;
};
type ProviderId = principal;
type ProviderError = variant {
    InvalidContentStatus;
    InvalidContentType;
    InvalidProvider;
    NotFound;
    ProviderAdminIsAlreadyRegistered;
    ProviderIsRegistered;
    RequiresWhitelisting;
    Unauthorized;
};
type ProviderResult = variant {
    err : ProviderError;
    ok;
};
type Level = variant {
    hard;
    normal;
    simple;
    xhard;
};
type SubscribeMessage = record { callback : func(ContentResult) -> () oneway };
type ContentStatus = variant {
    approved;
    new;
    rejected;
};
type ViolatedRules = record {
    id : RuleId;
    rejectionCount : nat;
};
type ContentResult = record {
    approvedCount : nat;
    rejectedCount : nat;
    sourceId : text;
    status : ContentStatus;
    violatedRules : vec ViolatedRules;
};
type PohChallengeStatus = variant {
    expired;
    notSubmitted;
    pending;
    rejected;
    verified;
};
type ChallengeResponse = record {
    challengeId : text;
    completedAt : opt int;
    requestedAt : opt int;
    status : PohChallengeStatus;
    submittedAt : opt int;
};
type PohVerificationResponsePlus = record {
    challenges : vec ChallengeResponse;
    completedAt : opt int;
    isFirstAssociation : bool;
    providerId : principal;
    providerUserId : text;
    rejectionReasons : vec text;
    requestedAt : opt int;
    status : PohVerificationStatus;
    submittedAt : opt int;
    token : opt text;
};
type PohVerificationStatus = variant {
    expired;
    notSubmitted;
    pending;
    rejected;
    startPoh;
    verified;
};
type SubscribePohMessage = record {
    callback : func(PohVerificationResponsePlus) -> () oneway;
};

service : {
    registerProvider : (text, text, opt Image) -> (text);
    // deregisterProvider : () -> (text);
    addRules : (vec text, opt principal) -> ();
    // getProviderRules : () -> (vec Rule) query;
    // removeRules : (vec RuleId, opt principal) -> ();
    addProviderAdmin : (principal, text, opt principal) -> (ProviderResult);
    // removeProviderAdmin : (principal, principal) -> (ProviderResult);
    submitHtmlContent : (text, text, opt text, opt Level) -> (text);
    // submitImage : (text, vec nat8, text, opt text, opt Level) -> (text);
    // submitText : (text, text, opt text, opt Level) -> (text);
    subscribe : (SubscribeMessage) -> ();
    // verifyHumanity : (text) -> (PohVerificationResponsePlus);
    // subscribePohCallback : (SubscribePohMessage) -> ();
};
