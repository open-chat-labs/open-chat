// Copied from https://github.com/dfinity/ic/blob/master/rs/rosetta-api/icrc1/ledger/ledger.did

type Subaccount = blob;
type Timestamp = nat64;
type TxIndex = nat;

type Approve = record {
  fee : opt nat;
  from : Account;
  memo : opt blob;
  created_at_time : opt Timestamp;
  amount : nat;
  expected_allowance : opt nat;
  expires_at : opt Timestamp;
  spender : Account;
};

type Account = record {
    owner : principal;
    subaccount : opt Subaccount;
};

type GetTransactionsRequest = record {
    // The index of the first tx to fetch.
    start : TxIndex;
    // The number of transactions to fetch.
    length : nat;
};

type GetTransactionsResponse = record {
    // The total number of transactions in the log.
    log_length : nat;

    // List of transaction that were available in the ledger when it processed the call.
    //
    // The transactions form a contiguous range, with the first transaction having index
    // [first_index] (see below), and the last transaction having index
    // [first_index] + len(transactions) - 1.
    //
    // The transaction range can be an arbitrary sub-range of the originally requested range.
    transactions : vec Transaction;

    // The index of the first transaction in [transactions].
    // If the transaction vector is empty, the exact value of this field is not specified.
    first_index : TxIndex;

    // Encoding of instructions for fetching archived transactions whose indices fall into the
    // requested range.
    //
    // For each entry `e` in [archived_transactions], `[e.from, e.from + len)` is a sub-range
    // of the originally requested transaction range.
    archived_transactions : vec record {
        // The index of the first archived transaction you can fetch using the [callback].
        start : TxIndex;

        // The number of transactions you can fetch using the callback.
        length : nat;

        // The function you should call to fetch the archived transactions.
        // The range of the transaction accessible using this function is given by [from]
        // and [len] fields above.
        callback : QueryArchiveFn;
    };
};

// A prefix of the transaction range specified in the [GetTransactionsRequest] request.
type TransactionRange = record {
    // A prefix of the requested transaction range.
    // The index of the first transaction is equal to [GetTransactionsRequest.from].
    //
    // Note that the number of transactions might be less than the requested
    // [GetTransactionsRequest.length] for various reasons, for example:
    //
    // 1. The query might have hit the replica with an outdated state
    //    that doesn't have the whole range yet.
    // 2. The requested range is too large to fit into a single reply.
    //
    // NOTE: the list of transactions can be empty if:
    //
    // 1. [GetTransactionsRequest.length] was zero.
    // 2. [GetTransactionsRequest.from] was larger than the last transaction known to
    //    the canister.
    transactions : vec Transaction;
};

// A function for fetching archived transaction.
type QueryArchiveFn = func (GetTransactionsRequest) -> (TransactionRange) query;

type Transaction = record {
  burn : opt Burn;
  kind : text;
  mint : opt Mint;
  approve : opt Approve;
  timestamp : Timestamp;
  transfer : opt Transfer;
};

type Burn = record {
  from : Account;
  memo : opt blob;
  created_at_time : opt Timestamp;
  amount : nat;
  spender : opt Account;
};

type Mint = record {
  to : Account;
  memo : opt blob;
  created_at_time : opt Timestamp;
  amount : nat;
};

type Transfer = record {
  to : Account;
  fee : opt nat;
  from : Account;
  memo : opt blob;
  created_at_time : opt Timestamp;
  amount : nat;
  spender : opt Account;
};

service : {
    get_transactions : (GetTransactionsRequest) -> (GetTransactionsResponse) query;
}
