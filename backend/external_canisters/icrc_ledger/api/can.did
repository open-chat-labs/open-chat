// Copied from https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-1/ICRC-1.did
// and from https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-2/ICRC-2.did

// Number of nanoseconds since the UNIX epoch in UTC timezone.
type Timestamp = nat64;

// Number of nanoseconds between two [Timestamp]s.
type Duration = nat64;

type Subaccount = blob;

type Account = record {
    owner : principal;
    subaccount : opt Subaccount;
};

type TransferArgs = record {
    from_subaccount : opt Subaccount;
    to : Account;
    amount : nat;
    fee : opt nat;
    memo : opt blob;
    created_at_time : opt Timestamp;
};

type TransferError = variant {
    BadFee : record { expected_fee : nat };
    BadBurn : record { min_burn_amount : nat };
    InsufficientFunds : record { balance : nat };
    TooOld;
    CreatedInFuture : record { ledger_time : Timestamp };
    Duplicate : record { duplicate_of : nat };
    TemporarilyUnavailable;
    GenericError : record { error_code : nat; message : text };
};

type Value = variant {
    Nat : nat;
    Int : int;
    Text : text;
    Blob : blob;
};

type ApproveArgs = record {
    from_subaccount : opt blob;
    spender : Account;
    amount : nat;
    expected_allowance : opt nat;
    expires_at : opt nat64;
    fee : opt nat;
    memo : opt blob;
    created_at_time : opt nat64;
};

type ApproveError = variant {
    BadFee : record { expected_fee : nat };
    InsufficientFunds : record { balance : nat };
    AllowanceChanged : record { current_allowance : nat };
    Expired : record { ledger_time : nat64 };
    TooOld;
    CreatedInFuture : record { ledger_time : nat64 };
    Duplicate : record { duplicate_of : nat };
    TemporarilyUnavailable;
    GenericError : record { error_code : nat; message : text };
};

type TransferFromArgs = record {
    spender_subaccount : opt blob;
    from : Account;
    to : Account;
    amount : nat;
    fee : opt nat;
    memo : opt blob;
    created_at_time : opt nat64;
};

type TransferFromError = variant {
    BadFee : record { expected_fee : nat };
    BadBurn : record { min_burn_amount : nat };
    InsufficientFunds : record { balance : nat };
    InsufficientAllowance : record { allowance : nat };
    TooOld;
    CreatedInFuture : record { ledger_time : nat64 };
    Duplicate : record { duplicate_of : nat };
    TemporarilyUnavailable;
    GenericError : record { error_code : nat; message : text };
};

service : {
    icrc1_metadata : () -> (vec record { text; Value }) query;
    icrc1_name : () -> (text) query;
    icrc1_symbol : () -> (text) query;
    icrc1_decimals : () -> (nat8) query;
    icrc1_fee : () -> (nat) query;
    icrc1_supported_standards : () -> (vec record { name : text; url : text }) query;
    icrc1_transfer : (TransferArgs) -> (variant { Ok : nat; Err : TransferError });

    icrc2_approve : (ApproveArgs) -> (variant { Ok : nat; Err : ApproveError });
    icrc2_transfer_from : (TransferFromArgs) -> (variant { Ok : nat; Err : TransferFromError });
};
