export type MessageReminderContent = { reminder_id: bigint, notes?: string, };
export type Reaction = string;
export type MessageIndex = number;
export type DiamondMembershipPlanDuration = "OneMonth" | "ThreeMonths" | "OneYear" | "Lifetime";
export type EventIndex = number;
export type SuspensionAction = { "Unsuspend": bigint } | { "Delete": bigint };
export type CommunityRole = "Owner" | "Admin" | "Member";
export type ProposalDecisionStatus = "Unspecified" | "Open" | "Rejected" | "Adopted" | "Executed" | "Failed";
export type CanisterUpgradeStatus = "InProgress" | "NotRequired";
export type OptionUpdateU128 = "NoChange" | "SetToNone" | { "SetToSome": bigint };
export type ChatMetrics = { text_messages: bigint, image_messages: bigint, video_messages: bigint, audio_messages: bigint, file_messages: bigint, polls: bigint, poll_votes: bigint, icp_messages: bigint, sns1_messages: bigint, ckbtc_messages: bigint, chat_messages: bigint, kinic_messages: bigint, deleted_messages: bigint, giphy_messages: bigint, prize_messages: bigint, prize_winner_messages: bigint, replies: bigint, edits: bigint, reactions: bigint, proposals: bigint, reported_messages: bigint, message_reminders: bigint, custom_type_messages: bigint, last_active: bigint, };
export type VideoCallType = "Broadcast" | "Default";
export type VideoCall = { message_index: MessageIndex, call_type: VideoCallType, };
export type GroupRole = "Owner" | "Admin" | "Moderator" | "Participant";
export type CustomContent = { kind: string, data: Array<number>, };
export type GroupPermissionRole = "None" | "Owner" | "Admins" | "Moderators" | "Members";
export type OptionUpdateU64 = "NoChange" | "SetToNone" | { "SetToSome": bigint };
export type GroupCanisterThreadDetails = { root_message_index: MessageIndex, latest_event: EventIndex, latest_message: MessageIndex, last_updated: bigint, };
export type Tokens = { e8s: bigint, };
export type OptionUpdateVideoCall = "NoChange" | "SetToNone" | { "SetToSome": VideoCall };
export type UserSummaryVolatile = { total_chit_earned: number, chit_balance: number, streak: number, };
export type CommunityPermissionRole = "Owners" | "Admins" | "Members";
export type ProposalRewardStatus = "Unspecified" | "AcceptVotes" | "ReadyToSettle" | "Settled";
export type CommunityPermissions = { change_roles: CommunityPermissionRole, update_details: CommunityPermissionRole, invite_users: CommunityPermissionRole, remove_members: CommunityPermissionRole, create_public_channel: CommunityPermissionRole, create_private_channel: CommunityPermissionRole, manage_user_groups: CommunityPermissionRole, };
export type Chit = { balance: number, streak: number, };
export type GiphyImageVariant = { width: number, height: number, url: string, mime_type: string, };
export type Empty = Record<string, never>;
export type ThumbnailData = string;
export type BuildVersion = { major: number, minor: number, patch: number, };
export type Cryptocurrency = "InternetComputer" | "SNS1" | "CKBTC" | "CHAT" | "KINIC" | { "Other": string };
export type MembersAddedToDefaultChannel = { count: number, };
export type CryptoAccountNNS = "Mint" | { "Account": [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number] };
export type MessageReminderCreatedContent = { reminder_id: bigint, remind_at: bigint, notes?: string, hidden: boolean, };
export type TransferFromError = { "BadFee": { expected_fee: bigint, } } | { "BadBurn": { min_burn_amount: bigint, } } | { "InsufficientFunds": { balance: bigint, } } | { "InsufficientAllowance": { allowance: bigint, } } | "TooOld" | { "CreatedInFuture": { ledger_time: bigint, } } | { "Duplicate": { duplicate_of: bigint, } } | "TemporarilyUnavailable" | { "GenericError": { error_code: bigint, message: string, } };
export type DirectChatCreated = Record<string, never>;
export type GroupInviteCodeChange = "Enabled" | "Disabled" | "Reset";
export type BotConfig = { is_oc_controlled: boolean, supports_direct_messages: boolean, can_be_added_to_groups: boolean, };
export type PrincipalTS = Uint8Array;
export type CommunityMembership = { joined: bigint, role: CommunityRole, rules_accepted: boolean, display_name?: string, };
export type VerifiedCredentialArgumentValue = { "String": string } | { "Int": number };
export type VideoCallAccessTokenArgs = { call_type: VideoCallType, };
export type P2PSwapCancelled = { token0_txn_out?: bigint, };
export type FailedCryptoTransactionNNS = { ledger: PrincipalTS, token: Cryptocurrency, amount: Tokens, fee: Tokens, from: CryptoAccountNNS, to: CryptoAccountNNS, memo: bigint, created: bigint, transaction_hash: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number], error_message: string, };
export type TextContent = { text: string, };
export type MessageId = bigint;
export type CustomPermission = { subtype: string, role: GroupPermissionRole, };
export type OptionUpdateString = "NoChange" | "SetToNone" | { "SetToSome": string };
export type DiamondMembershipStatus = "Inactive" | "Active" | "Lifetime";
export type PollConfig = { text?: string, options: Array<string>, end_date?: bigint, anonymous: boolean, show_votes_before_end_date: boolean, allow_multiple_votes_per_user: boolean, allow_user_to_change_vote: boolean, };
export type Tally = { yes: bigint, no: bigint, total: bigint, timestamp: bigint, };
export type DiamondMembershipFeesByDuration = { one_month: bigint, three_months: bigint, one_year: bigint, lifetime: bigint, };
export type UserGroupSummary = { user_group_id: number, name: string, members: number, };
export type DiamondMembershipSubscription = "Disabled" | "OneMonth" | "ThreeMonths" | "OneYear";
export type GroupIndexFreezeGroupSuspensionDetails = { duration?: bigint, reason: string, };
export type GroupIndexAddHotGroupExclusionResponse = "Success" | "ChatAlreadyExcluded" | "ChatNotFound" | "NotAuthorized" | { "InternalError": string };
export type GroupIndexMarkLocalGroupIndexFullArgs = { canister_id: PrincipalTS, full: boolean, };
export type GroupIndexMarkLocalGroupIndexFullResponse = "Success" | "LocalGroupIndexNotFound" | "NotAuthorized" | { "InternalError": string };
export type GroupIndexExploreCommunitiesArgs = { search_term?: string, languages: Array<string>, page_index: number, page_size: number, include_moderation_flags: number, };
export type GroupIndexFreezeCommunitySuspensionDetails = { duration?: bigint, reason: string, };
export type GroupIndexSetGroupUpgradeConcurrencyResponse = "Success" | "NotAuthorized" | { "InternalError": string };
export type GroupIndexSetGroupUpgradeConcurrencyArgs = { value: number, };
export type GroupIndexDeleteFrozenGroupResponse = "Success" | "ChatNotFrozen" | "ChatNotFound" | "NotAuthorized" | { "InternalError": string };
export type GroupIndexSetCommunityModerationFlagsResponse = "Success" | "Unchanged" | "CommunityNotFound" | "NotAuthorized" | "InvalidFlags" | { "InternalError": string };
export type GroupIndexRemoveHotGroupExclusionResponse = "Success" | "ChatNotExcluded" | "ChatNotFound" | "NotAuthorized" | { "InternalError": string };
export type GroupIndexExploreGroupsArgs = { search_term?: string, page_index: number, page_size: number, };
export type GroupIndexSetCommunityUpgradeConcurrencyResponse = "Success" | "NotAuthorized" | { "InternalError": string };
export type GroupIndexSetCommunityUpgradeConcurrencyArgs = { value: number, };
export type UserIndexDiamondMembershipFeesDiamondMembershipFees = { token: Cryptocurrency, one_month: bigint, three_months: bigint, one_year: bigint, lifetime: bigint, };
export type UserIndexUsersChitSuccessResult = { chit: Array<Chit>, };
export type UserIndexPublicKeyResponse = { "Success": string } | "NotInitialised";
export type UserIndexUpdateDiamondMembershipSubscriptionArgs = { pay_in_chat?: boolean, subscription?: DiamondMembershipSubscription, };
export type UserIndexUpdateDiamondMembershipSubscriptionResponse = "Success" | "NotDiamondMember" | "AlreadyLifetimeDiamondMember";
export type UserIndexSuspendUserResponse = "Success" | "UserAlreadySuspended" | "UserNotFound" | { "InternalError": string };
export type UserIndexCheckUsernameResponse = "Success" | "UsernameTaken" | "UsernameInvalid" | { "UsernameTooShort": number } | { "UsernameTooLong": number };
export type UserIndexCheckUsernameArgs = { username: string, };
export type UserIndexSetModerationFlagsArgs = { moderation_flags_enabled: number, };
export type UserIndexSetModerationFlagsResponse = "Success";
export type UserIndexSetUserUpgradeConcurrencyArgs = { value: number, };
export type UserIndexSetUserUpgradeConcurrencyResponse = "Success";
export type UserIndexReferralMetricsReferralMetrics = { users_who_referred: number, users_who_referred_paid_diamond: number, users_who_referred_unpaid_diamond: number, users_who_referred_90_percent_unpaid_diamond: number, referrals_of_paid_diamond: number, referrals_of_unpaid_diamond: number, referrals_other: number, icp_raised_by_referrals_to_paid_diamond: number, };
export type UserIndexPayForDiamondMembershipSuccessResult = { expires_at: bigint, pay_in_chat: boolean, subscription: DiamondMembershipSubscription, proof_jwt: string, };
export type UserIndexPayForDiamondMembershipResponse = { "Success": UserIndexPayForDiamondMembershipSuccessResult } | "AlreadyLifetimeDiamondMember" | "CurrencyNotSupported" | "PriceMismatch" | "PaymentAlreadyInProgress" | "UserNotFound" | { "InsufficientFunds": bigint } | { "TransferFailed": string } | { "InternalError": string };
export type UserIndexPayForDiamondMembershipArgs = { duration: DiamondMembershipPlanDuration, token: Cryptocurrency, expected_price_e8s: bigint, recurring: boolean, };
export type UserIndexSearchArgs = { search_term: string, max_results: number, };
export type UserIndexUnsuspendUserResponse = "Success" | "UserNotSuspended" | "UserNotFound" | { "InternalError": string };
export type UserIndexSubmitProofOfUniquePersonhoodResponse = "Success" | { "Invalid": string } | "UserNotFound";
export type UserIndexSubmitProofOfUniquePersonhoodArgs = { user_ii_principal: PrincipalTS, credential_jwt: string, };
export type UserIndexSetUsernameResponse = "Success" | "UsernameTaken" | "UserNotFound" | "UsernameInvalid" | { "UsernameTooShort": number } | { "UsernameTooLong": number };
export type UserIndexSetUsernameArgs = { username: string, };
export type UserIndexSetDisplayNameResponse = "Success" | "Unauthorized" | "UserNotFound" | "DisplayNameInvalid" | { "DisplayNameTooShort": number } | { "DisplayNameTooLong": number };
export type UserIndexSetDisplayNameArgs = { display_name?: string, };
export type UserIndexSetDiamondMembershipFeesResponse = "Success" | "Invalid";
export type UserIndexReportedMessagesSuccessResult = { json: string, };
export type UserIndexReportedMessagesResponse = { "Success": UserIndexReportedMessagesSuccessResult };
export type UserIndexUserRegistrationCanisterResponse = { "Success": PrincipalTS } | "NewRegistrationsClosed";
export type LocalUserIndexInviteUsersToCommunityResponse = "Success" | "UserNotInCommunity" | "NotAuthorized" | "CommunityFrozen" | { "TooManyInvites": number } | "UserSuspended" | { "InternalError": string };
export type LocalUserIndexReportMessageV2Response = "Success" | { "InternalError": string };
export type LocalUserIndexInviteUsersToGroupResponse = "Success" | "GroupNotFound" | "CallerNotInGroup" | "NotAuthorized" | "ChatFrozen" | { "TooManyInvites": number } | { "InternalError": string };
export type LocalUserIndexAccessTokenResponse = { "Success": string } | "NotAuthorized" | { "InternalError": string };
export type LocalUserIndexRegisterUserArgs = { username: string, referral_code?: string, public_key: Array<number>, };
export type LocalUserIndexChatEventsEventsByIndexArgs = { events: Array<EventIndex>, };
export type LocalUserIndexChatEventsEventsWindowArgs = { mid_point: MessageIndex, max_messages: number, max_events: number, };
export type LocalUserIndexChatEventsEventsPageArgs = { start_index: EventIndex, ascending: boolean, max_messages: number, max_events: number, };
export type LocalUserIndexChatEventsEventsArgsInner = { "Page": LocalUserIndexChatEventsEventsPageArgs } | { "ByIndex": LocalUserIndexChatEventsEventsByIndexArgs } | { "Window": LocalUserIndexChatEventsEventsWindowArgs };
export type LocalUserIndexGroupAndCommunitySummaryUpdatesSummaryUpdatesArgs = { canister_id: PrincipalTS, is_community: boolean, invite_code?: bigint, updates_since?: bigint, };
export type PaymentGate = { ledger_canister_id: PrincipalTS, amount: bigint, fee: bigint, };
export type AccountICRC1 = { owner: PrincipalTS, subaccount?: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number], };
export type CommunityMembershipUpdates = { role?: CommunityRole, rules_accepted?: boolean, display_name: OptionUpdateString, };
export type GiphyContent = { caption?: string, title: string, desktop: GiphyImageVariant, mobile: GiphyImageVariant, };
export type SnsNeuronGate = { governance_canister_id: PrincipalTS, min_stake_e8s?: bigint, min_dissolve_delay?: bigint, };
export type MessagePermissions = { default: GroupPermissionRole, text?: GroupPermissionRole, image?: GroupPermissionRole, video?: GroupPermissionRole, audio?: GroupPermissionRole, file?: GroupPermissionRole, poll?: GroupPermissionRole, crypto?: GroupPermissionRole, giphy?: GroupPermissionRole, prize?: GroupPermissionRole, p2p_swap?: GroupPermissionRole, video_call?: GroupPermissionRole, custom: Array<CustomPermission>, };
export type ChatId = PrincipalTS;
export type CryptoAccountICRC1 = "Mint" | { "Account": AccountICRC1 };
export type VerifiedCredentialGate = { issuer_canister_id: PrincipalTS, issuer_origin: string, credential_type: string, credential_name: string, credential_arguments: { [key: string]: VerifiedCredentialArgumentValue }, };
export type NnsProposal = { id: bigint, topic: number, proposer: bigint, created: bigint, title: string, summary: string, url: string, status: ProposalDecisionStatus, reward_status: ProposalRewardStatus, tally: Tally, deadline: bigint, payload_text_rendering?: string, last_updated: bigint, };
export type BlobReference = { canister_id: PrincipalTS, blob_id: bigint, };
export type PendingCryptoTransactionICRC1 = { ledger: PrincipalTS, token: Cryptocurrency, amount: bigint, to: AccountICRC1, fee: bigint, memo?: Array<number>, created: bigint, };
export type DiamondMembershipFees = { chat_fees: DiamondMembershipFeesByDuration, icp_fees: DiamondMembershipFeesByDuration, };
export type FileContent = { name: string, caption?: string, mime_type: string, file_size: number, blob_reference?: BlobReference, };
export type UserSummaryStable = { username: string, display_name?: string, avatar_id?: bigint, is_bot: boolean, suspended: boolean, diamond_membership_status: DiamondMembershipStatus, is_unique_person: boolean, bot_config?: BotConfig, };
export type FailedCryptoTransactionICRC1 = { ledger: PrincipalTS, token: Cryptocurrency, amount: bigint, fee: bigint, from: CryptoAccountICRC1, to: CryptoAccountICRC1, memo?: Array<number>, created: bigint, error_message: string, };
export type TokenBalanceGate = { ledger_canister_id: PrincipalTS, min_balance: bigint, };
export type GateCheckFailedReason = "NotDiamondMember" | "NotLifetimeDiamondMember" | "NoUniquePersonProof" | "NoSnsNeuronsFound" | "NoSnsNeuronsWithRequiredStakeFound" | "NoSnsNeuronsWithRequiredDissolveDelayFound" | { "PaymentFailed": TransferFromError } | { "InsufficientBalance": bigint } | { "FailedVerifiedCredentialCheck": string } | "Locked";
export type TokenInfo = { token: Cryptocurrency, ledger: PrincipalTS, decimals: number, fee: bigint, };
export type CompletedCryptoTransactionNNS = { ledger: PrincipalTS, token: Cryptocurrency, amount: Tokens, fee: Tokens, from: CryptoAccountNNS, to: CryptoAccountNNS, memo: bigint, created: bigint, transaction_hash: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number], block_index: bigint, };
export type AccessTokenType = "StartVideoCall" | { "StartVideoCallV2": VideoCallAccessTokenArgs } | "JoinVideoCall" | "MarkVideoCallAsEnded";
export type PendingCryptoTransactionICRC2 = { ledger: PrincipalTS, token: Cryptocurrency, amount: bigint, from: AccountICRC1, to: AccountICRC1, fee: bigint, memo?: Array<number>, created: bigint, };
export type AudioContent = { caption?: string, mime_type: string, blob_reference?: BlobReference, };
export type ImageContent = { width: number, height: number, thumbnail_data: ThumbnailData, caption?: string, mime_type: string, blob_reference?: BlobReference, };
export type UserId = PrincipalTS;
export type CommunityId = PrincipalTS;
export type CompletedCryptoTransactionICRC1 = { ledger: PrincipalTS, token: Cryptocurrency, amount: bigint, from: CryptoAccountICRC1, to: CryptoAccountICRC1, fee: bigint, memo?: Array<number>, created: bigint, block_index: bigint, };
export type UserOrAccount = { "User": UserId } | { "Account": [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number] };
export type VerifiedCredentialGateArgs = { user_ii_principal: PrincipalTS, credential_jwt: string, credential_jwts: Array<string>, ii_origin: string, };
export type GovernanceProposalsSubtype = { is_nns: boolean, governance_canister_id: PrincipalTS, };
export type SnsProposal = { id: bigint, action: bigint, proposer: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number], created: bigint, title: string, summary: string, url: string, status: ProposalDecisionStatus, reward_status: ProposalRewardStatus, tally: Tally, deadline: bigint, payload_text_rendering?: string, minimum_yes_proportion_of_total: number, minimum_yes_proportion_of_exercised: number, last_updated: bigint, };
export type UsersBlocked = { user_ids: Array<UserId>, blocked_by: UserId, };
export type MessageReport = { reported_by: UserId, timestamp: bigint, reason_code: number, notes?: string, };
export type ThreadSummary = { participant_ids: Array<UserId>, followed_by_me: boolean, reply_count: number, latest_event_index: EventIndex, latest_event_timestamp: bigint, };
export type SuspensionDetails = { reason: string, action: SuspensionAction, suspended_by: UserId, };
export type DiamondMembershipDetails = { expires_at: bigint, pay_in_chat: boolean, subscription: DiamondMembershipSubscription, };
export type MemberLeft = { user_id: UserId, };
export type GroupIndexRecommendedGroupsArgs = { count: number, exclusions: Array<ChatId>, };
export type GroupIndexFreezeGroupArgs = { chat_id: ChatId, reason?: string, suspend_members?: GroupIndexFreezeGroupSuspensionDetails, };
export type GroupIndexAddHotGroupExclusionArgs = { chat_id: ChatId, };
export type GroupIndexLookupChannelByGroupIdSuccessResult = { community_id: CommunityId, channel_id: bigint, };
export type GroupIndexLookupChannelByGroupIdResponse = { "Success": GroupIndexLookupChannelByGroupIdSuccessResult } | "NotFound";
export type GroupIndexLookupChannelByGroupIdArgs = { group_id: ChatId, };
export type GroupIndexFreezeCommunityArgs = { community_id: CommunityId, reason?: string, suspend_members?: GroupIndexFreezeCommunitySuspensionDetails, };
export type GroupIndexDeleteFrozenGroupArgs = { chat_id: ChatId, };
export type GroupIndexSetCommunityModerationFlagsArgs = { community_id: CommunityId, flags: number, };
export type GroupIndexRemoveHotGroupExclusionArgs = { chat_id: ChatId, };
export type GroupIndexActiveGroupsArgs = { group_ids: Array<ChatId>, community_ids: Array<CommunityId>, active_since?: bigint, };
export type GroupIndexUnfreezeGroupArgs = { chat_id: ChatId, };
export type UserIndexDiamondMembershipFeesResponse = { "Success": Array<UserIndexDiamondMembershipFeesDiamondMembershipFees> };
export type UserIndexUsersChitResponse = { "Success": UserIndexUsersChitSuccessResult };
export type UserIndexUsersChitArgs = { users: Array<UserId>, year: number, month: number, };
export type UserIndexSuspendUserArgs = { user_id: UserId, duration?: bigint, reason: string, };
export type UserIndexPlatformOperatorsSuccessResult = { users: Array<UserId>, };
export type UserIndexPlatformOperatorsResponse = { "Success": UserIndexPlatformOperatorsSuccessResult };
export type UserIndexPlatformModeratorsSuccessResult = { users: Array<UserId>, };
export type UserIndexSuspectedBotsSuccessResult = { users: Array<UserId>, };
export type UserIndexSuspectedBotsArgs = { after?: UserId, count: number, };
export type UserIndexUserArgs = { user_id?: UserId, username?: string, };
export type UserIndexReferralMetricsResponse = { "Success": UserIndexReferralMetricsReferralMetrics };
export type UserIndexUnsuspendUserArgs = { user_id: UserId, };
export type UserIndexUsersUserGroup = { users: Array<UserId>, updated_since: bigint, };
export type UserIndexUsersArgs = { user_groups: Array<UserIndexUsersUserGroup>, users_suspended_since?: bigint, };
export type UserIndexChitLeaderboardChitUserBalance = { user_id: UserId, username: string, balance: number, };
export type UserIndexSetDiamondMembershipFeesArgs = { fees: DiamondMembershipFees, };
export type UserIndexPlatformModeratorsGroupResponse = { "Success": ChatId };
export type UserIndexReportedMessagesArgs = { user_id?: UserId, };
export type LocalUserIndexInviteUsersToCommunityArgs = { community_id: CommunityId, user_ids: Array<UserId>, caller_username: string, };
export type LocalUserIndexInviteUsersToGroupArgs = { group_id: ChatId, user_ids: Array<UserId>, caller_username: string, correlation_id: bigint, };
export type LocalUserIndexJoinGroupArgs = { chat_id: ChatId, invite_code?: bigint, verified_credential_args?: VerifiedCredentialGateArgs, correlation_id: bigint, };
export type LocalUserIndexRegisterUserSuccessResult = { user_id: UserId, icp_account: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number], };
export type LocalUserIndexChatEventsEventsContext = { "Direct": UserId } | { "Group": [ChatId, MessageIndex | null] } | { "Channel": [CommunityId, bigint, MessageIndex | null] };
export type LocalUserIndexJoinCommunityArgs = { community_id: CommunityId, invite_code?: bigint, verified_credential_args?: VerifiedCredentialGateArgs, };
export type LocalUserIndexJoinChannelArgs = { community_id: CommunityId, channel_id: bigint, invite_code?: bigint, verified_credential_args?: VerifiedCredentialGateArgs, };
export type LocalUserIndexInviteUsersToChannelFailedResult = { failed_users: Array<UserId>, };
export type LocalUserIndexInviteUsersToChannelPartialSuccessResult = { failed_users: Array<UserId>, };
export type LocalUserIndexInviteUsersToChannelArgs = { community_id: CommunityId, channel_id: bigint, user_ids: Array<UserId>, caller_username: string, };
export type LocalUserIndexGroupAndCommunitySummaryUpdatesArgs = { requests: Array<LocalUserIndexGroupAndCommunitySummaryUpdatesSummaryUpdatesArgs>, };
export type VideoContent = { width: number, height: number, thumbnail_data: ThumbnailData, caption?: string, mime_type: string, image_blob_reference?: BlobReference, video_blob_reference?: BlobReference, };
export type GroupPermissions = { change_roles: GroupPermissionRole, update_group: GroupPermissionRole, add_members: GroupPermissionRole, invite_users: GroupPermissionRole, remove_members: GroupPermissionRole, delete_messages: GroupPermissionRole, pin_messages: GroupPermissionRole, react_to_messages: GroupPermissionRole, mention_all_members: GroupPermissionRole, start_video_call: GroupPermissionRole, message_permissions: MessagePermissions, thread_permissions?: MessagePermissions, };
export type GroupSubtype = { "GovernanceProposals": GovernanceProposalsSubtype };
export type P2PSwapReserved = { reserved_by: UserId, };
export type UserSummary = { user_id: UserId, username: string, display_name?: string, avatar_id?: bigint, is_bot: boolean, suspended: boolean, diamond_member: boolean, diamond_membership_status: DiamondMembershipStatus, total_chit_earned: number, chit_balance: number, streak: number, is_unique_person: boolean, };
export type CompletedCryptoTransactionICRC2 = { ledger: PrincipalTS, token: Cryptocurrency, amount: bigint, spender: UserId, from: CryptoAccountICRC1, to: CryptoAccountICRC1, fee: bigint, memo?: Array<number>, created: bigint, block_index: bigint, };
export type AvatarChanged = { new_avatar?: bigint, previous_avatar?: bigint, changed_by: UserId, };
export type MembersRemoved = { user_ids: Array<UserId>, removed_by: UserId, };
export type MessagePinned = { message_index: MessageIndex, pinned_by: UserId, };
export type GroupDescriptionChanged = { new_description: string, previous_description: string, changed_by: UserId, };
export type PrizeContent = { prizes_remaining: number, prizes_pending: number, winners: Array<UserId>, token: Cryptocurrency, end_date: bigint, caption?: string, diamond_only: boolean, };
export type GroupRulesChanged = { enabled: boolean, prev_enabled: boolean, changed_by: UserId, };
export type GroupCreated = { name: string, description: string, created_by: UserId, };
export type HydratedMention = { thread_root_message_index?: MessageIndex, message_id: MessageId, message_index: MessageIndex, event_index: EventIndex, mentioned_by: UserId, };
export type UserSummaryV2 = { user_id: UserId, stable?: UserSummaryStable, volatile?: UserSummaryVolatile, };
export type ExternalUrlUpdated = { updated_by: UserId, new_url?: string, };
export type DeletedGroupInfo = { id: ChatId, timestamp: bigint, deleted_by: UserId, group_name: string, name: string, public: boolean, };
export type P2PSwapCompleted = { accepted_by: UserId, token1_txn_in: bigint, token0_txn_out: bigint, token1_txn_out: bigint, };
export type GroupInviteCodeChanged = { change: GroupInviteCodeChange, changed_by: UserId, };
export type GroupNameChanged = { new_name: string, previous_name: string, changed_by: UserId, };
export type AccessGateNonComposite = "DiamondMember" | "LifetimeDiamondMember" | "UniquePerson" | { "VerifiedCredential": VerifiedCredentialGate } | { "SnsNeuron": SnsNeuronGate } | { "Payment": PaymentGate } | { "TokenBalance": TokenBalanceGate } | "Locked";
export type Chat = { "Direct": ChatId } | { "Group": ChatId } | { "Channel": [CommunityId, bigint] };
export type DeletedBy = { deleted_by: UserId, timestamp: bigint, };
export type CompletedCryptoTransaction = { "NNS": CompletedCryptoTransactionNNS } | { "ICRC1": CompletedCryptoTransactionICRC1 } | { "ICRC2": CompletedCryptoTransactionICRC2 };
export type P2PSwapAccepted = { accepted_by: UserId, token1_txn_in: bigint, };
export type MessageUnpinned = { message_index: MessageIndex, unpinned_by: UserId, due_to_message_deleted: boolean, };
export type TotalVotes = { "Visible": { [key: number]: Array<UserId> } } | { "Anonymous": { [key: number]: number } } | { "Hidden": number };
export type MultiUserChat = { "Group": ChatId } | { "Channel": [CommunityId, bigint] };
export type UsersUnblocked = { user_ids: Array<UserId>, unblocked_by: UserId, };
export type Tips = Array<[PrincipalTS, Array<[UserId, bigint]>]>;
export type CallParticipant = { user_id: UserId, joined: bigint, };
export type PermissionsChanged = { old_permissions_v2: GroupPermissions, new_permissions_v2: GroupPermissions, changed_by: UserId, };
export type GroupFrozen = { frozen_by: UserId, reason?: string, };
export type FailedCryptoTransactionICRC2 = { ledger: PrincipalTS, token: Cryptocurrency, amount: bigint, fee: bigint, spender: UserId, from: CryptoAccountICRC1, to: CryptoAccountICRC1, memo?: Array<number>, created: bigint, error_message: string, };
export type Proposal = { "NNS": NnsProposal } | { "SNS": SnsProposal };
export type UsersInvited = { user_ids: Array<UserId>, invited_by: UserId, };
export type PendingCryptoTransactionNNS = { ledger: PrincipalTS, token: Cryptocurrency, amount: Tokens, to: UserOrAccount, fee?: Tokens, memo?: bigint, created: bigint, };
export type DeletedCommunityInfo = { id: CommunityId, timestamp: bigint, deleted_by: UserId, name: string, public: boolean, };
export type MembersAdded = { user_ids: Array<UserId>, added_by: UserId, unblocked: Array<UserId>, };
export type FrozenGroupInfo = { timestamp: bigint, frozen_by: UserId, reason?: string, };
export type GroupUnfrozen = { unfrozen_by: UserId, };
export type EventsTimeToLiveUpdated = { updated_by: UserId, new_ttl?: bigint, };
export type MemberJoined = { user_id: UserId, invited_by?: UserId, };
export type RoleChanged = { user_ids: Array<UserId>, changed_by: UserId, old_role: GroupRole, new_role: GroupRole, };
export type GroupVisibilityChanged = { public?: boolean, messages_visible_to_non_members?: boolean, changed_by: UserId, };
export type GroupMembership = { joined: bigint, role: GroupRole, mentions: Array<HydratedMention>, notifications_muted: boolean, my_metrics: ChatMetrics, latest_threads: Array<GroupCanisterThreadDetails>, rules_accepted: boolean, };
export type OptionUpdateFrozenGroupInfo = "NoChange" | "SetToNone" | { "SetToSome": FrozenGroupInfo };
export type ProposalContent = { governance_canister_id: PrincipalTS, proposal: Proposal, my_vote?: boolean, };
export type ReplyContext = { chat_if_other?: [Chat, MessageIndex | null], event_index: EventIndex, };
export type ReportedMessage = { reports: Array<MessageReport>, count: number, };
export type GroupMembershipUpdates = { role?: GroupRole, mentions: Array<HydratedMention>, notifications_muted?: boolean, my_metrics?: ChatMetrics, latest_threads: Array<GroupCanisterThreadDetails>, unfollowed_threads: Array<MessageIndex>, rules_accepted?: boolean, };
export type DiamondMembershipStatusFull = "Inactive" | { "Active": DiamondMembershipDetails } | "Lifetime";
export type OptionUpdateGroupSubtype = "NoChange" | "SetToNone" | { "SetToSome": GroupSubtype };
export type GroupIndexActiveGroupsSuccessResult = { timestamp: bigint, active_groups: Array<ChatId>, active_communities: Array<CommunityId>, deleted_groups: Array<DeletedGroupInfo>, deleted_communities: Array<DeletedCommunityInfo>, };
export type UserIndexPlatformModeratorsResponse = { "Success": UserIndexPlatformModeratorsSuccessResult };
export type UserIndexSuspectedBotsResponse = { "Success": UserIndexSuspectedBotsSuccessResult };
export type UserIndexUserResponse = { "Success": UserSummary } | "UserNotFound";
export type UserIndexSearchResult = { users: Array<UserSummary>, timestamp: bigint, };
export type UserIndexSearchResponse = { "Success": UserIndexSearchResult };
export type UserIndexChitLeaderboardResponse = { "Success": Array<UserIndexChitLeaderboardChitUserBalance> };
export type UserIndexCurrentUserSuccessResult = { user_id: UserId, username: string, date_created: bigint, display_name?: string, avatar_id?: bigint, canister_upgrade_status: CanisterUpgradeStatus, wasm_version: BuildVersion, icp_account: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number], referrals: Array<UserId>, is_platform_moderator: boolean, is_platform_operator: boolean, suspension_details?: SuspensionDetails, is_suspected_bot: boolean, diamond_membership_details?: DiamondMembershipDetails, diamond_membership_status: DiamondMembershipStatusFull, moderation_flags_enabled: number, is_unique_person: boolean, };
export type UserIndexCurrentUserResponse = { "Success": UserIndexCurrentUserSuccessResult } | "UserNotFound";
export type LocalUserIndexReportMessageV2Args = { chat_id: MultiUserChat, thread_root_message_index?: MessageIndex, event_index: EventIndex, reason_code: number, notes?: string, };
export type LocalUserIndexAccessTokenArgs = { token_type: AccessTokenType, chat: Chat, };
export type LocalUserIndexRegisterUserResponse = { "Success": LocalUserIndexRegisterUserSuccessResult } | "RegistrationInProgress" | "AlreadyRegistered" | "UserLimitReached" | "UsernameInvalid" | { "UsernameTooShort": number } | { "UsernameTooLong": number } | "CyclesBalanceTooLow" | { "InternalError": string } | { "PublicKeyInvalid": string } | "ReferralCodeInvalid" | "ReferralCodeAlreadyClaimed" | "ReferralCodeExpired";
export type LocalUserIndexChatEventsEventsArgs = { context: LocalUserIndexChatEventsEventsContext, args: LocalUserIndexChatEventsEventsArgsInner, latest_known_update?: bigint, };
export type LocalUserIndexInviteUsersToChannelResponse = "Success" | { "PartialSuccess": LocalUserIndexInviteUsersToChannelPartialSuccessResult } | { "Failed": LocalUserIndexInviteUsersToChannelFailedResult } | "CommunityFrozen" | "UserNotInCommunity" | "ChannelNotFound" | "UserNotInChannel" | "UserSuspended" | "NotAuthorized" | { "TooManyInvites": number } | { "InternalError": string };
export type PrizeWinnerContent = { winner: UserId, transaction: CompletedCryptoTransaction, prize_message: MessageIndex, };
export type VideoCallContent = { call_type: VideoCallType, ended?: bigint, participants: Array<CallParticipant>, hidden_participants: number, };
export type EventWrapperGroupFrozen = { index: EventIndex, timestamp: bigint, correlation_id: bigint, expires_at?: bigint, event: GroupFrozen, };
export type FailedCryptoTransaction = { "NNS": FailedCryptoTransactionNNS } | { "ICRC1": FailedCryptoTransactionICRC1 } | { "ICRC2": FailedCryptoTransactionICRC2 };
export type CompositeGate = { inner: Array<AccessGateNonComposite>, and: boolean, };
export type EventWrapperGroupUnfrozen = { index: EventIndex, timestamp: bigint, correlation_id: bigint, expires_at?: bigint, event: GroupUnfrozen, };
export type PendingCryptoTransaction = { "NNS": PendingCryptoTransactionNNS } | { "ICRC1": PendingCryptoTransactionICRC1 } | { "ICRC2": PendingCryptoTransactionICRC2 };
export type CryptoTransaction = { "Pending": PendingCryptoTransaction } | { "Completed": CompletedCryptoTransaction } | { "Failed": FailedCryptoTransaction };
export type P2PSwapStatus = "Open" | { "Cancelled": P2PSwapCancelled } | { "Expired": P2PSwapCancelled } | { "Reserved": P2PSwapReserved } | { "Accepted": P2PSwapAccepted } | { "Completed": P2PSwapCompleted };
export type PollVotes = { total: TotalVotes, user: Array<number>, };
export type CurrentUserSummary = { user_id: UserId, username: string, display_name?: string, avatar_id?: bigint, is_bot: boolean, is_platform_moderator: boolean, is_platform_operator: boolean, suspension_details?: SuspensionDetails, is_suspected_bot: boolean, diamond_membership_details?: DiamondMembershipDetails, diamond_membership_status: DiamondMembershipStatusFull, moderation_flags_enabled: number, is_unique_person: boolean, };
export type P2PSwapContent = { swap_id: number, token0: TokenInfo, token0_amount: bigint, token1: TokenInfo, token1_amount: bigint, expires_at: bigint, caption?: string, token0_txn_in: bigint, status: P2PSwapStatus, };
export type AccessGate = "DiamondMember" | "LifetimeDiamondMember" | "UniquePerson" | { "VerifiedCredential": VerifiedCredentialGate } | { "SnsNeuron": SnsNeuronGate } | { "Payment": PaymentGate } | { "TokenBalance": TokenBalanceGate } | { "Composite": CompositeGate } | "Locked";
export type GroupIndexFreezeGroupResponse = { "Success": EventWrapperGroupFrozen } | "ChatAlreadyFrozen" | "ChatNotFound" | "NotAuthorized" | { "InternalError": string };
export type GroupIndexFreezeCommunityResponse = { "Success": EventWrapperGroupFrozen } | "CommunityAlreadyFrozen" | "CommunityNotFound" | "NotAuthorized" | { "InternalError": string };
export type GroupIndexActiveGroupsResponse = { "Success": GroupIndexActiveGroupsSuccessResult };
export type GroupIndexUnfreezeGroupResponse = { "Success": EventWrapperGroupUnfrozen } | "ChatNotFrozen" | "ChatNotFound" | "NotAuthorized" | { "InternalError": string };
export type UserIndexUsersResult = { users: Array<UserSummaryV2>, current_user?: CurrentUserSummary, deleted: Array<UserId>, timestamp: bigint, };
export type UserIndexUsersResponse = { "Success": UserIndexUsersResult };
export type LocalUserIndexChatEventsArgs = { requests: Array<LocalUserIndexChatEventsEventsArgs>, };
export type PollContent = { config: PollConfig, votes: PollVotes, ended: boolean, };
export type CryptoContent = { recipient: UserId, transfer: CryptoTransaction, caption?: string, };
export type OptionUpdateAccessGate = "NoChange" | "SetToNone" | { "SetToSome": AccessGate };
export type MessageContent = { "Text": TextContent } | { "Image": ImageContent } | { "Video": VideoContent } | { "Audio": AudioContent } | { "File": FileContent } | { "Poll": PollContent } | { "Crypto": CryptoContent } | { "Deleted": DeletedBy } | { "Giphy": GiphyContent } | { "GovernanceProposal": ProposalContent } | { "Prize": PrizeContent } | { "PrizeWinner": PrizeWinnerContent } | { "MessageReminderCreated": MessageReminderCreatedContent } | { "MessageReminder": MessageReminderContent } | { "ReportedMessage": ReportedMessage } | { "P2PSwap": P2PSwapContent } | { "VideoCall": VideoCallContent } | { "Custom": CustomContent };
export type GroupMatch = { id: ChatId, name: string, description: string, avatar_id?: bigint, member_count: number, gate?: AccessGate, subtype?: GroupSubtype, };
export type CommunityMatch = { id: CommunityId, score: number, name: string, description: string, avatar_id?: bigint, banner_id?: bigint, member_count: number, channel_count: number, gate?: AccessGate, moderation_flags: number, primary_language: string, };
export type GroupGateUpdated = { updated_by: UserId, new_gate?: AccessGate, };
export type GroupIndexExploreCommunitiesSuccessResult = { matches: Array<CommunityMatch>, total: number, };
export type GroupIndexExploreCommunitiesResponse = { "Success": GroupIndexExploreCommunitiesSuccessResult } | { "TermTooShort": number } | { "TermTooLong": number } | "InvalidTerm" | "InvalidFlags";
export type GroupIndexExploreGroupsSuccessResult = { matches: Array<GroupMatch>, total: number, };
export type GroupIndexExploreGroupsResponse = { "Success": GroupIndexExploreGroupsSuccessResult } | { "TermTooShort": number } | { "TermTooLong": number } | "InvalidTerm";
export type Message = { message_index: MessageIndex, message_id: MessageId, sender: UserId, content: MessageContent, replies_to?: ReplyContext, reactions: Array<[Reaction, Array<UserId>]>, tips: Tips, thread_summary?: ThreadSummary, edited: boolean, forwarded: boolean, block_level_markdown: boolean, };
export type EventWrapperMessage = { index: EventIndex, timestamp: bigint, correlation_id: bigint, expires_at?: bigint, event: Message, };
export type ChatEvent = "Empty" | { "Message": Message } | { "GroupChatCreated": GroupCreated } | { "DirectChatCreated": DirectChatCreated } | { "GroupNameChanged": GroupNameChanged } | { "GroupDescriptionChanged": GroupDescriptionChanged } | { "GroupRulesChanged": GroupRulesChanged } | { "AvatarChanged": AvatarChanged } | { "ParticipantsAdded": MembersAdded } | { "ParticipantsRemoved": MembersRemoved } | { "ParticipantJoined": MemberJoined } | { "ParticipantLeft": MemberLeft } | { "RoleChanged": RoleChanged } | { "UsersBlocked": UsersBlocked } | { "UsersUnblocked": UsersUnblocked } | { "MessagePinned": MessagePinned } | { "MessageUnpinned": MessageUnpinned } | { "PermissionsChanged": PermissionsChanged } | { "GroupVisibilityChanged": GroupVisibilityChanged } | { "GroupInviteCodeChanged": GroupInviteCodeChanged } | { "ChatFrozen": GroupFrozen } | { "ChatUnfrozen": GroupUnfrozen } | { "EventsTimeToLiveUpdated": EventsTimeToLiveUpdated } | { "GroupGateUpdated": GroupGateUpdated } | { "UsersInvited": UsersInvited } | { "MembersAddedToDefaultChannel": MembersAddedToDefaultChannel } | { "ExternalUrlUpdated": ExternalUrlUpdated };
export type CommunityCanisterChannelSummaryUpdates = { channel_id: bigint, last_updated: bigint, name?: string, description?: string, subtype: OptionUpdateGroupSubtype, avatar_id: OptionUpdateU128, is_public?: boolean, messages_visible_to_non_members?: boolean, latest_message?: EventWrapperMessage, latest_message_sender_display_name?: string, latest_event_index?: EventIndex, latest_message_index?: MessageIndex, member_count?: number, permissions_v2?: GroupPermissions, updated_events: Array<[MessageIndex | null, EventIndex, bigint]>, metrics?: ChatMetrics, date_last_pinned?: bigint, events_ttl: OptionUpdateU64, events_ttl_last_updated?: bigint, gate: OptionUpdateAccessGate, membership?: GroupMembershipUpdates, video_call_in_progress: OptionUpdateVideoCall, external_url: OptionUpdateString, };
export type GroupCanisterGroupChatSummary = { chat_id: ChatId, local_user_index_canister_id: PrincipalTS, last_updated: bigint, name: string, description: string, subtype?: GroupSubtype, avatar_id?: bigint, is_public: boolean, history_visible_to_new_joiners: boolean, messages_visible_to_non_members: boolean, min_visible_event_index: EventIndex, min_visible_message_index: MessageIndex, latest_message?: EventWrapperMessage, latest_event_index: EventIndex, latest_message_index?: MessageIndex, joined: bigint, participant_count: number, role: GroupRole, mentions: Array<HydratedMention>, wasm_version: BuildVersion, permissions_v2: GroupPermissions, notifications_muted: boolean, metrics: ChatMetrics, my_metrics: ChatMetrics, latest_threads: Array<GroupCanisterThreadDetails>, frozen?: FrozenGroupInfo, date_last_pinned?: bigint, events_ttl?: bigint, events_ttl_last_updated: bigint, gate?: AccessGate, rules_accepted: boolean, membership?: GroupMembership, video_call_in_progress?: VideoCall, };
export type EventWrapperChatEvent = { index: EventIndex, timestamp: bigint, correlation_id: bigint, expires_at?: bigint, event: ChatEvent, };
export type GroupCanisterGroupChatSummaryUpdates = { chat_id: ChatId, last_updated: bigint, name?: string, description?: string, subtype: OptionUpdateGroupSubtype, avatar_id: OptionUpdateU128, latest_message?: EventWrapperMessage, latest_event_index?: EventIndex, latest_message_index?: MessageIndex, participant_count?: number, role?: GroupRole, mentions: Array<HydratedMention>, wasm_version?: BuildVersion, permissions_v2?: GroupPermissions, updated_events: Array<[MessageIndex | null, EventIndex, bigint]>, metrics?: ChatMetrics, my_metrics?: ChatMetrics, is_public?: boolean, messages_visible_to_non_members?: boolean, latest_threads: Array<GroupCanisterThreadDetails>, unfollowed_threads: Array<MessageIndex>, notifications_muted?: boolean, frozen: OptionUpdateFrozenGroupInfo, date_last_pinned?: bigint, events_ttl: OptionUpdateU64, events_ttl_last_updated?: bigint, gate: OptionUpdateAccessGate, rules_accepted?: boolean, membership?: GroupMembershipUpdates, video_call_in_progress: OptionUpdateVideoCall, };
export type PublicGroupSummary = { chat_id: ChatId, local_user_index_canister_id: PrincipalTS, last_updated: bigint, name: string, description: string, subtype?: GroupSubtype, history_visible_to_new_joiners: boolean, messages_visible_to_non_members: boolean, avatar_id?: bigint, latest_message?: EventWrapperMessage, latest_event_index: EventIndex, latest_message_index?: MessageIndex, participant_count: number, wasm_version: BuildVersion, is_public: boolean, frozen?: FrozenGroupInfo, events_ttl?: bigint, events_ttl_last_updated: bigint, gate?: AccessGate, };
export type CommunityCanisterChannelSummary = { channel_id: bigint, last_updated: bigint, name: string, description: string, subtype?: GroupSubtype, avatar_id?: bigint, is_public: boolean, history_visible_to_new_joiners: boolean, messages_visible_to_non_members: boolean, min_visible_event_index: EventIndex, min_visible_message_index: MessageIndex, latest_message?: EventWrapperMessage, latest_message_sender_display_name?: string, latest_event_index: EventIndex, latest_message_index?: MessageIndex, member_count: number, permissions_v2: GroupPermissions, metrics: ChatMetrics, date_last_pinned?: bigint, events_ttl?: bigint, events_ttl_last_updated: bigint, gate?: AccessGate, membership?: GroupMembership, video_call_in_progress?: VideoCall, is_invited?: boolean, external_url?: string, };
export type GroupIndexRecommendedGroupsSuccessResult = { groups: Array<PublicGroupSummary>, };
export type GroupIndexRecommendedGroupsResponse = { "Success": GroupIndexRecommendedGroupsSuccessResult };
export type LocalUserIndexJoinGroupResponse = { "Success": GroupCanisterGroupChatSummary } | "AlreadyInGroup" | { "AlreadyInGroupV2": GroupCanisterGroupChatSummary } | { "GateCheckFailed": GateCheckFailedReason } | "GroupNotFound" | "GroupNotPublic" | "NotInvited" | { "ParticipantLimitReached": number } | "Blocked" | "UserSuspended" | "ChatFrozen" | { "InternalError": string };
export type EventsResponse = { events: Array<EventWrapperChatEvent>, expired_event_ranges: Array<[EventIndex, EventIndex]>, expired_message_ranges: Array<[MessageIndex, MessageIndex]>, latest_event_index: EventIndex, chat_last_updated: bigint, };
export type CommunityCanisterCommunitySummary = { community_id: CommunityId, local_user_index_canister_id: PrincipalTS, last_updated: bigint, name: string, description: string, avatar_id?: bigint, banner_id?: bigint, is_public: boolean, member_count: number, permissions: CommunityPermissions, frozen?: FrozenGroupInfo, gate?: AccessGate, primary_language: string, latest_event_index: EventIndex, channels: Array<CommunityCanisterChannelSummary>, membership?: CommunityMembership, user_groups: Array<UserGroupSummary>, is_invited?: boolean, metrics: ChatMetrics, };
export type CommunityCanisterCommunitySummaryUpdates = { community_id: CommunityId, last_updated: bigint, name?: string, description?: string, avatar_id: OptionUpdateU128, banner_id: OptionUpdateU128, is_public?: boolean, member_count?: number, permissions?: CommunityPermissions, frozen: OptionUpdateFrozenGroupInfo, gate: OptionUpdateAccessGate, primary_language?: string, latest_event_index?: EventIndex, channels_added: Array<CommunityCanisterChannelSummary>, channels_updated: Array<CommunityCanisterChannelSummaryUpdates>, channels_removed: Array<bigint>, membership?: CommunityMembershipUpdates, user_groups: Array<UserGroupSummary>, user_groups_deleted: Array<number>, metrics?: ChatMetrics, };
export type LocalUserIndexChatEventsEventsResponse = { "Success": EventsResponse } | "NotFound" | { "ReplicaNotUpToDate": bigint } | { "InternalError": string };
export type LocalUserIndexChatEventsSuccessResult = { responses: Array<LocalUserIndexChatEventsEventsResponse>, timestamp: bigint, };
export type LocalUserIndexChatEventsResponse = { "Success": LocalUserIndexChatEventsSuccessResult };
export type LocalUserIndexJoinCommunityResponse = { "Success": CommunityCanisterCommunitySummary } | { "AlreadyInCommunity": CommunityCanisterCommunitySummary } | { "GateCheckFailed": GateCheckFailedReason } | "CommunityNotFound" | "CommunityNotPublic" | "NotInvited" | { "MemberLimitReached": number } | "UserBlocked" | "UserSuspended" | "CommunityFrozen" | { "InternalError": string };
export type LocalUserIndexJoinChannelResponse = { "Success": CommunityCanisterChannelSummary } | { "SuccessJoinedCommunity": CommunityCanisterCommunitySummary } | { "AlreadyInChannel": CommunityCanisterChannelSummary } | { "GateCheckFailed": GateCheckFailedReason } | "CommunityNotFound" | "CommunityNotPublic" | "ChannelNotFound" | { "MemberLimitReached": number } | "UserBlocked" | "UserSuspended" | "CommunityFrozen" | "NotInvited" | { "InternalError": string };
export type LocalUserIndexGroupAndCommunitySummaryUpdatesSummaryUpdatesResponse = { "SuccessGroup": GroupCanisterGroupChatSummary } | { "SuccessCommunity": CommunityCanisterCommunitySummary } | { "SuccessGroupUpdates": GroupCanisterGroupChatSummaryUpdates } | { "SuccessCommunityUpdates": CommunityCanisterCommunitySummaryUpdates } | "SuccessNoUpdates" | "NotFound" | { "InternalError": string };
export type LocalUserIndexGroupAndCommunitySummaryUpdatesResponse = { "Success": Array<LocalUserIndexGroupAndCommunitySummaryUpdatesSummaryUpdatesResponse> };
