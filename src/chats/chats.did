type UserId = principal;
type ChatId = nat64;
type Timestamp = nat64;

type Message =
    record {
        id: nat32;
        timestamp: Timestamp;
        sender: UserId;
        text: text;
    };

type ChatSummary =
    variant {
        Direct: DirectChatSummary;
        Group: GroupChatSummary
    };

type DirectChatSummary =
    record {
        id: ChatId;
        them: UserId;
        unread: nat32;
        latest_message: Message;
    };

type GroupChatSummary =
    record {
        id: ChatId;
        subject: text;
        updated_date: Timestamp;
        participants: vec UserId;
        unread: nat32;
        latest_message: opt Message;
    };

type AddParticipantsResult =
    variant {
        Success: nat32;
        UserNotAdmin;
        ChatNotFound;
        ChatWrongType
    };

type RemoveParticipantResult =
    variant {
        Success;
        UserNotAdmin;
        UserToRemoveNotInChat;
        CannotRemoveSelfFromChat;
        ChatNotFound;
        ChatWrongType
    };

service : {
    create_direct_chat: (UserId, text) -> (opt ChatId);
    create_group_chat: (vec UserId, text) -> (opt ChatId);
    send_message: (ChatId, text) -> (opt nat32);
    mark_read: (ChatId, nat32) -> (opt nat32);
    add_participants: (ChatId, vec UserId) -> (AddParticipantsResult);
    remove_participant: (ChatId, UserId) -> (RemoveParticipantResult);
    get_messages: (ChatId, nat32, nat32) -> (opt vec Message) query;
    list_chats: (bool) -> (vec ChatSummary) query;
}