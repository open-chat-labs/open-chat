type UserId = principal;

type UserSummary =
    record {
        id: UserId;
        username: text;
        version: nat32;
    };

type RegisterUserResponse =
    variant {
        Success: UserSummary;
        UserExists;
        UsernameTaken;
    };

type UpdateUsernameResponse =
    variant {
        Success;
        SuccessNoChange;
        UsernameTaken;
        UserNotFound;
    };

type GetCurrentUserResponse =
    variant {
        Success: UserSummary;
        UserNotFound;
    };

type GetUserIdResponse =
    variant {
        Success: UserId;
        UserNotFound;
    };

type GetUserRequest =
    record {
        id: UserId;
        cached_version: opt nat32;
    };

type GetUsersResponse =
    variant {
        Success: vec UserSummary;
    };

service : {
    register_user: (text) -> (RegisterUserResponse);
    update_username: (text) -> (UpdateUsernameResponse);
    get_current_user: () -> (GetCurrentUserResponse) query;
    get_user_id: (text) -> (GetUserIdResponse) query;
    get_users: (vec GetUserRequest) -> (GetUsersResponse) query;
}