type UserId = principal;
type ChatId = nat;
type Timestamp = nat64;

type CreateGroupChatRequest =
    record {
        chat_id: ChatId;
        subject: text;
        participants: vec UserId;
        chat_history_visible_to_new_joiners: bool;
    };

type CreateGroupChatResponse =
    variant {
        Success: GroupChatSummary;
        ChatAlreadyExists;
        SubjectTooShort: nat8;
        SubjectTooLong: nat8;
        TooManyParticipants: nat8;
    };

type TextContent =
    record {
        text: text;
    };

type MediaContent =
    record {
        caption: opt text;
        mime_type: text;
        width: nat32;
        height: nat32;
        blob_id: text;
        blob_size: nat32;
        chunk_size: nat32;
        thumbnail_data: text;
        blob_deleted: bool;
    };

type FileContent =
    record {
        caption: opt text;
        name: text;
        mime_type: text;
        blob_id: text;
        blob_size: nat32;
        chunk_size: nat32;
        blob_deleted: bool;
    };

type CyclesContent =
    record {
        amount: nat;
        caption: opt text;
    };

type MessageContent =
    variant {
        Text: TextContent;
        Media: MediaContent;
        File: FileContent;
        Cycles: CyclesContent;
    };

type SendDirectMessageRequest =
    record {
        recipient: UserId;
        client_message_id: text;
        content: MessageContent;
        replies_to: opt ReplyContext;
    };

type SendDirectMessageResult =
    record {
        chat_summary: DirectChatSummary;
        message_id: nat32;
        timestamp: Timestamp;
    };

type SendDirectMessageResponse =
    variant {
        Success: SendDirectMessageResult;
        UserNotFound;
        RecipientNotFound;
        BalanceExceeded;
        MessageTooLong: nat32;
        InvalidRequest;
    };

type SendMessageRequest =
    record {
        chat_id: ChatId;
        client_message_id: text;
        content: MessageContent;
        replies_to: opt ReplyContext;
    };

type SendMessageResult =
    record {
        chat_summary: ChatSummary;
        message_id: nat32;
        timestamp: Timestamp;
    };

type SendMessageResponse =
    variant {
        Success: SendMessageResult;
        ChatNotFound;
        MessageTooLong: nat32;
        InvalidRequest;
    };

type MarkReadResult =
    record {
        unread_message_id_ranges: vec vec nat32;
    };

type MarkReadResponse =
    variant {
        Success: MarkReadResult;
        ChatNotFound;
    };

type AddParticipantsResponse =
    variant {
        Success: nat32;
        Unauthorized;
        ChatNotFound;
        NotGroupChat;
    };

type RemoveParticipantResponse =
    variant {
        Success;
        Unauthorized;
        ParticipantNotFound;
        CannotRemoveSelfFromChat;
        ChatNotFound;
        NotGroupChat;
    };

type LeaveGroupResponse =
    variant {
        Success;
        ParticipantNotFound;
        LastAdminCannotLeave;
        ChatNotFound;
        NotGroupChat;
    };

type DeleteGroupResponse =
    variant {
        Success;
        Unauthorized;
        OnlyLastAdminCanDelete;
        ChatNotFound;
        NotGroupChat;
    };

type JoinGroupResponse =
    variant {
        Success;
        AlreadyInGroup;
        UserLimitReached;
        ChatNotFound;
        NotGroupChat;
    };

type GetChatsRequest =
    record {
        updated_since: opt Timestamp;
        message_count_for_top_chat: opt nat16;
    };

type ReplyContext =
    record {
        chat_id: ChatId;
        user_id: UserId;
        message_id: nat32;
        content: MessageContent;
    };

type Message =
    record {
        id: nat32;
        client_message_id: text;
        timestamp: Timestamp;
        sender: UserId;
        content: MessageContent;
        replies_to: opt ReplyContext;
    };

type ChatSummary =
    variant {
        Direct: DirectChatSummary;
        Group: GroupChatSummary;
    };

type DirectChatSummary =
    record {
        id: ChatId;
        them: UserId;
        display_date: Timestamp;
        last_updated: Timestamp;
        unread_by_me_message_id_ranges: vec vec nat32;
        unread_by_them_message_id_ranges: vec vec nat32;
        latest_messages: vec Message;
    };

type GroupChatSummary =
    record {
        id: ChatId;
        subject: text;
        display_date: Timestamp;
        last_updated: Timestamp;
        min_visible_message_id: nat32;
        participants: vec UserId;
        unread_by_me_message_id_ranges: vec vec nat32;
        unread_by_any_message_id_ranges: vec vec nat32;
        latest_messages: vec Message;
    };

type GetChatsResponse =
    variant {
        Success: vec ChatSummary;
    };

type GetMessagesResult =
    record {
        messages: vec Message;
        latest_message_id: nat32;
    };

type GetMessagesResponse =
    variant {
        Success: GetMessagesResult;
        ChatNotFound;
    };

type GetMessagesByIdResponse =
    variant {
        Success: GetMessagesResult;
        ChatNotFound;
    };

type SearchAllMessagesResponse =
    variant {
        Success: SearchAllMessagesResult;
    };

type SearchAllMessagesResult =
    record {
        matches: vec SearchMessagesMatch;
    };

type SearchMessagesMatch =
    record {
        chat_id: ChatId;
        message: Message;
    };

type Stats =
    record {
        memory_used: nat64;
        timestamp: nat64;
        user_id: principal;
        cycles_balance: int64;
        chunk_count: nat32;
        chunk_bytes: nat64;
        direct_chat_count: nat32;
        group_chat_count: nat32;
        text_message_count: nat64;
        image_message_count: nat64;
        video_message_count: nat64;
        file_message_count: nat64;
        cycles_message_count: nat64;
        cycles_transferred: nat;
        pruneable_message_count: nat32;
    };

service : {
    create_group_chat: (CreateGroupChatRequest) -> (CreateGroupChatResponse);
    send_direct_message: (SendDirectMessageRequest) -> (SendDirectMessageResponse);
    send_message: (SendMessageRequest) -> (SendMessageResponse);
    mark_read: (ChatId, nat32, nat32) -> (MarkReadResponse);
    add_participants: (ChatId, vec UserId) -> (AddParticipantsResponse);
    remove_participant: (ChatId, UserId) -> (RemoveParticipantResponse);
    leave_group: (ChatId) -> (LeaveGroupResponse);
    delete_group: (ChatId) -> (DeleteGroupResponse);
    join_group: (ChatId) -> (JoinGroupResponse);
    put_chunk: (text, nat32, vec nat8) -> (bool);

    get_chats: (GetChatsRequest) -> (GetChatsResponse) query;
    get_messages: (ChatId, nat32, nat32) -> (GetMessagesResponse) query;
    get_messages_by_id: (ChatId, vec nat32) -> (GetMessagesByIdResponse) query;
    get_chunk: (text, nat32) -> (opt vec nat8) query;
    search_all_messages: (text, nat8) -> (SearchAllMessagesResponse) query;
    stats: () -> (Stats) query;
}