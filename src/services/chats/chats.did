type UserId = principal;
type ChatId = nat64;
type Timestamp = nat64;

type CreateGroupChatResult =
    record {
        chat_id: ChatId;
        timestamp: Timestamp;
    };

type CreateGroupChatResponse =
    variant {
        Success: CreateGroupChatResult;
        ChatAlreadyExists;
    };

type TextPayload =
    record {
        text: text;
    };

type MediaPayload =
    record {
        caption: opt text;
        mime_type: text;
        blob_id: text;
        blob_size: nat32;
        chunk_size: nat32;
    };

type MessagePayload =
    variant {
        Text: TextPayload;
        Media: MediaPayload;
    };

type SendDirectMessageResult =
    record {
        chat_id: ChatId;
        message_id: nat32;
        timestamp: Timestamp;
    };

type SendDirectMessageResponse =
    variant {
        Success: SendDirectMessageResult;
    };

type SendMessageResult =
    record {
        message_id: nat32;
        timestamp: Timestamp;
    };

type SendMessageResponse =
    variant {
        Success: SendMessageResult;
        ChatNotFound;
    };

type MarkReadResult =
    record {
        read_up_to_id: nat32;
        latest_message_id: nat32;
    };

type MarkReadResponse =
    variant {
        Success: MarkReadResult;
        ChatNotFound;
    };

type AddParticipantsResponse =
    variant {
        Success: nat32;
        Unauthorized;
        ChatNotFound;
        NotGroupChat;
    };

type RemoveParticipantResponse =
    variant {
        Success;
        Unauthorized;
        ParticipantNotFound;
        CannotRemoveSelfFromChat;
        ChatNotFound;
        NotGroupChat;
    };

type GetChatsRequest =
    record {
        updated_since: opt Timestamp;
        message_count_for_top_chat: opt nat16;
    };

type Message =
    record {
        id: nat32;
        timestamp: Timestamp;
        sender: UserId;
        payload: MessagePayload
    };

type ChatSummary =
    variant {
        Direct: DirectChatSummary;
        Group: GroupChatSummary;
    };

type DirectChatSummary =
    record {
        id: ChatId;
        them: UserId;
        updated_date: Timestamp;
        unread: nat32;
        latest_messages: vec Message;
    };

type GroupChatSummary =
    record {
        id: ChatId;
        subject: text;
        updated_date: Timestamp;
        participants: vec UserId;
        unread: nat32;
        latest_messages: vec Message;
    };

type GetChatsResponse =
    variant {
        Success: vec ChatSummary;
    };

type GetMessagesResult =
    record {
        messages: vec Message;
        latest_message_id: nat32;
    };

type GetMessagesResponse =
    variant {
        Success: GetMessagesResult;
        ChatNotFound;
    };

type GetMessagesByIdResponse =
    variant {
        Success: GetMessagesResult;
        ChatNotFound;
    };

service : {
    create_group_chat: (vec UserId, text) -> (CreateGroupChatResponse);
    send_direct_message: (UserId, MessagePayload) -> (SendDirectMessageResponse);
    send_message: (ChatId, MessagePayload) -> (SendMessageResponse);
    mark_read: (ChatId, nat32) -> (MarkReadResponse);
    add_participants: (ChatId, vec UserId) -> (AddParticipantsResponse);
    remove_participant: (ChatId, UserId) -> (RemoveParticipantResponse);
    put_chunk: (text, nat32, vec nat8) -> (bool);

    get_chats: (GetChatsRequest) -> (GetChatsResponse) query;
    get_messages: (ChatId, nat32, nat32) -> (GetMessagesResponse) query;
    get_messages_by_id: (ChatId, vec nat32) -> (GetMessagesByIdResponse) query;
    get_chunk: (text, nat32) -> (opt vec nat8) query;
}