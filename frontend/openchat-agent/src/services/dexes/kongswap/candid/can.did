type TokenReply = variant {
    LP : LPTokenReply;
    IC : ICTokenReply;
};
type LPTokenReply = record {
    token_id : nat32;
    chain : text;
    address : text;
    name : text;
    symbol : text;
    pool_id_of : nat32;
    decimals : nat8;
    fee : nat;
    total_supply : nat;
    is_removed : bool;
};
type ICTokenReply = record {
    token_id : nat32;
    chain : text;
    canister_id : text;
    name : text;
    symbol : text;
    decimals : nat8;
    fee : nat;
    icrc1 : bool;
    icrc2 : bool;
    icrc3 : bool;
    is_removed : bool;
};
type TokensResult = variant { Ok : vec TokenReply; Err : text };

type SwapAmountsTxReply = record {
    pool_symbol : text;
    pay_chain : text;
    pay_symbol : text;
    pay_address : text;
    pay_amount : nat;
    receive_chain : text;
    receive_symbol : text;
    receive_address : text;
    receive_amount : nat;
    price : float64;
    lp_fee : nat;
    gas_fee : nat;
};
type SwapAmountsReply = record {
    pay_chain : text;
    pay_symbol : text;
    pay_address : text;
    pay_amount : nat;
    receive_chain : text;
    receive_symbol : text;
    receive_address : text;
    receive_amount : nat;
    price : float64;
    mid_price : float64;
    slippage : float64;
    txs : vec SwapAmountsTxReply;
};
type SwapAmountsResult = variant { Ok : SwapAmountsReply; Err : text };

service : {
    tokens : (opt text) -> (TokensResult) query;
    swap_amounts : (text, nat, text) -> (SwapAmountsResult) query;
}