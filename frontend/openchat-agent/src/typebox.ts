/**
 * ATTENTION. This code was AUTO GENERATED by ts2typebox. While I don't know
 * your use case, there is a high chance that direct changes to this file get
 * lost. Consider making changes to the underlying Typescript code you use to
 * generate this file instead. The default file is called "types.ts", perhaps
 * have a look there! :]
 */

import { Type, type Static } from "@sinclair/typebox";

export type ProposalsBotCommonExecuteGenericNervousSystemFunction = Static<
    typeof ProposalsBotCommonExecuteGenericNervousSystemFunction
>;
export const ProposalsBotCommonExecuteGenericNervousSystemFunction = Type.Object({
    function_id: Type.BigInt(),
    payload: Type.Array(Type.Number()),
});

export type ProposalsBotCommonCanisterInstallMode = Static<
    typeof ProposalsBotCommonCanisterInstallMode
>;
export const ProposalsBotCommonCanisterInstallMode = Type.Union([
    Type.Literal("Install"),
    Type.Literal("Reinstall"),
    Type.Literal("Upgrade"),
]);

export type ProposalsBotCommonTreasury = Static<typeof ProposalsBotCommonTreasury>;
export const ProposalsBotCommonTreasury = Type.Union([Type.Literal("ICP"), Type.Literal("SNS")]);

export type ReferralStatus = Static<typeof ReferralStatus>;
export const ReferralStatus = Type.Union([
    Type.Literal("Registered"),
    Type.Literal("Diamond"),
    Type.Literal("UniquePerson"),
    Type.Literal("LifetimeDiamond"),
]);

export type OnlineUsersMarkAsOnlineResponse = Static<typeof OnlineUsersMarkAsOnlineResponse>;
export const OnlineUsersMarkAsOnlineResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("UserNotFound"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type UserManageFavouriteChatsResponse = Static<typeof UserManageFavouriteChatsResponse>;
export const UserManageFavouriteChatsResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("UserSuspended"),
]);

export type UserMarkAchievementsSeenArgs = Static<typeof UserMarkAchievementsSeenArgs>;
export const UserMarkAchievementsSeenArgs = Type.Object({
    last_seen: Type.BigInt(),
});

export type UserMarkAchievementsSeenResponse = Static<typeof UserMarkAchievementsSeenResponse>;
export const UserMarkAchievementsSeenResponse = Type.Literal("Success");

export type UserBioResponse = Static<typeof UserBioResponse>;
export const UserBioResponse = Type.Object({
    Success: Type.String(),
});

export type UserJoinVideoCallResponse = Static<typeof UserJoinVideoCallResponse>;
export const UserJoinVideoCallResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("MessageNotFound"),
    Type.Literal("AlreadyEnded"),
    Type.Literal("UserSuspended"),
    Type.Literal("UserBlocked"),
    Type.Literal("ChatNotFound"),
]);

export type UserTokenSwapStatusArgs = Static<typeof UserTokenSwapStatusArgs>;
export const UserTokenSwapStatusArgs = Type.Object({
    swap_id: Type.BigInt(),
});

export type UserTokenSwapStatusTokenSwapStatus = Static<typeof UserTokenSwapStatusTokenSwapStatus>;
export const UserTokenSwapStatusTokenSwapStatus = Type.Object({
    started: Type.BigInt(),
    deposit_account: Type.Union([
        Type.Object({
            Ok: Type.Null(),
        }),
        Type.Object({
            Err: Type.String(),
        }),
        Type.Null(),
    ]),
    transfer: Type.Union([
        Type.Object({
            Ok: Type.BigInt(),
        }),
        Type.Object({
            Err: Type.String(),
        }),
        Type.Null(),
    ]),
    notify_dex: Type.Union([
        Type.Object({
            Ok: Type.Null(),
        }),
        Type.Object({
            Err: Type.String(),
        }),
        Type.Null(),
    ]),
    amount_swapped: Type.Union([
        Type.Object({
            Ok: Type.Union([
                Type.Object({
                    Ok: Type.BigInt(),
                }),
                Type.Object({
                    Err: Type.String(),
                }),
            ]),
        }),
        Type.Object({
            Err: Type.String(),
        }),
        Type.Null(),
    ]),
    withdraw_from_dex: Type.Union([
        Type.Object({
            Ok: Type.BigInt(),
        }),
        Type.Object({
            Err: Type.String(),
        }),
        Type.Null(),
    ]),
    success: Type.Optional(Type.Boolean()),
});

export type UserSetPinNumberArgs = Static<typeof UserSetPinNumberArgs>;
export const UserSetPinNumberArgs = Type.Object({
    current: Type.Optional(Type.String()),
    new: Type.Optional(Type.String()),
});

export type UserSwapTokensSuccessResult = Static<typeof UserSwapTokensSuccessResult>;
export const UserSwapTokensSuccessResult = Type.Object({
    amount_out: Type.BigInt(),
});

export type UserUnblockUserResponse = Static<typeof UserUnblockUserResponse>;
export const UserUnblockUserResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("UserSuspended"),
]);

export type UserAddHotGroupExclusionsResponse = Static<typeof UserAddHotGroupExclusionsResponse>;
export const UserAddHotGroupExclusionsResponse = Type.Literal("Success");

export type UserPinChatResponse = Static<typeof UserPinChatResponse>;
export const UserPinChatResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("ChatNotFound"),
]);

export type UserDeleteDirectChatResponse = Static<typeof UserDeleteDirectChatResponse>;
export const UserDeleteDirectChatResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("ChatNotFound"),
]);

export type UserDeleteMessagesResponse = Static<typeof UserDeleteMessagesResponse>;
export const UserDeleteMessagesResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("ChatNotFound"),
    Type.Literal("UserSuspended"),
]);

export type UserSaveCryptoAccountResponse = Static<typeof UserSaveCryptoAccountResponse>;
export const UserSaveCryptoAccountResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("Invalid"),
    Type.Literal("NameTaken"),
    Type.Literal("UserSuspended"),
]);

export type UserUpdatesArgs = Static<typeof UserUpdatesArgs>;
export const UserUpdatesArgs = Type.Object({
    updates_since: Type.BigInt(),
});

export type UserSubmitProposalResponse = Static<typeof UserSubmitProposalResponse>;
export const UserSubmitProposalResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("GovernanceCanisterNotSupported"),
    Type.Object({
        InsufficientPayment: Type.BigInt(),
    }),
    Type.Literal("UserSuspended"),
    Type.Object({
        TransferFailed: Type.String(),
    }),
    Type.Object({
        Retrying: Type.String(),
    }),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type UserLeaveGroupResponse = Static<typeof UserLeaveGroupResponse>;
export const UserLeaveGroupResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("GroupNotFound"),
    Type.Literal("GroupNotPublic"),
    Type.Literal("CallerNotInGroup"),
    Type.Literal("OwnerCannotLeave"),
    Type.Literal("UserSuspended"),
    Type.Literal("ChatFrozen"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type UserMuteNotificationsResponse = Static<typeof UserMuteNotificationsResponse>;
export const UserMuteNotificationsResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("ChatNotFound"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type UserSetBioArgs = Static<typeof UserSetBioArgs>;
export const UserSetBioArgs = Type.Object({
    text: Type.String(),
});

export type UserClaimDailyChitSuccessResult = Static<typeof UserClaimDailyChitSuccessResult>;
export const UserClaimDailyChitSuccessResult = Type.Object({
    chit_earned: Type.Number(),
    chit_balance: Type.Number(),
    streak: Type.Number(),
    next_claim: Type.BigInt(),
});

export type UserClaimDailyChitResponse = Static<typeof UserClaimDailyChitResponse>;
export const UserClaimDailyChitResponse = Type.Union([
    Type.Object({
        Success: UserClaimDailyChitSuccessResult,
    }),
    Type.Object({
        AlreadyClaimed: Type.BigInt(),
    }),
]);

export type UserDeleteGroupResponse = Static<typeof UserDeleteGroupResponse>;
export const UserDeleteGroupResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("NotAuthorized"),
    Type.Literal("UserSuspended"),
    Type.Literal("ChatFrozen"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type UserEndVideoCallResponse = Static<typeof UserEndVideoCallResponse>;
export const UserEndVideoCallResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("MessageNotFound"),
    Type.Literal("AlreadyEnded"),
]);

export type UserTokenSwapsArgs = Static<typeof UserTokenSwapsArgs>;
export const UserTokenSwapsArgs = Type.Object({
    start: Type.Number(),
    max_results: Type.Number(),
});

export type UserBlockUserResponse = Static<typeof UserBlockUserResponse>;
export const UserBlockUserResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("UserSuspended"),
]);

export type UserSetCommunityIndexesResponse = Static<typeof UserSetCommunityIndexesResponse>;
export const UserSetCommunityIndexesResponse = Type.Literal("Success");

export type UserStartVideoCallResponse = Static<typeof UserStartVideoCallResponse>;
export const UserStartVideoCallResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("NotAuthorized"),
]);

export type UserReclaimSwapTokensResponse = Static<typeof UserReclaimSwapTokensResponse>;
export const UserReclaimSwapTokensResponse = Type.Union([
    Type.Literal("Success"),
    Type.Object({
        Failed: Type.String(),
    }),
]);

export type UserPublicProfilePublicProfile = Static<typeof UserPublicProfilePublicProfile>;
export const UserPublicProfilePublicProfile = Type.Object({
    username: Type.String(),
    display_name: Type.Optional(Type.String()),
    avatar_id: Type.Optional(Type.BigInt()),
    bio: Type.String(),
    is_premium: Type.Boolean(),
    phone_is_verified: Type.Boolean(),
    created: Type.BigInt(),
});

export type UserMarkReadResponse = Static<typeof UserMarkReadResponse>;
export const UserMarkReadResponse = Type.Literal("Success");

export type UserLeaveCommunityResponse = Static<typeof UserLeaveCommunityResponse>;
export const UserLeaveCommunityResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("CommunityNotFound"),
    Type.Literal("CommunityNotPublic"),
    Type.Literal("UserNotInCommunity"),
    Type.Literal("LastOwnerCannotLeave"),
    Type.Literal("UserSuspended"),
    Type.Literal("CommunityFrozen"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type UserCancelMessageReminderResponse = Static<typeof UserCancelMessageReminderResponse>;
export const UserCancelMessageReminderResponse = Type.Literal("Success");

export type UserCancelMessageReminderArgs = Static<typeof UserCancelMessageReminderArgs>;
export const UserCancelMessageReminderArgs = Type.Object({
    reminder_id: Type.BigInt(),
});

export type UserDeleteCommunityResponse = Static<typeof UserDeleteCommunityResponse>;
export const UserDeleteCommunityResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("NotAuthorized"),
    Type.Literal("UserSuspended"),
    Type.Literal("CommunityFrozen"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type UserChitEventsArgs = Static<typeof UserChitEventsArgs>;
export const UserChitEventsArgs = Type.Object({
    from: Type.Optional(Type.BigInt()),
    to: Type.Optional(Type.BigInt()),
    skip: Type.Optional(Type.Number()),
    max: Type.Number(),
    ascending: Type.Boolean(),
});

export type UserNamedAccount = Static<typeof UserNamedAccount>;
export const UserNamedAccount = Type.Object({
    name: Type.String(),
    account: Type.String(),
});

export type UserReportMessageResponse = Static<typeof UserReportMessageResponse>;
export const UserReportMessageResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("UserSuspended"),
    Type.Literal("ChatNotFound"),
    Type.Literal("MessageNotFound"),
    Type.Literal("AlreadyReported"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type UserAutoWallet = Static<typeof UserAutoWallet>;
export const UserAutoWallet = Type.Object({
    min_cents_visible: Type.Number(),
});

export type UserEditMessageResponse = Static<typeof UserEditMessageResponse>;
export const UserEditMessageResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("MessageNotFound"),
    Type.Literal("ChatNotFound"),
    Type.Literal("UserBlocked"),
    Type.Literal("UserSuspended"),
]);

export type UserUnpinChatResponse = Static<typeof UserUnpinChatResponse>;
export const UserUnpinChatResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("ChatNotFound"),
]);

export type UserConfigureWalletResponse = Static<typeof UserConfigureWalletResponse>;
export const UserConfigureWalletResponse = Type.Literal("Success");

export type MessageReminderContent = Static<typeof MessageReminderContent>;
export const MessageReminderContent = Type.Object({
    reminder_id: Type.BigInt(),
    notes: Type.Optional(Type.String()),
});

export type Reaction = Static<typeof Reaction>;
export const Reaction = Type.String();

export type FieldTooShortResult = Static<typeof FieldTooShortResult>;
export const FieldTooShortResult = Type.Object({
    length_provided: Type.Number(),
    min_length: Type.Number(),
});

export type MessageIndex = Static<typeof MessageIndex>;
export const MessageIndex = Type.Number();

export type DiamondMembershipPlanDuration = Static<typeof DiamondMembershipPlanDuration>;
export const DiamondMembershipPlanDuration = Type.Union([
    Type.Literal("OneMonth"),
    Type.Literal("ThreeMonths"),
    Type.Literal("OneYear"),
    Type.Literal("Lifetime"),
]);

export type EventIndex = Static<typeof EventIndex>;
export const EventIndex = Type.Number();

export type SuspensionAction = Static<typeof SuspensionAction>;
export const SuspensionAction = Type.Union([
    Type.Object({
        Unsuspend: Type.BigInt(),
    }),
    Type.Object({
        Delete: Type.BigInt(),
    }),
]);

export type SwapStatusErrorCancelled = Static<typeof SwapStatusErrorCancelled>;
export const SwapStatusErrorCancelled = Type.Object({
    token0_txn_out: Type.Optional(Type.BigInt()),
});

export type SubscriptionKeys = Static<typeof SubscriptionKeys>;
export const SubscriptionKeys = Type.Object({
    p256dh: Type.String(),
    auth: Type.String(),
});

export type CommunityRole = Static<typeof CommunityRole>;
export const CommunityRole = Type.Union([
    Type.Literal("Owner"),
    Type.Literal("Admin"),
    Type.Literal("Member"),
]);

export type ExchangeId = Static<typeof ExchangeId>;
export const ExchangeId = Type.Union([Type.Literal("ICPSwap"), Type.Literal("Sonic")]);

export type ProposalDecisionStatus = Static<typeof ProposalDecisionStatus>;
export const ProposalDecisionStatus = Type.Union([
    Type.Literal("Unspecified"),
    Type.Literal("Open"),
    Type.Literal("Rejected"),
    Type.Literal("Adopted"),
    Type.Literal("Executed"),
    Type.Literal("Failed"),
]);

export type CanisterUpgradeStatus = Static<typeof CanisterUpgradeStatus>;
export const CanisterUpgradeStatus = Type.Union([
    Type.Literal("InProgress"),
    Type.Literal("NotRequired"),
]);

export type OptionUpdateU128 = Static<typeof OptionUpdateU128>;
export const OptionUpdateU128 = Type.Union([
    Type.Literal("NoChange"),
    Type.Literal("SetToNone"),
    Type.Object({
        SetToSome: Type.BigInt(),
    }),
]);

export type SwapStatusErrorExpired = Static<typeof SwapStatusErrorExpired>;
export const SwapStatusErrorExpired = Type.Object({
    token0_txn_out: Type.Optional(Type.BigInt()),
});

export type PinNumberSettings = Static<typeof PinNumberSettings>;
export const PinNumberSettings = Type.Object({
    length: Type.Number(),
    attempts_blocked_until: Type.Optional(Type.BigInt()),
});

export type ApproveError = Static<typeof ApproveError>;
export const ApproveError = Type.Union([
    Type.Object({
        BadFee: Type.Object({
            expected_fee: Type.BigInt(),
        }),
    }),
    Type.Object({
        InsufficientFunds: Type.Object({
            balance: Type.BigInt(),
        }),
    }),
    Type.Object({
        AllowanceChanged: Type.Object({
            current_allowance: Type.BigInt(),
        }),
    }),
    Type.Object({
        Expired: Type.Object({
            ledger_time: Type.BigInt(),
        }),
    }),
    Type.Literal("TooOld"),
    Type.Object({
        CreatedInFuture: Type.Object({
            ledger_time: Type.BigInt(),
        }),
    }),
    Type.Object({
        Duplicate: Type.Object({
            duplicate_of: Type.BigInt(),
        }),
    }),
    Type.Literal("TemporarilyUnavailable"),
    Type.Object({
        GenericError: Type.Object({
            error_code: Type.BigInt(),
            message: Type.String(),
        }),
    }),
]);

export type ChatMetrics = Static<typeof ChatMetrics>;
export const ChatMetrics = Type.Object({
    text_messages: Type.BigInt(),
    image_messages: Type.BigInt(),
    video_messages: Type.BigInt(),
    audio_messages: Type.BigInt(),
    file_messages: Type.BigInt(),
    polls: Type.BigInt(),
    poll_votes: Type.BigInt(),
    icp_messages: Type.BigInt(),
    sns1_messages: Type.BigInt(),
    ckbtc_messages: Type.BigInt(),
    chat_messages: Type.BigInt(),
    kinic_messages: Type.BigInt(),
    deleted_messages: Type.BigInt(),
    giphy_messages: Type.BigInt(),
    prize_messages: Type.BigInt(),
    prize_winner_messages: Type.BigInt(),
    replies: Type.BigInt(),
    edits: Type.BigInt(),
    reactions: Type.BigInt(),
    proposals: Type.BigInt(),
    reported_messages: Type.BigInt(),
    message_reminders: Type.BigInt(),
    custom_type_messages: Type.BigInt(),
    last_active: Type.BigInt(),
});

export type VideoCallType = Static<typeof VideoCallType>;
export const VideoCallType = Type.Union([Type.Literal("Broadcast"), Type.Literal("Default")]);

export type VideoCall = Static<typeof VideoCall>;
export const VideoCall = Type.Object({
    message_index: MessageIndex,
    call_type: VideoCallType,
});

export type GroupRole = Static<typeof GroupRole>;
export const GroupRole = Type.Union([
    Type.Literal("Owner"),
    Type.Literal("Admin"),
    Type.Literal("Moderator"),
    Type.Literal("Participant"),
]);

export type Document = Static<typeof Document>;
export const Document = Type.Object({
    id: Type.BigInt(),
    mime_type: Type.String(),
    data: Type.Array(Type.Number()),
});

export type CustomContent = Static<typeof CustomContent>;
export const CustomContent = Type.Object({
    kind: Type.String(),
    data: Type.Array(Type.Number()),
});

export type GroupPermissionRole = Static<typeof GroupPermissionRole>;
export const GroupPermissionRole = Type.Union([
    Type.Literal("None"),
    Type.Literal("Owner"),
    Type.Literal("Admins"),
    Type.Literal("Moderators"),
    Type.Literal("Members"),
]);

export type AcceptSwapSuccess = Static<typeof AcceptSwapSuccess>;
export const AcceptSwapSuccess = Type.Object({
    token1_txn_in: Type.BigInt(),
});

export type OptionUpdateU64 = Static<typeof OptionUpdateU64>;
export const OptionUpdateU64 = Type.Union([
    Type.Literal("NoChange"),
    Type.Literal("SetToNone"),
    Type.Object({
        SetToSome: Type.BigInt(),
    }),
]);

export type GroupCanisterThreadDetails = Static<typeof GroupCanisterThreadDetails>;
export const GroupCanisterThreadDetails = Type.Object({
    root_message_index: MessageIndex,
    latest_event: EventIndex,
    latest_message: MessageIndex,
    last_updated: Type.BigInt(),
});

export type Tokens = Static<typeof Tokens>;
export const Tokens = Type.Object({
    e8s: Type.BigInt(),
});

export type Rules = Static<typeof Rules>;
export const Rules = Type.Object({
    text: Type.String(),
    enabled: Type.Boolean(),
});

export type SubscriptionInfo = Static<typeof SubscriptionInfo>;
export const SubscriptionInfo = Type.Object({
    endpoint: Type.String(),
    keys: SubscriptionKeys,
});

export type OptionUpdateVideoCall = Static<typeof OptionUpdateVideoCall>;
export const OptionUpdateVideoCall = Type.Union([
    Type.Literal("NoChange"),
    Type.Literal("SetToNone"),
    Type.Object({
        SetToSome: VideoCall,
    }),
]);

export type UserSummaryVolatile = Static<typeof UserSummaryVolatile>;
export const UserSummaryVolatile = Type.Object({
    total_chit_earned: Type.Number(),
    chit_balance: Type.Number(),
    streak: Type.Number(),
});

export type CommunityPermissionRole = Static<typeof CommunityPermissionRole>;
export const CommunityPermissionRole = Type.Union([
    Type.Literal("Owners"),
    Type.Literal("Admins"),
    Type.Literal("Members"),
]);

export type ProposalRewardStatus = Static<typeof ProposalRewardStatus>;
export const ProposalRewardStatus = Type.Union([
    Type.Literal("Unspecified"),
    Type.Literal("AcceptVotes"),
    Type.Literal("ReadyToSettle"),
    Type.Literal("Settled"),
]);

export type OptionUpdatePinNumberSettings = Static<typeof OptionUpdatePinNumberSettings>;
export const OptionUpdatePinNumberSettings = Type.Union([
    Type.Literal("NoChange"),
    Type.Literal("SetToNone"),
    Type.Object({
        SetToSome: PinNumberSettings,
    }),
]);

export type CommunityPermissions = Static<typeof CommunityPermissions>;
export const CommunityPermissions = Type.Object({
    change_roles: CommunityPermissionRole,
    update_details: CommunityPermissionRole,
    invite_users: CommunityPermissionRole,
    remove_members: CommunityPermissionRole,
    create_public_channel: CommunityPermissionRole,
    create_private_channel: CommunityPermissionRole,
    manage_user_groups: CommunityPermissionRole,
});

export type FieldTooLongResult = Static<typeof FieldTooLongResult>;
export const FieldTooLongResult = Type.Object({
    length_provided: Type.Number(),
    max_length: Type.Number(),
});

export type ThreadSyncDetails = Static<typeof ThreadSyncDetails>;
export const ThreadSyncDetails = Type.Object({
    root_message_index: MessageIndex,
    latest_event: Type.Optional(EventIndex),
    latest_message: Type.Optional(MessageIndex),
    read_up_to: Type.Optional(MessageIndex),
    last_updated: Type.BigInt(),
});

export type Chit = Static<typeof Chit>;
export const Chit = Type.Object({
    balance: Type.Number(),
    streak: Type.Number(),
});

export type GiphyImageVariant = Static<typeof GiphyImageVariant>;
export const GiphyImageVariant = Type.Object({
    width: Type.Number(),
    height: Type.Number(),
    url: Type.String(),
    mime_type: Type.String(),
});

export type Achievement = Static<typeof Achievement>;
export const Achievement = Type.Union([
    Type.Literal("JoinedGroup"),
    Type.Literal("JoinedCommunity"),
    Type.Literal("SentDirectMessage"),
    Type.Literal("ReceivedDirectMessage"),
    Type.Literal("SetAvatar"),
    Type.Literal("SetBio"),
    Type.Literal("SetDisplayName"),
    Type.Literal("UpgradedToDiamond"),
    Type.Literal("UpgradedToGoldDiamond"),
    Type.Literal("Streak3"),
    Type.Literal("Streak7"),
    Type.Literal("Streak14"),
    Type.Literal("Streak30"),
    Type.Literal("Streak100"),
    Type.Literal("Streak365"),
    Type.Literal("SentPoll"),
    Type.Literal("SentText"),
    Type.Literal("SentImage"),
    Type.Literal("SentVideo"),
    Type.Literal("SentAudio"),
    Type.Literal("SentFile"),
    Type.Literal("SentGiphy"),
    Type.Literal("SentPrize"),
    Type.Literal("SentMeme"),
    Type.Literal("SentCrypto"),
    Type.Literal("SentP2PSwapOffer"),
    Type.Literal("StartedCall"),
    Type.Literal("ReactedToMessage"),
    Type.Literal("EditedMessage"),
    Type.Literal("RepliedInThread"),
    Type.Literal("QuoteReplied"),
    Type.Literal("TippedMessage"),
    Type.Literal("DeletedMessage"),
    Type.Literal("ForwardedMessage"),
    Type.Literal("ProvedUniquePersonhood"),
    Type.Literal("ReceivedCrypto"),
    Type.Literal("HadMessageReactedTo"),
    Type.Literal("HadMessageTipped"),
    Type.Literal("VotedOnPoll"),
    Type.Literal("SentReminder"),
    Type.Literal("JoinedCall"),
    Type.Literal("AcceptedP2PSwapOffer"),
    Type.Literal("SetCommunityDisplayName"),
    Type.Literal("Referred1stUser"),
    Type.Literal("Referred3rdUser"),
    Type.Literal("Referred10thUser"),
    Type.Literal("Referred20thUser"),
    Type.Literal("Referred50thUser"),
    Type.Literal("PinnedMessage"),
    Type.Literal("SwappedFromWallet"),
    Type.Literal("FavouritedChat"),
    Type.Literal("FollowedThread"),
    Type.Literal("SuggestedTranslation"),
    Type.Literal("TranslationAccepted"),
    Type.Literal("AppointedGroupModerator"),
    Type.Literal("AppointedGroupAdmin"),
    Type.Literal("AppointedGroupOwner"),
    Type.Literal("ChosenAsGroupModerator"),
    Type.Literal("ChosenAsGroupAdmin"),
    Type.Literal("ChosenAsGroupOwner"),
    Type.Literal("SetGroupAccessGate"),
    Type.Literal("SetCommunityAccessGate"),
    Type.Literal("JoinedGatedGroupOrCommunity"),
    Type.Literal("ChangedTheme"),
    Type.Literal("EnabledDisappearingMessages"),
    Type.Literal("OwnGroupWithOneDiamondMember"),
    Type.Literal("OwnGroupWithTenDiamondMembers"),
    Type.Literal("OwnGroupWithOneHundredDiamondMembers"),
    Type.Literal("OwnGroupWithOneThousandDiamondMembers"),
    Type.Literal("DirectChats5"),
    Type.Literal("DirectChats10"),
    Type.Literal("DirectChats20"),
]);

export type Empty = Static<typeof Empty>;
export const Empty = Type.Record(Type.String(), Type.Never());

export type ThumbnailData = Static<typeof ThumbnailData>;
export const ThumbnailData = Type.String();

export type GroupReplyContext = Static<typeof GroupReplyContext>;
export const GroupReplyContext = Type.Object({
    event_index: EventIndex,
});

export type PushEventResult = Static<typeof PushEventResult>;
export const PushEventResult = Type.Object({
    index: EventIndex,
    timestamp: Type.BigInt(),
    expires_at: Type.Optional(Type.BigInt()),
});

export type BuildVersion = Static<typeof BuildVersion>;
export const BuildVersion = Type.Object({
    major: Type.Number(),
    minor: Type.Number(),
    patch: Type.Number(),
});

export type Cryptocurrency = Static<typeof Cryptocurrency>;
export const Cryptocurrency = Type.Union([
    Type.Literal("InternetComputer"),
    Type.Literal("SNS1"),
    Type.Literal("CKBTC"),
    Type.Literal("CHAT"),
    Type.Literal("KINIC"),
    Type.Object({
        Other: Type.String(),
    }),
]);

export type ChitEarnedReason = Static<typeof ChitEarnedReason>;
export const ChitEarnedReason = Type.Union([
    Type.Literal("DailyClaim"),
    Type.Object({
        Achievement: Achievement,
    }),
    Type.Object({
        ExternalAchievement: Type.String(),
    }),
    Type.Object({
        Referral: ReferralStatus,
    }),
    Type.Literal("MemeContestWinner"),
]);

export type InvalidPollReason = Static<typeof InvalidPollReason>;
export const InvalidPollReason = Type.Union([
    Type.Object({
        TooFewOptions: Type.Number(),
    }),
    Type.Object({
        TooManyOptions: Type.Number(),
    }),
    Type.Object({
        OptionTooLong: Type.Number(),
    }),
    Type.Literal("DuplicateOptions"),
    Type.Literal("EndDateInThePast"),
    Type.Literal("PollsNotValidForDirectChats"),
]);

export type MembersAddedToDefaultChannel = Static<typeof MembersAddedToDefaultChannel>;
export const MembersAddedToDefaultChannel = Type.Object({
    count: Type.Number(),
});

export type CryptoAccountNNS = Static<typeof CryptoAccountNNS>;
export const CryptoAccountNNS = Type.Union([
    Type.Literal("Mint"),
    Type.Object({
        Account: Type.Tuple([
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
        ]),
    }),
]);

export type MessageReminderCreatedContent = Static<typeof MessageReminderCreatedContent>;
export const MessageReminderCreatedContent = Type.Object({
    reminder_id: Type.BigInt(),
    remind_at: Type.BigInt(),
    notes: Type.Optional(Type.String()),
    hidden: Type.Boolean(),
});

export type TransferFromError = Static<typeof TransferFromError>;
export const TransferFromError = Type.Union([
    Type.Object({
        BadFee: Type.Object({
            expected_fee: Type.BigInt(),
        }),
    }),
    Type.Object({
        BadBurn: Type.Object({
            min_burn_amount: Type.BigInt(),
        }),
    }),
    Type.Object({
        InsufficientFunds: Type.Object({
            balance: Type.BigInt(),
        }),
    }),
    Type.Object({
        InsufficientAllowance: Type.Object({
            allowance: Type.BigInt(),
        }),
    }),
    Type.Literal("TooOld"),
    Type.Object({
        CreatedInFuture: Type.Object({
            ledger_time: Type.BigInt(),
        }),
    }),
    Type.Object({
        Duplicate: Type.Object({
            duplicate_of: Type.BigInt(),
        }),
    }),
    Type.Literal("TemporarilyUnavailable"),
    Type.Object({
        GenericError: Type.Object({
            error_code: Type.BigInt(),
            message: Type.String(),
        }),
    }),
]);

export type DirectChatCreated = Static<typeof DirectChatCreated>;
export const DirectChatCreated = Type.Record(Type.String(), Type.Never());

export type GroupInviteCodeChange = Static<typeof GroupInviteCodeChange>;
export const GroupInviteCodeChange = Type.Union([
    Type.Literal("Enabled"),
    Type.Literal("Disabled"),
    Type.Literal("Reset"),
]);

export type BotConfig = Static<typeof BotConfig>;
export const BotConfig = Type.Object({
    is_oc_controlled: Type.Boolean(),
    supports_direct_messages: Type.Boolean(),
    can_be_added_to_groups: Type.Boolean(),
});

export type Version = Static<typeof Version>;
export const Version = Type.Number();

export type PrincipalTS = Static<typeof PrincipalTS>;
export const PrincipalTS = Type.Uint8Array();

export type CommunityMembership = Static<typeof CommunityMembership>;
export const CommunityMembership = Type.Object({
    joined: Type.BigInt(),
    role: CommunityRole,
    rules_accepted: Type.Boolean(),
    display_name: Type.Optional(Type.String()),
});

export type VerifiedCredentialArgumentValue = Static<typeof VerifiedCredentialArgumentValue>;
export const VerifiedCredentialArgumentValue = Type.Union([
    Type.Object({
        String: Type.String(),
    }),
    Type.Object({
        Int: Type.Number(),
    }),
]);

export type VideoCallAccessTokenArgs = Static<typeof VideoCallAccessTokenArgs>;
export const VideoCallAccessTokenArgs = Type.Object({
    call_type: VideoCallType,
});

export type P2PSwapCancelled = Static<typeof P2PSwapCancelled>;
export const P2PSwapCancelled = Type.Object({
    token0_txn_out: Type.Optional(Type.BigInt()),
});

export type FailedCryptoTransactionNNS = Static<typeof FailedCryptoTransactionNNS>;
export const FailedCryptoTransactionNNS = Type.Object({
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: Tokens,
    fee: Tokens,
    from: CryptoAccountNNS,
    to: CryptoAccountNNS,
    memo: Type.BigInt(),
    created: Type.BigInt(),
    transaction_hash: Type.Tuple([
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
    ]),
    error_message: Type.String(),
});

export type TextContent = Static<typeof TextContent>;
export const TextContent = Type.Object({
    text: Type.String(),
});

export type MessageId = Static<typeof MessageId>;
export const MessageId = Type.BigInt();

export type CustomPermission = Static<typeof CustomPermission>;
export const CustomPermission = Type.Object({
    subtype: Type.String(),
    role: GroupPermissionRole,
});

export type OptionUpdateString = Static<typeof OptionUpdateString>;
export const OptionUpdateString = Type.Union([
    Type.Literal("NoChange"),
    Type.Literal("SetToNone"),
    Type.Object({
        SetToSome: Type.String(),
    }),
]);

export type DiamondMembershipStatus = Static<typeof DiamondMembershipStatus>;
export const DiamondMembershipStatus = Type.Union([
    Type.Literal("Inactive"),
    Type.Literal("Active"),
    Type.Literal("Lifetime"),
]);

export type PollConfig = Static<typeof PollConfig>;
export const PollConfig = Type.Object({
    text: Type.Optional(Type.String()),
    options: Type.Array(Type.String()),
    end_date: Type.Optional(Type.BigInt()),
    anonymous: Type.Boolean(),
    show_votes_before_end_date: Type.Boolean(),
    allow_multiple_votes_per_user: Type.Boolean(),
    allow_user_to_change_vote: Type.Boolean(),
});

export type Tally = Static<typeof Tally>;
export const Tally = Type.Object({
    yes: Type.BigInt(),
    no: Type.BigInt(),
    total: Type.BigInt(),
    timestamp: Type.BigInt(),
});

export type DiamondMembershipFeesByDuration = Static<typeof DiamondMembershipFeesByDuration>;
export const DiamondMembershipFeesByDuration = Type.Object({
    one_month: Type.BigInt(),
    three_months: Type.BigInt(),
    one_year: Type.BigInt(),
    lifetime: Type.BigInt(),
});

export type UserGroupSummary = Static<typeof UserGroupSummary>;
export const UserGroupSummary = Type.Object({
    user_group_id: Type.Number(),
    name: Type.String(),
    members: Type.Number(),
});

export type DiamondMembershipSubscription = Static<typeof DiamondMembershipSubscription>;
export const DiamondMembershipSubscription = Type.Union([
    Type.Literal("Disabled"),
    Type.Literal("OneMonth"),
    Type.Literal("ThreeMonths"),
    Type.Literal("OneYear"),
]);

export type GroupIndexFreezeGroupSuspensionDetails = Static<
    typeof GroupIndexFreezeGroupSuspensionDetails
>;
export const GroupIndexFreezeGroupSuspensionDetails = Type.Object({
    duration: Type.Optional(Type.BigInt()),
    reason: Type.String(),
});

export type GroupIndexAddHotGroupExclusionResponse = Static<
    typeof GroupIndexAddHotGroupExclusionResponse
>;
export const GroupIndexAddHotGroupExclusionResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("ChatAlreadyExcluded"),
    Type.Literal("ChatNotFound"),
    Type.Literal("NotAuthorized"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type GroupIndexMarkLocalGroupIndexFullArgs = Static<
    typeof GroupIndexMarkLocalGroupIndexFullArgs
>;
export const GroupIndexMarkLocalGroupIndexFullArgs = Type.Object({
    canister_id: PrincipalTS,
    full: Type.Boolean(),
});

export type GroupIndexMarkLocalGroupIndexFullResponse = Static<
    typeof GroupIndexMarkLocalGroupIndexFullResponse
>;
export const GroupIndexMarkLocalGroupIndexFullResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("LocalGroupIndexNotFound"),
    Type.Literal("NotAuthorized"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type GroupIndexExploreCommunitiesArgs = Static<typeof GroupIndexExploreCommunitiesArgs>;
export const GroupIndexExploreCommunitiesArgs = Type.Object({
    search_term: Type.Optional(Type.String()),
    languages: Type.Array(Type.String()),
    page_index: Type.Number(),
    page_size: Type.Number(),
    include_moderation_flags: Type.Number(),
});

export type GroupIndexFreezeCommunitySuspensionDetails = Static<
    typeof GroupIndexFreezeCommunitySuspensionDetails
>;
export const GroupIndexFreezeCommunitySuspensionDetails = Type.Object({
    duration: Type.Optional(Type.BigInt()),
    reason: Type.String(),
});

export type GroupIndexSetGroupUpgradeConcurrencyResponse = Static<
    typeof GroupIndexSetGroupUpgradeConcurrencyResponse
>;
export const GroupIndexSetGroupUpgradeConcurrencyResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("NotAuthorized"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type GroupIndexSetGroupUpgradeConcurrencyArgs = Static<
    typeof GroupIndexSetGroupUpgradeConcurrencyArgs
>;
export const GroupIndexSetGroupUpgradeConcurrencyArgs = Type.Object({
    value: Type.Number(),
});

export type GroupIndexDeleteFrozenGroupResponse = Static<
    typeof GroupIndexDeleteFrozenGroupResponse
>;
export const GroupIndexDeleteFrozenGroupResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("ChatNotFrozen"),
    Type.Literal("ChatNotFound"),
    Type.Literal("NotAuthorized"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type GroupIndexSetCommunityModerationFlagsResponse = Static<
    typeof GroupIndexSetCommunityModerationFlagsResponse
>;
export const GroupIndexSetCommunityModerationFlagsResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("Unchanged"),
    Type.Literal("CommunityNotFound"),
    Type.Literal("NotAuthorized"),
    Type.Literal("InvalidFlags"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type GroupIndexRemoveHotGroupExclusionResponse = Static<
    typeof GroupIndexRemoveHotGroupExclusionResponse
>;
export const GroupIndexRemoveHotGroupExclusionResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("ChatNotExcluded"),
    Type.Literal("ChatNotFound"),
    Type.Literal("NotAuthorized"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type GroupIndexExploreGroupsArgs = Static<typeof GroupIndexExploreGroupsArgs>;
export const GroupIndexExploreGroupsArgs = Type.Object({
    search_term: Type.Optional(Type.String()),
    page_index: Type.Number(),
    page_size: Type.Number(),
});

export type GroupIndexSetCommunityUpgradeConcurrencyResponse = Static<
    typeof GroupIndexSetCommunityUpgradeConcurrencyResponse
>;
export const GroupIndexSetCommunityUpgradeConcurrencyResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("NotAuthorized"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type GroupIndexSetCommunityUpgradeConcurrencyArgs = Static<
    typeof GroupIndexSetCommunityUpgradeConcurrencyArgs
>;
export const GroupIndexSetCommunityUpgradeConcurrencyArgs = Type.Object({
    value: Type.Number(),
});

export type StorageIndexCanForwardArgs = Static<typeof StorageIndexCanForwardArgs>;
export const StorageIndexCanForwardArgs = Type.Object({
    file_hash: Type.Tuple([
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
    ]),
    file_size: Type.BigInt(),
});

export type StorageIndexUserUserRecord = Static<typeof StorageIndexUserUserRecord>;
export const StorageIndexUserUserRecord = Type.Object({
    byte_limit: Type.BigInt(),
    bytes_used: Type.BigInt(),
});

export type StorageIndexUserResponse = Static<typeof StorageIndexUserResponse>;
export const StorageIndexUserResponse = Type.Union([
    Type.Object({
        Success: StorageIndexUserUserRecord,
    }),
    Type.Literal("UserNotFound"),
]);

export type StorageIndexProjectedAllowance = Static<typeof StorageIndexProjectedAllowance>;
export const StorageIndexProjectedAllowance = Type.Object({
    byte_limit: Type.BigInt(),
    bytes_used: Type.BigInt(),
    bytes_used_after_upload: Type.BigInt(),
    bytes_used_after_operation: Type.BigInt(),
});

export type StorageIndexAllocationBucketSuccessResult = Static<
    typeof StorageIndexAllocationBucketSuccessResult
>;
export const StorageIndexAllocationBucketSuccessResult = Type.Object({
    canister_id: PrincipalTS,
    file_id: Type.BigInt(),
    chunk_size: Type.Number(),
    byte_limit: Type.BigInt(),
    bytes_used: Type.BigInt(),
    bytes_used_after_upload: Type.BigInt(),
    projected_allowance: StorageIndexProjectedAllowance,
});

export type StorageIndexAllocationBucketResponse = Static<
    typeof StorageIndexAllocationBucketResponse
>;
export const StorageIndexAllocationBucketResponse = Type.Union([
    Type.Object({
        Success: StorageIndexAllocationBucketSuccessResult,
    }),
    Type.Object({
        AllowanceExceeded: StorageIndexProjectedAllowance,
    }),
    Type.Literal("UserNotFound"),
    Type.Literal("BucketUnavailable"),
]);

export type StorageIndexAllocationBucketArgs = Static<typeof StorageIndexAllocationBucketArgs>;
export const StorageIndexAllocationBucketArgs = Type.Object({
    file_hash: Type.Tuple([
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
    ]),
    file_size: Type.BigInt(),
    file_id_seed: Type.Optional(Type.BigInt()),
});

export type RegistryAddMessageFilterArgs = Static<typeof RegistryAddMessageFilterArgs>;
export const RegistryAddMessageFilterArgs = Type.Object({
    regex: Type.String(),
});

export type RegistryAddMessageFilterResponse = Static<typeof RegistryAddMessageFilterResponse>;
export const RegistryAddMessageFilterResponse = Type.Union([
    Type.Object({
        Success: Type.BigInt(),
    }),
    Type.Literal("NotAuthorized"),
    Type.Literal("AlreadyAdded"),
    Type.Object({
        InvalidRequest: Type.String(),
    }),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type RegistryMessageFilterSummary = Static<typeof RegistryMessageFilterSummary>;
export const RegistryMessageFilterSummary = Type.Object({
    id: Type.BigInt(),
    regex: Type.String(),
});

export type RegistryRemoveMessageFilterResponse = Static<
    typeof RegistryRemoveMessageFilterResponse
>;
export const RegistryRemoveMessageFilterResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("NotAuthorized"),
    Type.Literal("NotFound"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type RegistryRemoveMessageFilterArgs = Static<typeof RegistryRemoveMessageFilterArgs>;
export const RegistryRemoveMessageFilterArgs = Type.Object({
    id: Type.BigInt(),
});

export type RegistryNervousSystemSummary = Static<typeof RegistryNervousSystemSummary>;
export const RegistryNervousSystemSummary = Type.Object({
    root_canister_id: PrincipalTS,
    governance_canister_id: PrincipalTS,
    ledger_canister_id: PrincipalTS,
    index_canister_id: PrincipalTS,
    is_nns: Type.Boolean(),
    proposal_rejection_fee: Type.BigInt(),
    submitting_proposals_enabled: Type.Boolean(),
});

export type RegistryUpdatesArgs = Static<typeof RegistryUpdatesArgs>;
export const RegistryUpdatesArgs = Type.Object({
    since: Type.Optional(Type.BigInt()),
});

export type RegistrySetTokenEnabledResponse = Static<typeof RegistrySetTokenEnabledResponse>;
export const RegistrySetTokenEnabledResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("NotAuthorized"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type RegistrySetTokenEnabledArgs = Static<typeof RegistrySetTokenEnabledArgs>;
export const RegistrySetTokenEnabledArgs = Type.Object({
    ledger_canister_id: PrincipalTS,
    enabled: Type.Boolean(),
});

export type RegistryTokenDetails = Static<typeof RegistryTokenDetails>;
export const RegistryTokenDetails = Type.Object({
    ledger_canister_id: PrincipalTS,
    name: Type.String(),
    symbol: Type.String(),
    decimals: Type.Number(),
    fee: Type.BigInt(),
    logo: Type.String(),
    logo_id: Type.Optional(Type.BigInt()),
    info_url: Type.String(),
    how_to_buy_url: Type.String(),
    transaction_url_format: Type.String(),
    supported_standards: Type.Array(Type.String()),
    added: Type.BigInt(),
    enabled: Type.Boolean(),
    last_updated: Type.BigInt(),
});

export type UserIndexDiamondMembershipFeesDiamondMembershipFees = Static<
    typeof UserIndexDiamondMembershipFeesDiamondMembershipFees
>;
export const UserIndexDiamondMembershipFeesDiamondMembershipFees = Type.Object({
    token: Cryptocurrency,
    one_month: Type.BigInt(),
    three_months: Type.BigInt(),
    one_year: Type.BigInt(),
    lifetime: Type.BigInt(),
});

export type UserIndexUsersChitSuccessResult = Static<typeof UserIndexUsersChitSuccessResult>;
export const UserIndexUsersChitSuccessResult = Type.Object({
    chit: Type.Array(Chit),
});

export type UserIndexPublicKeyResponse = Static<typeof UserIndexPublicKeyResponse>;
export const UserIndexPublicKeyResponse = Type.Union([
    Type.Object({
        Success: Type.String(),
    }),
    Type.Literal("NotInitialised"),
]);

export type UserIndexUpdateDiamondMembershipSubscriptionArgs = Static<
    typeof UserIndexUpdateDiamondMembershipSubscriptionArgs
>;
export const UserIndexUpdateDiamondMembershipSubscriptionArgs = Type.Object({
    pay_in_chat: Type.Optional(Type.Boolean()),
    subscription: Type.Optional(DiamondMembershipSubscription),
});

export type UserIndexUpdateDiamondMembershipSubscriptionResponse = Static<
    typeof UserIndexUpdateDiamondMembershipSubscriptionResponse
>;
export const UserIndexUpdateDiamondMembershipSubscriptionResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("NotDiamondMember"),
    Type.Literal("AlreadyLifetimeDiamondMember"),
]);

export type UserIndexSuspendUserResponse = Static<typeof UserIndexSuspendUserResponse>;
export const UserIndexSuspendUserResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("UserAlreadySuspended"),
    Type.Literal("UserNotFound"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type UserIndexCheckUsernameResponse = Static<typeof UserIndexCheckUsernameResponse>;
export const UserIndexCheckUsernameResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("UsernameTaken"),
    Type.Literal("UsernameInvalid"),
    Type.Object({
        UsernameTooShort: Type.Number(),
    }),
    Type.Object({
        UsernameTooLong: Type.Number(),
    }),
]);

export type UserIndexCheckUsernameArgs = Static<typeof UserIndexCheckUsernameArgs>;
export const UserIndexCheckUsernameArgs = Type.Object({
    username: Type.String(),
});

export type UserIndexSetModerationFlagsArgs = Static<typeof UserIndexSetModerationFlagsArgs>;
export const UserIndexSetModerationFlagsArgs = Type.Object({
    moderation_flags_enabled: Type.Number(),
});

export type UserIndexSetModerationFlagsResponse = Static<
    typeof UserIndexSetModerationFlagsResponse
>;
export const UserIndexSetModerationFlagsResponse = Type.Literal("Success");

export type UserIndexSetUserUpgradeConcurrencyArgs = Static<
    typeof UserIndexSetUserUpgradeConcurrencyArgs
>;
export const UserIndexSetUserUpgradeConcurrencyArgs = Type.Object({
    value: Type.Number(),
});

export type UserIndexSetUserUpgradeConcurrencyResponse = Static<
    typeof UserIndexSetUserUpgradeConcurrencyResponse
>;
export const UserIndexSetUserUpgradeConcurrencyResponse = Type.Literal("Success");

export type UserIndexExternalAchievementsExternalAchievement = Static<
    typeof UserIndexExternalAchievementsExternalAchievement
>;
export const UserIndexExternalAchievementsExternalAchievement = Type.Object({
    id: Type.Number(),
    name: Type.String(),
    url: Type.String(),
    chit_reward: Type.Number(),
});

export type UserIndexExternalAchievementsArgs = Static<typeof UserIndexExternalAchievementsArgs>;
export const UserIndexExternalAchievementsArgs = Type.Object({
    updates_since: Type.BigInt(),
});

export type UserIndexReferralMetricsReferralMetrics = Static<
    typeof UserIndexReferralMetricsReferralMetrics
>;
export const UserIndexReferralMetricsReferralMetrics = Type.Object({
    users_who_referred: Type.Number(),
    users_who_referred_paid_diamond: Type.Number(),
    users_who_referred_unpaid_diamond: Type.Number(),
    users_who_referred_90_percent_unpaid_diamond: Type.Number(),
    referrals_of_paid_diamond: Type.Number(),
    referrals_of_unpaid_diamond: Type.Number(),
    referrals_other: Type.Number(),
    icp_raised_by_referrals_to_paid_diamond: Type.Number(),
});

export type UserIndexPayForDiamondMembershipSuccessResult = Static<
    typeof UserIndexPayForDiamondMembershipSuccessResult
>;
export const UserIndexPayForDiamondMembershipSuccessResult = Type.Object({
    expires_at: Type.BigInt(),
    pay_in_chat: Type.Boolean(),
    subscription: DiamondMembershipSubscription,
    proof_jwt: Type.String(),
});

export type UserIndexPayForDiamondMembershipResponse = Static<
    typeof UserIndexPayForDiamondMembershipResponse
>;
export const UserIndexPayForDiamondMembershipResponse = Type.Union([
    Type.Object({
        Success: UserIndexPayForDiamondMembershipSuccessResult,
    }),
    Type.Literal("AlreadyLifetimeDiamondMember"),
    Type.Literal("CurrencyNotSupported"),
    Type.Literal("PriceMismatch"),
    Type.Literal("PaymentAlreadyInProgress"),
    Type.Literal("UserNotFound"),
    Type.Object({
        InsufficientFunds: Type.BigInt(),
    }),
    Type.Object({
        TransferFailed: Type.String(),
    }),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type UserIndexPayForDiamondMembershipArgs = Static<
    typeof UserIndexPayForDiamondMembershipArgs
>;
export const UserIndexPayForDiamondMembershipArgs = Type.Object({
    duration: DiamondMembershipPlanDuration,
    token: Cryptocurrency,
    expected_price_e8s: Type.BigInt(),
    recurring: Type.Boolean(),
});

export type UserIndexSearchArgs = Static<typeof UserIndexSearchArgs>;
export const UserIndexSearchArgs = Type.Object({
    search_term: Type.String(),
    max_results: Type.Number(),
});

export type UserIndexUnsuspendUserResponse = Static<typeof UserIndexUnsuspendUserResponse>;
export const UserIndexUnsuspendUserResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("UserNotSuspended"),
    Type.Literal("UserNotFound"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type UserIndexSubmitProofOfUniquePersonhoodResponse = Static<
    typeof UserIndexSubmitProofOfUniquePersonhoodResponse
>;
export const UserIndexSubmitProofOfUniquePersonhoodResponse = Type.Union([
    Type.Literal("Success"),
    Type.Object({
        Invalid: Type.String(),
    }),
    Type.Literal("UserNotFound"),
]);

export type UserIndexSubmitProofOfUniquePersonhoodArgs = Static<
    typeof UserIndexSubmitProofOfUniquePersonhoodArgs
>;
export const UserIndexSubmitProofOfUniquePersonhoodArgs = Type.Object({
    user_ii_principal: PrincipalTS,
    credential_jwt: Type.String(),
});

export type UserIndexSetUsernameResponse = Static<typeof UserIndexSetUsernameResponse>;
export const UserIndexSetUsernameResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("UsernameTaken"),
    Type.Literal("UserNotFound"),
    Type.Literal("UsernameInvalid"),
    Type.Object({
        UsernameTooShort: Type.Number(),
    }),
    Type.Object({
        UsernameTooLong: Type.Number(),
    }),
]);

export type UserIndexSetUsernameArgs = Static<typeof UserIndexSetUsernameArgs>;
export const UserIndexSetUsernameArgs = Type.Object({
    username: Type.String(),
});

export type UserIndexSetDisplayNameResponse = Static<typeof UserIndexSetDisplayNameResponse>;
export const UserIndexSetDisplayNameResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("Unauthorized"),
    Type.Literal("UserNotFound"),
    Type.Literal("DisplayNameInvalid"),
    Type.Object({
        DisplayNameTooShort: Type.Number(),
    }),
    Type.Object({
        DisplayNameTooLong: Type.Number(),
    }),
]);

export type UserIndexSetDisplayNameArgs = Static<typeof UserIndexSetDisplayNameArgs>;
export const UserIndexSetDisplayNameArgs = Type.Object({
    display_name: Type.Optional(Type.String()),
});

export type UserIndexSetDiamondMembershipFeesResponse = Static<
    typeof UserIndexSetDiamondMembershipFeesResponse
>;
export const UserIndexSetDiamondMembershipFeesResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("Invalid"),
]);

export type UserIndexReportedMessagesSuccessResult = Static<
    typeof UserIndexReportedMessagesSuccessResult
>;
export const UserIndexReportedMessagesSuccessResult = Type.Object({
    json: Type.String(),
});

export type UserIndexReportedMessagesResponse = Static<typeof UserIndexReportedMessagesResponse>;
export const UserIndexReportedMessagesResponse = Type.Object({
    Success: UserIndexReportedMessagesSuccessResult,
});

export type UserIndexUserRegistrationCanisterResponse = Static<
    typeof UserIndexUserRegistrationCanisterResponse
>;
export const UserIndexUserRegistrationCanisterResponse = Type.Union([
    Type.Object({
        Success: PrincipalTS,
    }),
    Type.Literal("NewRegistrationsClosed"),
]);

export type LocalUserIndexInviteUsersToCommunityResponse = Static<
    typeof LocalUserIndexInviteUsersToCommunityResponse
>;
export const LocalUserIndexInviteUsersToCommunityResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("UserNotInCommunity"),
    Type.Literal("NotAuthorized"),
    Type.Literal("CommunityFrozen"),
    Type.Object({
        TooManyInvites: Type.Number(),
    }),
    Type.Literal("UserSuspended"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type LocalUserIndexInviteUsersToGroupResponse = Static<
    typeof LocalUserIndexInviteUsersToGroupResponse
>;
export const LocalUserIndexInviteUsersToGroupResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("GroupNotFound"),
    Type.Literal("CallerNotInGroup"),
    Type.Literal("NotAuthorized"),
    Type.Literal("ChatFrozen"),
    Type.Object({
        TooManyInvites: Type.Number(),
    }),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type LocalUserIndexAccessTokenResponse = Static<typeof LocalUserIndexAccessTokenResponse>;
export const LocalUserIndexAccessTokenResponse = Type.Union([
    Type.Object({
        Success: Type.String(),
    }),
    Type.Literal("NotAuthorized"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type LocalUserIndexRegisterUserArgs = Static<typeof LocalUserIndexRegisterUserArgs>;
export const LocalUserIndexRegisterUserArgs = Type.Object({
    username: Type.String(),
    referral_code: Type.Optional(Type.String()),
    public_key: Type.Array(Type.Number()),
});

export type LocalUserIndexChatEventsEventsByIndexArgs = Static<
    typeof LocalUserIndexChatEventsEventsByIndexArgs
>;
export const LocalUserIndexChatEventsEventsByIndexArgs = Type.Object({
    events: Type.Array(EventIndex),
});

export type LocalUserIndexChatEventsEventsWindowArgs = Static<
    typeof LocalUserIndexChatEventsEventsWindowArgs
>;
export const LocalUserIndexChatEventsEventsWindowArgs = Type.Object({
    mid_point: MessageIndex,
    max_messages: Type.Number(),
    max_events: Type.Number(),
});

export type LocalUserIndexChatEventsEventsPageArgs = Static<
    typeof LocalUserIndexChatEventsEventsPageArgs
>;
export const LocalUserIndexChatEventsEventsPageArgs = Type.Object({
    start_index: EventIndex,
    ascending: Type.Boolean(),
    max_messages: Type.Number(),
    max_events: Type.Number(),
});

export type LocalUserIndexChatEventsEventsArgsInner = Static<
    typeof LocalUserIndexChatEventsEventsArgsInner
>;
export const LocalUserIndexChatEventsEventsArgsInner = Type.Union([
    Type.Object({
        Page: LocalUserIndexChatEventsEventsPageArgs,
    }),
    Type.Object({
        ByIndex: LocalUserIndexChatEventsEventsByIndexArgs,
    }),
    Type.Object({
        Window: LocalUserIndexChatEventsEventsWindowArgs,
    }),
]);

export type LocalUserIndexReportMessageResponse = Static<
    typeof LocalUserIndexReportMessageResponse
>;
export const LocalUserIndexReportMessageResponse = Type.Union([
    Type.Literal("Success"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type LocalUserIndexGroupAndCommunitySummaryUpdatesSummaryUpdatesArgs = Static<
    typeof LocalUserIndexGroupAndCommunitySummaryUpdatesSummaryUpdatesArgs
>;
export const LocalUserIndexGroupAndCommunitySummaryUpdatesSummaryUpdatesArgs = Type.Object({
    canister_id: PrincipalTS,
    is_community: Type.Boolean(),
    invite_code: Type.Optional(Type.BigInt()),
    updates_since: Type.Optional(Type.BigInt()),
});

export type NotificationsIndexPushSubscriptionResponse = Static<
    typeof NotificationsIndexPushSubscriptionResponse
>;
export const NotificationsIndexPushSubscriptionResponse = Type.Union([
    Type.Literal("Success"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type NotificationsIndexPushSubscriptionArgs = Static<
    typeof NotificationsIndexPushSubscriptionArgs
>;
export const NotificationsIndexPushSubscriptionArgs = Type.Object({
    subscription: SubscriptionInfo,
});

export type NotificationsIndexRemoveSubscriptionsForUserResponse = Static<
    typeof NotificationsIndexRemoveSubscriptionsForUserResponse
>;
export const NotificationsIndexRemoveSubscriptionsForUserResponse = Type.Literal("Success");

export type NotificationsIndexSubscriptionExistsArgs = Static<
    typeof NotificationsIndexSubscriptionExistsArgs
>;
export const NotificationsIndexSubscriptionExistsArgs = Type.Object({
    p256dh_key: Type.String(),
});

export type NotificationsIndexSubscriptionExistsResponse = Static<
    typeof NotificationsIndexSubscriptionExistsResponse
>;
export const NotificationsIndexSubscriptionExistsResponse = Type.Union([
    Type.Literal("Yes"),
    Type.Literal("No"),
]);

export type NotificationsIndexRemoveSubscriptionArgs = Static<
    typeof NotificationsIndexRemoveSubscriptionArgs
>;
export const NotificationsIndexRemoveSubscriptionArgs = Type.Object({
    p256dh_key: Type.String(),
});

export type NotificationsIndexRemoveSubscriptionResponse = Static<
    typeof NotificationsIndexRemoveSubscriptionResponse
>;
export const NotificationsIndexRemoveSubscriptionResponse = Type.Literal("Success");

export type StorageBucketDeleteFilesDeleteFileFailureReason = Static<
    typeof StorageBucketDeleteFilesDeleteFileFailureReason
>;
export const StorageBucketDeleteFilesDeleteFileFailureReason = Type.Union([
    Type.Literal("NotFound"),
    Type.Literal("NotAuthorized"),
]);

export type StorageBucketDeleteFilesArgs = Static<typeof StorageBucketDeleteFilesArgs>;
export const StorageBucketDeleteFilesArgs = Type.Object({
    file_ids: Type.Array(Type.BigInt()),
});

export type StorageBucketDeleteFilesDeleteFileFailure = Static<
    typeof StorageBucketDeleteFilesDeleteFileFailure
>;
export const StorageBucketDeleteFilesDeleteFileFailure = Type.Object({
    file_id: Type.BigInt(),
    reason: StorageBucketDeleteFilesDeleteFileFailureReason,
});

export type StorageBucketFileInfoArgs = Static<typeof StorageBucketFileInfoArgs>;
export const StorageBucketFileInfoArgs = Type.Object({
    file_id: Type.BigInt(),
});

export type StorageBucketFileInfoSuccessResult = Static<typeof StorageBucketFileInfoSuccessResult>;
export const StorageBucketFileInfoSuccessResult = Type.Object({
    is_owner: Type.Boolean(),
    file_size: Type.BigInt(),
    file_hash: Type.Tuple([
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
    ]),
});

export type StorageBucketFileInfoResponse = Static<typeof StorageBucketFileInfoResponse>;
export const StorageBucketFileInfoResponse = Type.Union([
    Type.Object({
        Success: StorageBucketFileInfoSuccessResult,
    }),
    Type.Literal("NotFound"),
]);

export type StorageBucketUploadChunkResponse = Static<typeof StorageBucketUploadChunkResponse>;
export const StorageBucketUploadChunkResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("AllowanceExceeded"),
    Type.Literal("FileAlreadyExists"),
    Type.Literal("FileTooBig"),
    Type.Literal("FileExpired"),
    Type.Literal("ChunkAlreadyExists"),
    Type.Literal("ChunkIndexTooHigh"),
    Type.Literal("ChunkSizeMismatch"),
    Type.Literal("Full"),
    Type.Literal("HashMismatch"),
    Type.Literal("InvalidFileId"),
    Type.Literal("UserNotFound"),
]);

export type StorageBucketUploadChunkArgs = Static<typeof StorageBucketUploadChunkArgs>;
export const StorageBucketUploadChunkArgs = Type.Object({
    file_id: Type.BigInt(),
    hash: Type.Tuple([
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
    ]),
    mime_type: Type.String(),
    accessors: Type.Array(PrincipalTS),
    chunk_index: Type.Number(),
    chunk_size: Type.Number(),
    total_size: Type.BigInt(),
    bytes: Type.Array(Type.Number()),
    expiry: Type.Optional(Type.BigInt()),
});

export type StorageBucketDeleteFileResponse = Static<typeof StorageBucketDeleteFileResponse>;
export const StorageBucketDeleteFileResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("NotAuthorized"),
    Type.Literal("NotFound"),
]);

export type StorageBucketDeleteFileArgs = Static<typeof StorageBucketDeleteFileArgs>;
export const StorageBucketDeleteFileArgs = Type.Object({
    file_id: Type.BigInt(),
});

export type StorageBucketForwardFileResponse = Static<typeof StorageBucketForwardFileResponse>;
export const StorageBucketForwardFileResponse = Type.Union([
    Type.Object({
        Success: Type.BigInt(),
    }),
    Type.Literal("NotAuthorized"),
    Type.Literal("NotFound"),
]);

export type StorageBucketForwardFileArgs = Static<typeof StorageBucketForwardFileArgs>;
export const StorageBucketForwardFileArgs = Type.Object({
    file_id: Type.BigInt(),
    accessors: Type.Array(PrincipalTS),
});

export type ProposalsBotCommonUpgradeSnsControlledCanister = Static<
    typeof ProposalsBotCommonUpgradeSnsControlledCanister
>;
export const ProposalsBotCommonUpgradeSnsControlledCanister = Type.Object({
    canister_id: PrincipalTS,
    new_canister_wasm: Type.Array(Type.Number()),
    mode: ProposalsBotCommonCanisterInstallMode,
});

export type UserSavedCryptoAccountsResponse = Static<typeof UserSavedCryptoAccountsResponse>;
export const UserSavedCryptoAccountsResponse = Type.Object({
    Success: Type.Array(UserNamedAccount),
});

export type UserTokenSwapStatusResponse = Static<typeof UserTokenSwapStatusResponse>;
export const UserTokenSwapStatusResponse = Type.Union([
    Type.Object({
        Success: UserTokenSwapStatusTokenSwapStatus,
    }),
    Type.Literal("NotFound"),
]);

export type UserSetPinNumberResponse = Static<typeof UserSetPinNumberResponse>;
export const UserSetPinNumberResponse = Type.Union([
    Type.Literal("Success"),
    Type.Object({
        TooShort: FieldTooShortResult,
    }),
    Type.Object({
        TooLong: FieldTooLongResult,
    }),
    Type.Literal("PinRequired"),
    Type.Object({
        PinIncorrect: Type.BigInt(),
    }),
    Type.Object({
        TooManyFailedPinAttempts: Type.BigInt(),
    }),
]);

export type UserSwapTokensICPSwapArgs = Static<typeof UserSwapTokensICPSwapArgs>;
export const UserSwapTokensICPSwapArgs = Type.Object({
    swap_canister_id: PrincipalTS,
    zero_for_one: Type.Boolean(),
});

export type UserSwapTokensResponse = Static<typeof UserSwapTokensResponse>;
export const UserSwapTokensResponse = Type.Union([
    Type.Object({
        Success: UserSwapTokensSuccessResult,
    }),
    Type.Literal("SwapFailed"),
    Type.Literal("PinRequired"),
    Type.Object({
        PinIncorrect: Type.BigInt(),
    }),
    Type.Object({
        TooManyFailedPinAttempts: Type.BigInt(),
    }),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type UserSetAvatarResponse = Static<typeof UserSetAvatarResponse>;
export const UserSetAvatarResponse = Type.Union([
    Type.Literal("Success"),
    Type.Object({
        AvatarTooBig: FieldTooLongResult,
    }),
    Type.Literal("UserSuspended"),
]);

export type UserSetAvatarArgs = Static<typeof UserSetAvatarArgs>;
export const UserSetAvatarArgs = Type.Object({
    avatar: Type.Optional(Document),
});

export type UserManualWallet = Static<typeof UserManualWallet>;
export const UserManualWallet = Type.Object({
    tokens: Type.Array(PrincipalTS),
});

export type UserChannelSummaryUpdates = Static<typeof UserChannelSummaryUpdates>;
export const UserChannelSummaryUpdates = Type.Object({
    channel_id: Type.BigInt(),
    read_by_me_up_to: Type.Optional(MessageIndex),
    threads_read: Type.Record(MessageIndex, MessageIndex),
    archived: Type.Optional(Type.Boolean()),
    date_read_pinned: Type.Optional(Type.BigInt()),
});

export type UserWalletConfig = Static<typeof UserWalletConfig>;
export const UserWalletConfig = Type.Union([
    Type.Object({
        Auto: UserAutoWallet,
    }),
    Type.Object({
        Manual: UserManualWallet,
    }),
]);

export type UserSetBioResponse = Static<typeof UserSetBioResponse>;
export const UserSetBioResponse = Type.Union([
    Type.Literal("Success"),
    Type.Object({
        TooLong: FieldTooLongResult,
    }),
    Type.Literal("UserSuspended"),
]);

export type UserChannelSummary = Static<typeof UserChannelSummary>;
export const UserChannelSummary = Type.Object({
    channel_id: Type.BigInt(),
    read_by_me_up_to: Type.Optional(MessageIndex),
    threads_read: Type.Record(MessageIndex, MessageIndex),
    archived: Type.Boolean(),
    date_read_pinned: Type.Optional(Type.BigInt()),
});

export type UserApproveTransferResponse = Static<typeof UserApproveTransferResponse>;
export const UserApproveTransferResponse = Type.Union([
    Type.Literal("Success"),
    Type.Object({
        ApproveError: ApproveError,
    }),
    Type.Literal("PinRequired"),
    Type.Object({
        PinIncorrect: Type.BigInt(),
    }),
    Type.Object({
        TooManyFailedPinAttempts: Type.BigInt(),
    }),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type UserSetMessageReminderResponse = Static<typeof UserSetMessageReminderResponse>;
export const UserSetMessageReminderResponse = Type.Union([
    Type.Object({
        Success: Type.BigInt(),
    }),
    Type.Literal("ReminderDateInThePast"),
    Type.Object({
        NotesTooLong: FieldTooLongResult,
    }),
    Type.Literal("UserSuspended"),
]);

export type UserRemoveReactionResponse = Static<typeof UserRemoveReactionResponse>;
export const UserRemoveReactionResponse = Type.Union([
    Type.Literal("Success"),
    Type.Object({
        SuccessV2: PushEventResult,
    }),
    Type.Literal("NoChange"),
    Type.Literal("MessageNotFound"),
    Type.Literal("ChatNotFound"),
    Type.Literal("UserSuspended"),
]);

export type UserSetContactResponse = Static<typeof UserSetContactResponse>;
export const UserSetContactResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("NoChange"),
    Type.Object({
        NicknameTooShort: FieldTooShortResult,
    }),
    Type.Object({
        NicknameTooLong: FieldTooLongResult,
    }),
    Type.Literal("UserSuspended"),
]);

export type UserAddReactionResponse = Static<typeof UserAddReactionResponse>;
export const UserAddReactionResponse = Type.Union([
    Type.Literal("Success"),
    Type.Object({
        SuccessV2: PushEventResult,
    }),
    Type.Literal("NoChange"),
    Type.Literal("InvalidReaction"),
    Type.Literal("MessageNotFound"),
    Type.Literal("ChatNotFound"),
    Type.Literal("UserSuspended"),
]);

export type UserReclaimSwapTokensArgs = Static<typeof UserReclaimSwapTokensArgs>;
export const UserReclaimSwapTokensArgs = Type.Object({
    exchange_id: ExchangeId,
    swap_canister_id: PrincipalTS,
    ledger_canister_id: PrincipalTS,
    amount: Type.BigInt(),
    fee: Type.BigInt(),
});

export type UserPublicProfileResponse = Static<typeof UserPublicProfileResponse>;
export const UserPublicProfileResponse = Type.Object({
    Success: UserPublicProfilePublicProfile,
});

export type UserMarkReadThreadRead = Static<typeof UserMarkReadThreadRead>;
export const UserMarkReadThreadRead = Type.Object({
    root_message_index: MessageIndex,
    read_up_to: MessageIndex,
});

export type UserMarkReadChannelMessagesRead = Static<typeof UserMarkReadChannelMessagesRead>;
export const UserMarkReadChannelMessagesRead = Type.Object({
    channel_id: Type.BigInt(),
    read_up_to: Type.Optional(MessageIndex),
    threads: Type.Array(UserMarkReadThreadRead),
    date_read_pinned: Type.Optional(Type.BigInt()),
});

export type UserLocalUserIndexResponse = Static<typeof UserLocalUserIndexResponse>;
export const UserLocalUserIndexResponse = Type.Object({
    Success: PrincipalTS,
});

export type UserConfigureWalletArgs = Static<typeof UserConfigureWalletArgs>;
export const UserConfigureWalletArgs = Type.Object({
    config: UserWalletConfig,
});

export type PaymentGate = Static<typeof PaymentGate>;
export const PaymentGate = Type.Object({
    ledger_canister_id: PrincipalTS,
    amount: Type.BigInt(),
    fee: Type.BigInt(),
});

export type AccountICRC1 = Static<typeof AccountICRC1>;
export const AccountICRC1 = Type.Object({
    owner: PrincipalTS,
    subaccount: Type.Optional(
        Type.Tuple([
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
        ])
    ),
});

export type CommunityMembershipUpdates = Static<typeof CommunityMembershipUpdates>;
export const CommunityMembershipUpdates = Type.Object({
    role: Type.Optional(CommunityRole),
    rules_accepted: Type.Optional(Type.Boolean()),
    display_name: OptionUpdateString,
});

export type GiphyContent = Static<typeof GiphyContent>;
export const GiphyContent = Type.Object({
    caption: Type.Optional(Type.String()),
    title: Type.String(),
    desktop: GiphyImageVariant,
    mobile: GiphyImageVariant,
});

export type SnsNeuronGate = Static<typeof SnsNeuronGate>;
export const SnsNeuronGate = Type.Object({
    governance_canister_id: PrincipalTS,
    min_stake_e8s: Type.Optional(Type.BigInt()),
    min_dissolve_delay: Type.Optional(Type.BigInt()),
});

export type MessagePermissions = Static<typeof MessagePermissions>;
export const MessagePermissions = Type.Object({
    default: GroupPermissionRole,
    text: Type.Optional(GroupPermissionRole),
    image: Type.Optional(GroupPermissionRole),
    video: Type.Optional(GroupPermissionRole),
    audio: Type.Optional(GroupPermissionRole),
    file: Type.Optional(GroupPermissionRole),
    poll: Type.Optional(GroupPermissionRole),
    crypto: Type.Optional(GroupPermissionRole),
    giphy: Type.Optional(GroupPermissionRole),
    prize: Type.Optional(GroupPermissionRole),
    p2p_swap: Type.Optional(GroupPermissionRole),
    video_call: Type.Optional(GroupPermissionRole),
    custom: Type.Array(CustomPermission),
});

export type ChatId = Static<typeof ChatId>;
export const ChatId = PrincipalTS;

export type CryptoAccountICRC1 = Static<typeof CryptoAccountICRC1>;
export const CryptoAccountICRC1 = Type.Union([
    Type.Literal("Mint"),
    Type.Object({
        Account: AccountICRC1,
    }),
]);

export type VerifiedCredentialGate = Static<typeof VerifiedCredentialGate>;
export const VerifiedCredentialGate = Type.Object({
    issuer_canister_id: PrincipalTS,
    issuer_origin: Type.String(),
    credential_type: Type.String(),
    credential_name: Type.String(),
    credential_arguments: Type.Record(Type.String(), VerifiedCredentialArgumentValue),
});

export type NnsProposal = Static<typeof NnsProposal>;
export const NnsProposal = Type.Object({
    id: Type.BigInt(),
    topic: Type.Number(),
    proposer: Type.BigInt(),
    created: Type.BigInt(),
    title: Type.String(),
    summary: Type.String(),
    url: Type.String(),
    status: ProposalDecisionStatus,
    reward_status: ProposalRewardStatus,
    tally: Tally,
    deadline: Type.BigInt(),
    payload_text_rendering: Type.Optional(Type.String()),
    last_updated: Type.BigInt(),
});

export type BlobReference = Static<typeof BlobReference>;
export const BlobReference = Type.Object({
    canister_id: PrincipalTS,
    blob_id: Type.BigInt(),
});

export type PendingCryptoTransactionICRC1 = Static<typeof PendingCryptoTransactionICRC1>;
export const PendingCryptoTransactionICRC1 = Type.Object({
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: Type.BigInt(),
    to: AccountICRC1,
    fee: Type.BigInt(),
    memo: Type.Optional(Type.Array(Type.Number())),
    created: Type.BigInt(),
});

export type DiamondMembershipFees = Static<typeof DiamondMembershipFees>;
export const DiamondMembershipFees = Type.Object({
    chat_fees: DiamondMembershipFeesByDuration,
    icp_fees: DiamondMembershipFeesByDuration,
});

export type FileContent = Static<typeof FileContent>;
export const FileContent = Type.Object({
    name: Type.String(),
    caption: Type.Optional(Type.String()),
    mime_type: Type.String(),
    file_size: Type.Number(),
    blob_reference: Type.Optional(BlobReference),
});

export type UserSummaryStable = Static<typeof UserSummaryStable>;
export const UserSummaryStable = Type.Object({
    username: Type.String(),
    display_name: Type.Optional(Type.String()),
    avatar_id: Type.Optional(Type.BigInt()),
    is_bot: Type.Boolean(),
    suspended: Type.Boolean(),
    diamond_membership_status: DiamondMembershipStatus,
    is_unique_person: Type.Boolean(),
    bot_config: Type.Optional(BotConfig),
});

export type ChitEarned = Static<typeof ChitEarned>;
export const ChitEarned = Type.Object({
    amount: Type.Number(),
    timestamp: Type.BigInt(),
    reason: ChitEarnedReason,
});

export type FailedCryptoTransactionICRC1 = Static<typeof FailedCryptoTransactionICRC1>;
export const FailedCryptoTransactionICRC1 = Type.Object({
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: Type.BigInt(),
    fee: Type.BigInt(),
    from: CryptoAccountICRC1,
    to: CryptoAccountICRC1,
    memo: Type.Optional(Type.Array(Type.Number())),
    created: Type.BigInt(),
    error_message: Type.String(),
});

export type TokenBalanceGate = Static<typeof TokenBalanceGate>;
export const TokenBalanceGate = Type.Object({
    ledger_canister_id: PrincipalTS,
    min_balance: Type.BigInt(),
});

export type GateCheckFailedReason = Static<typeof GateCheckFailedReason>;
export const GateCheckFailedReason = Type.Union([
    Type.Literal("NotDiamondMember"),
    Type.Literal("NotLifetimeDiamondMember"),
    Type.Literal("NoUniquePersonProof"),
    Type.Literal("NoSnsNeuronsFound"),
    Type.Literal("NoSnsNeuronsWithRequiredStakeFound"),
    Type.Literal("NoSnsNeuronsWithRequiredDissolveDelayFound"),
    Type.Object({
        PaymentFailed: TransferFromError,
    }),
    Type.Object({
        InsufficientBalance: Type.BigInt(),
    }),
    Type.Object({
        FailedVerifiedCredentialCheck: Type.String(),
    }),
    Type.Literal("Locked"),
    Type.Literal("NotReferredByMember"),
]);

export type TokenInfo = Static<typeof TokenInfo>;
export const TokenInfo = Type.Object({
    token: Cryptocurrency,
    ledger: PrincipalTS,
    decimals: Type.Number(),
    fee: Type.BigInt(),
});

export type CompletedCryptoTransactionNNS = Static<typeof CompletedCryptoTransactionNNS>;
export const CompletedCryptoTransactionNNS = Type.Object({
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: Tokens,
    fee: Tokens,
    from: CryptoAccountNNS,
    to: CryptoAccountNNS,
    memo: Type.BigInt(),
    created: Type.BigInt(),
    transaction_hash: Type.Tuple([
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
    ]),
    block_index: Type.BigInt(),
});

export type AccessTokenType = Static<typeof AccessTokenType>;
export const AccessTokenType = Type.Union([
    Type.Object({
        StartVideoCallV2: VideoCallAccessTokenArgs,
    }),
    Type.Literal("JoinVideoCall"),
    Type.Literal("MarkVideoCallAsEnded"),
]);

export type PendingCryptoTransactionICRC2 = Static<typeof PendingCryptoTransactionICRC2>;
export const PendingCryptoTransactionICRC2 = Type.Object({
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: Type.BigInt(),
    from: AccountICRC1,
    to: AccountICRC1,
    fee: Type.BigInt(),
    memo: Type.Optional(Type.Array(Type.Number())),
    created: Type.BigInt(),
});

export type AudioContent = Static<typeof AudioContent>;
export const AudioContent = Type.Object({
    caption: Type.Optional(Type.String()),
    mime_type: Type.String(),
    blob_reference: Type.Optional(BlobReference),
});

export type ImageContent = Static<typeof ImageContent>;
export const ImageContent = Type.Object({
    width: Type.Number(),
    height: Type.Number(),
    thumbnail_data: ThumbnailData,
    caption: Type.Optional(Type.String()),
    mime_type: Type.String(),
    blob_reference: Type.Optional(BlobReference),
});

export type UserId = Static<typeof UserId>;
export const UserId = PrincipalTS;

export type CommunityId = Static<typeof CommunityId>;
export const CommunityId = PrincipalTS;

export type CompletedCryptoTransactionICRC1 = Static<typeof CompletedCryptoTransactionICRC1>;
export const CompletedCryptoTransactionICRC1 = Type.Object({
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: Type.BigInt(),
    from: CryptoAccountICRC1,
    to: CryptoAccountICRC1,
    fee: Type.BigInt(),
    memo: Type.Optional(Type.Array(Type.Number())),
    created: Type.BigInt(),
    block_index: Type.BigInt(),
});

export type UserOrAccount = Static<typeof UserOrAccount>;
export const UserOrAccount = Type.Union([
    Type.Object({
        User: UserId,
    }),
    Type.Object({
        Account: Type.Tuple([
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
            Type.Number(),
        ]),
    }),
]);

export type VerifiedCredentialGateArgs = Static<typeof VerifiedCredentialGateArgs>;
export const VerifiedCredentialGateArgs = Type.Object({
    user_ii_principal: PrincipalTS,
    credential_jwt: Type.String(),
    credential_jwts: Type.Array(Type.String()),
    ii_origin: Type.String(),
});

export type GovernanceProposalsSubtype = Static<typeof GovernanceProposalsSubtype>;
export const GovernanceProposalsSubtype = Type.Object({
    is_nns: Type.Boolean(),
    governance_canister_id: PrincipalTS,
});

export type SnsProposal = Static<typeof SnsProposal>;
export const SnsProposal = Type.Object({
    id: Type.BigInt(),
    action: Type.BigInt(),
    proposer: Type.Tuple([
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
    ]),
    created: Type.BigInt(),
    title: Type.String(),
    summary: Type.String(),
    url: Type.String(),
    status: ProposalDecisionStatus,
    reward_status: ProposalRewardStatus,
    tally: Tally,
    deadline: Type.BigInt(),
    payload_text_rendering: Type.Optional(Type.String()),
    minimum_yes_proportion_of_total: Type.Number(),
    minimum_yes_proportion_of_exercised: Type.Number(),
    last_updated: Type.BigInt(),
});

export type UsersBlocked = Static<typeof UsersBlocked>;
export const UsersBlocked = Type.Object({
    user_ids: Type.Array(UserId),
    blocked_by: UserId,
});

export type User = Static<typeof User>;
export const User = Type.Object({
    user_id: UserId,
    username: Type.String(),
});

export type MessageReport = Static<typeof MessageReport>;
export const MessageReport = Type.Object({
    reported_by: UserId,
    timestamp: Type.BigInt(),
    reason_code: Type.Number(),
    notes: Type.Optional(Type.String()),
});

export type ThreadSummary = Static<typeof ThreadSummary>;
export const ThreadSummary = Type.Object({
    participant_ids: Type.Array(UserId),
    followed_by_me: Type.Boolean(),
    reply_count: Type.Number(),
    latest_event_index: EventIndex,
    latest_event_timestamp: Type.BigInt(),
});

export type SuspensionDetails = Static<typeof SuspensionDetails>;
export const SuspensionDetails = Type.Object({
    reason: Type.String(),
    action: SuspensionAction,
    suspended_by: UserId,
});

export type DiamondMembershipDetails = Static<typeof DiamondMembershipDetails>;
export const DiamondMembershipDetails = Type.Object({
    expires_at: Type.BigInt(),
    pay_in_chat: Type.Boolean(),
    subscription: DiamondMembershipSubscription,
});

export type MemberLeft = Static<typeof MemberLeft>;
export const MemberLeft = Type.Object({
    user_id: UserId,
});

export type GroupIndexRecommendedGroupsArgs = Static<typeof GroupIndexRecommendedGroupsArgs>;
export const GroupIndexRecommendedGroupsArgs = Type.Object({
    count: Type.Number(),
    exclusions: Type.Array(ChatId),
});

export type GroupIndexFreezeGroupArgs = Static<typeof GroupIndexFreezeGroupArgs>;
export const GroupIndexFreezeGroupArgs = Type.Object({
    chat_id: ChatId,
    reason: Type.Optional(Type.String()),
    suspend_members: Type.Optional(GroupIndexFreezeGroupSuspensionDetails),
});

export type GroupIndexAddHotGroupExclusionArgs = Static<typeof GroupIndexAddHotGroupExclusionArgs>;
export const GroupIndexAddHotGroupExclusionArgs = Type.Object({
    chat_id: ChatId,
});

export type GroupIndexLookupChannelByGroupIdSuccessResult = Static<
    typeof GroupIndexLookupChannelByGroupIdSuccessResult
>;
export const GroupIndexLookupChannelByGroupIdSuccessResult = Type.Object({
    community_id: CommunityId,
    channel_id: Type.BigInt(),
});

export type GroupIndexLookupChannelByGroupIdResponse = Static<
    typeof GroupIndexLookupChannelByGroupIdResponse
>;
export const GroupIndexLookupChannelByGroupIdResponse = Type.Union([
    Type.Object({
        Success: GroupIndexLookupChannelByGroupIdSuccessResult,
    }),
    Type.Literal("NotFound"),
]);

export type GroupIndexLookupChannelByGroupIdArgs = Static<
    typeof GroupIndexLookupChannelByGroupIdArgs
>;
export const GroupIndexLookupChannelByGroupIdArgs = Type.Object({
    group_id: ChatId,
});

export type GroupIndexUnfreezeCommunityArgs = Static<typeof GroupIndexUnfreezeCommunityArgs>;
export const GroupIndexUnfreezeCommunityArgs = Type.Object({
    community_id: CommunityId,
});

export type GroupIndexFreezeCommunityArgs = Static<typeof GroupIndexFreezeCommunityArgs>;
export const GroupIndexFreezeCommunityArgs = Type.Object({
    community_id: CommunityId,
    reason: Type.Optional(Type.String()),
    suspend_members: Type.Optional(GroupIndexFreezeCommunitySuspensionDetails),
});

export type GroupIndexDeleteFrozenGroupArgs = Static<typeof GroupIndexDeleteFrozenGroupArgs>;
export const GroupIndexDeleteFrozenGroupArgs = Type.Object({
    chat_id: ChatId,
});

export type GroupIndexSetCommunityModerationFlagsArgs = Static<
    typeof GroupIndexSetCommunityModerationFlagsArgs
>;
export const GroupIndexSetCommunityModerationFlagsArgs = Type.Object({
    community_id: CommunityId,
    flags: Type.Number(),
});

export type GroupIndexRemoveHotGroupExclusionArgs = Static<
    typeof GroupIndexRemoveHotGroupExclusionArgs
>;
export const GroupIndexRemoveHotGroupExclusionArgs = Type.Object({
    chat_id: ChatId,
});

export type GroupIndexActiveGroupsArgs = Static<typeof GroupIndexActiveGroupsArgs>;
export const GroupIndexActiveGroupsArgs = Type.Object({
    group_ids: Type.Array(ChatId),
    community_ids: Type.Array(CommunityId),
    active_since: Type.Optional(Type.BigInt()),
});

export type GroupIndexUnfreezeGroupArgs = Static<typeof GroupIndexUnfreezeGroupArgs>;
export const GroupIndexUnfreezeGroupArgs = Type.Object({
    chat_id: ChatId,
});

export type StorageIndexCanForwardResponse = Static<typeof StorageIndexCanForwardResponse>;
export const StorageIndexCanForwardResponse = Type.Union([
    Type.Object({
        Success: StorageIndexProjectedAllowance,
    }),
    Type.Object({
        AllowanceExceeded: StorageIndexProjectedAllowance,
    }),
    Type.Literal("UserNotFound"),
]);

export type RegistryUpdatesSuccessResult = Static<typeof RegistryUpdatesSuccessResult>;
export const RegistryUpdatesSuccessResult = Type.Object({
    last_updated: Type.BigInt(),
    token_details: Type.Optional(Type.Array(RegistryTokenDetails)),
    nervous_system_details: Type.Array(RegistryNervousSystemSummary),
    message_filters_added: Type.Array(RegistryMessageFilterSummary),
    message_filters_removed: Type.Array(Type.BigInt()),
});

export type RegistryUpdatesResponse = Static<typeof RegistryUpdatesResponse>;
export const RegistryUpdatesResponse = Type.Union([
    Type.Object({
        Success: RegistryUpdatesSuccessResult,
    }),
    Type.Literal("SuccessNoUpdates"),
]);

export type UserIndexDiamondMembershipFeesResponse = Static<
    typeof UserIndexDiamondMembershipFeesResponse
>;
export const UserIndexDiamondMembershipFeesResponse = Type.Object({
    Success: Type.Array(UserIndexDiamondMembershipFeesDiamondMembershipFees),
});

export type UserIndexUsersChitResponse = Static<typeof UserIndexUsersChitResponse>;
export const UserIndexUsersChitResponse = Type.Object({
    Success: UserIndexUsersChitSuccessResult,
});

export type UserIndexUsersChitArgs = Static<typeof UserIndexUsersChitArgs>;
export const UserIndexUsersChitArgs = Type.Object({
    users: Type.Array(UserId),
    year: Type.Number(),
    month: Type.Number(),
});

export type UserIndexSuspendUserArgs = Static<typeof UserIndexSuspendUserArgs>;
export const UserIndexSuspendUserArgs = Type.Object({
    user_id: UserId,
    duration: Type.Optional(Type.BigInt()),
    reason: Type.String(),
});

export type UserIndexPlatformOperatorsSuccessResult = Static<
    typeof UserIndexPlatformOperatorsSuccessResult
>;
export const UserIndexPlatformOperatorsSuccessResult = Type.Object({
    users: Type.Array(UserId),
});

export type UserIndexPlatformOperatorsResponse = Static<typeof UserIndexPlatformOperatorsResponse>;
export const UserIndexPlatformOperatorsResponse = Type.Object({
    Success: UserIndexPlatformOperatorsSuccessResult,
});

export type UserIndexPlatformModeratorsSuccessResult = Static<
    typeof UserIndexPlatformModeratorsSuccessResult
>;
export const UserIndexPlatformModeratorsSuccessResult = Type.Object({
    users: Type.Array(UserId),
});

export type UserIndexSuspectedBotsSuccessResult = Static<
    typeof UserIndexSuspectedBotsSuccessResult
>;
export const UserIndexSuspectedBotsSuccessResult = Type.Object({
    users: Type.Array(UserId),
});

export type UserIndexSuspectedBotsArgs = Static<typeof UserIndexSuspectedBotsArgs>;
export const UserIndexSuspectedBotsArgs = Type.Object({
    after: Type.Optional(UserId),
    count: Type.Number(),
});

export type UserIndexExternalAchievementsSuccessResult = Static<
    typeof UserIndexExternalAchievementsSuccessResult
>;
export const UserIndexExternalAchievementsSuccessResult = Type.Object({
    last_updated: Type.BigInt(),
    achievements_added: Type.Array(UserIndexExternalAchievementsExternalAchievement),
    achievements_removed: Type.Array(UserIndexExternalAchievementsExternalAchievement),
});

export type UserIndexExternalAchievementsResponse = Static<
    typeof UserIndexExternalAchievementsResponse
>;
export const UserIndexExternalAchievementsResponse = Type.Union([
    Type.Object({
        Success: UserIndexExternalAchievementsSuccessResult,
    }),
    Type.Literal("SuccessNoUpdates"),
]);

export type UserIndexUserArgs = Static<typeof UserIndexUserArgs>;
export const UserIndexUserArgs = Type.Object({
    user_id: Type.Optional(UserId),
    username: Type.Optional(Type.String()),
});

export type UserIndexReferralMetricsResponse = Static<typeof UserIndexReferralMetricsResponse>;
export const UserIndexReferralMetricsResponse = Type.Object({
    Success: UserIndexReferralMetricsReferralMetrics,
});

export type UserIndexUnsuspendUserArgs = Static<typeof UserIndexUnsuspendUserArgs>;
export const UserIndexUnsuspendUserArgs = Type.Object({
    user_id: UserId,
});

export type UserIndexUsersUserGroup = Static<typeof UserIndexUsersUserGroup>;
export const UserIndexUsersUserGroup = Type.Object({
    users: Type.Array(UserId),
    updated_since: Type.BigInt(),
});

export type UserIndexUsersArgs = Static<typeof UserIndexUsersArgs>;
export const UserIndexUsersArgs = Type.Object({
    user_groups: Type.Array(UserIndexUsersUserGroup),
    users_suspended_since: Type.Optional(Type.BigInt()),
});

export type UserIndexChitLeaderboardChitUserBalance = Static<
    typeof UserIndexChitLeaderboardChitUserBalance
>;
export const UserIndexChitLeaderboardChitUserBalance = Type.Object({
    user_id: UserId,
    username: Type.String(),
    balance: Type.Number(),
});

export type UserIndexSetDiamondMembershipFeesArgs = Static<
    typeof UserIndexSetDiamondMembershipFeesArgs
>;
export const UserIndexSetDiamondMembershipFeesArgs = Type.Object({
    fees: DiamondMembershipFees,
});

export type UserIndexPlatformModeratorsGroupResponse = Static<
    typeof UserIndexPlatformModeratorsGroupResponse
>;
export const UserIndexPlatformModeratorsGroupResponse = Type.Object({
    Success: ChatId,
});

export type UserIndexReportedMessagesArgs = Static<typeof UserIndexReportedMessagesArgs>;
export const UserIndexReportedMessagesArgs = Type.Object({
    user_id: Type.Optional(UserId),
});

export type LocalUserIndexInviteUsersToCommunityArgs = Static<
    typeof LocalUserIndexInviteUsersToCommunityArgs
>;
export const LocalUserIndexInviteUsersToCommunityArgs = Type.Object({
    community_id: CommunityId,
    user_ids: Type.Array(UserId),
    caller_username: Type.String(),
});

export type LocalUserIndexInviteUsersToGroupArgs = Static<
    typeof LocalUserIndexInviteUsersToGroupArgs
>;
export const LocalUserIndexInviteUsersToGroupArgs = Type.Object({
    group_id: ChatId,
    user_ids: Type.Array(UserId),
    caller_username: Type.String(),
    correlation_id: Type.BigInt(),
});

export type LocalUserIndexJoinGroupArgs = Static<typeof LocalUserIndexJoinGroupArgs>;
export const LocalUserIndexJoinGroupArgs = Type.Object({
    chat_id: ChatId,
    invite_code: Type.Optional(Type.BigInt()),
    verified_credential_args: Type.Optional(VerifiedCredentialGateArgs),
    correlation_id: Type.BigInt(),
});

export type LocalUserIndexRegisterUserSuccessResult = Static<
    typeof LocalUserIndexRegisterUserSuccessResult
>;
export const LocalUserIndexRegisterUserSuccessResult = Type.Object({
    user_id: UserId,
    icp_account: Type.Tuple([
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
    ]),
});

export type LocalUserIndexChatEventsEventsContext = Static<
    typeof LocalUserIndexChatEventsEventsContext
>;
export const LocalUserIndexChatEventsEventsContext = Type.Union([
    Type.Object({
        Direct: UserId,
    }),
    Type.Object({
        Group: Type.Tuple([ChatId, Type.Union([MessageIndex, Type.Null()])]),
    }),
    Type.Object({
        Channel: Type.Tuple([CommunityId, Type.BigInt(), Type.Union([MessageIndex, Type.Null()])]),
    }),
]);

export type LocalUserIndexJoinCommunityArgs = Static<typeof LocalUserIndexJoinCommunityArgs>;
export const LocalUserIndexJoinCommunityArgs = Type.Object({
    community_id: CommunityId,
    invite_code: Type.Optional(Type.BigInt()),
    referred_by: Type.Optional(UserId),
    verified_credential_args: Type.Optional(VerifiedCredentialGateArgs),
});

export type LocalUserIndexJoinChannelArgs = Static<typeof LocalUserIndexJoinChannelArgs>;
export const LocalUserIndexJoinChannelArgs = Type.Object({
    community_id: CommunityId,
    channel_id: Type.BigInt(),
    invite_code: Type.Optional(Type.BigInt()),
    referred_by: Type.Optional(UserId),
    verified_credential_args: Type.Optional(VerifiedCredentialGateArgs),
});

export type LocalUserIndexInviteUsersToChannelFailedResult = Static<
    typeof LocalUserIndexInviteUsersToChannelFailedResult
>;
export const LocalUserIndexInviteUsersToChannelFailedResult = Type.Object({
    failed_users: Type.Array(UserId),
});

export type LocalUserIndexInviteUsersToChannelPartialSuccessResult = Static<
    typeof LocalUserIndexInviteUsersToChannelPartialSuccessResult
>;
export const LocalUserIndexInviteUsersToChannelPartialSuccessResult = Type.Object({
    failed_users: Type.Array(UserId),
});

export type LocalUserIndexInviteUsersToChannelArgs = Static<
    typeof LocalUserIndexInviteUsersToChannelArgs
>;
export const LocalUserIndexInviteUsersToChannelArgs = Type.Object({
    community_id: CommunityId,
    channel_id: Type.BigInt(),
    user_ids: Type.Array(UserId),
    caller_username: Type.String(),
});

export type LocalUserIndexGroupAndCommunitySummaryUpdatesArgs = Static<
    typeof LocalUserIndexGroupAndCommunitySummaryUpdatesArgs
>;
export const LocalUserIndexGroupAndCommunitySummaryUpdatesArgs = Type.Object({
    requests: Type.Array(LocalUserIndexGroupAndCommunitySummaryUpdatesSummaryUpdatesArgs),
});

export type StorageBucketDeleteFilesResponse = Static<typeof StorageBucketDeleteFilesResponse>;
export const StorageBucketDeleteFilesResponse = Type.Object({
    success: Type.Array(Type.BigInt()),
    failures: Type.Array(StorageBucketDeleteFilesDeleteFileFailure),
});

export type ProposalsBotCommonTransferSnsTreasuryFunds = Static<
    typeof ProposalsBotCommonTransferSnsTreasuryFunds
>;
export const ProposalsBotCommonTransferSnsTreasuryFunds = Type.Object({
    treasury: ProposalsBotCommonTreasury,
    amount: Type.BigInt(),
    to: AccountICRC1,
    memo: Type.Optional(Type.BigInt()),
});

export type OnlineUsersLastOnlineArgs = Static<typeof OnlineUsersLastOnlineArgs>;
export const OnlineUsersLastOnlineArgs = Type.Object({
    user_ids: Type.Array(UserId),
});

export type OnlineUsersLastOnlineUserLastOnline = Static<
    typeof OnlineUsersLastOnlineUserLastOnline
>;
export const OnlineUsersLastOnlineUserLastOnline = Type.Object({
    user_id: UserId,
    duration_since_last_online: Type.BigInt(),
});

export type UserSearchMessagesArgs = Static<typeof UserSearchMessagesArgs>;
export const UserSearchMessagesArgs = Type.Object({
    user_id: UserId,
    search_term: Type.String(),
    max_results: Type.Number(),
});

export type UserCommunitySummaryUpdates = Static<typeof UserCommunitySummaryUpdates>;
export const UserCommunitySummaryUpdates = Type.Object({
    community_id: CommunityId,
    channels: Type.Array(UserChannelSummaryUpdates),
    index: Type.Optional(Type.Number()),
    archived: Type.Optional(Type.Boolean()),
    pinned: Type.Optional(Type.Array(Type.BigInt())),
});

export type UserGroupChatSummary = Static<typeof UserGroupChatSummary>;
export const UserGroupChatSummary = Type.Object({
    chat_id: ChatId,
    local_user_index_canister_id: PrincipalTS,
    read_by_me_up_to: Type.Optional(MessageIndex),
    threads_read: Type.Record(MessageIndex, MessageIndex),
    archived: Type.Boolean(),
    date_read_pinned: Type.Optional(Type.BigInt()),
});

export type UserJoinVideoCallArgs = Static<typeof UserJoinVideoCallArgs>;
export const UserJoinVideoCallArgs = Type.Object({
    user_id: UserId,
    message_id: MessageId,
});

export type UserCreateGroupSuccessResult = Static<typeof UserCreateGroupSuccessResult>;
export const UserCreateGroupSuccessResult = Type.Object({
    chat_id: ChatId,
});

export type UserDeletedMessageArgs = Static<typeof UserDeletedMessageArgs>;
export const UserDeletedMessageArgs = Type.Object({
    user_id: UserId,
    message_id: MessageId,
});

export type UserCancelP2pSwapArgs = Static<typeof UserCancelP2pSwapArgs>;
export const UserCancelP2pSwapArgs = Type.Object({
    user_id: UserId,
    message_id: MessageId,
});

export type UserCommunitySummary = Static<typeof UserCommunitySummary>;
export const UserCommunitySummary = Type.Object({
    community_id: CommunityId,
    local_user_index_canister_id: PrincipalTS,
    channels: Type.Array(UserChannelSummary),
    index: Type.Number(),
    archived: Type.Boolean(),
    pinned: Type.Array(Type.BigInt()),
});

export type UserSwapTokensExchangeArgs = Static<typeof UserSwapTokensExchangeArgs>;
export const UserSwapTokensExchangeArgs = Type.Union([
    Type.Object({
        ICPSwap: UserSwapTokensICPSwapArgs,
    }),
    Type.Object({
        Sonic: UserSwapTokensICPSwapArgs,
    }),
]);

export type UserSwapTokensArgs = Static<typeof UserSwapTokensArgs>;
export const UserSwapTokensArgs = Type.Object({
    swap_id: Type.BigInt(),
    input_token: TokenInfo,
    output_token: TokenInfo,
    input_amount: Type.BigInt(),
    exchange_args: UserSwapTokensExchangeArgs,
    min_output_amount: Type.BigInt(),
    pin: Type.Optional(Type.String()),
});

export type UserUndeleteMessagesArgs = Static<typeof UserUndeleteMessagesArgs>;
export const UserUndeleteMessagesArgs = Type.Object({
    user_id: UserId,
    thread_root_message_index: Type.Optional(MessageIndex),
    message_ids: Type.Array(MessageId),
    correlation_id: Type.BigInt(),
});

export type UserGroupChatSummaryUpdates = Static<typeof UserGroupChatSummaryUpdates>;
export const UserGroupChatSummaryUpdates = Type.Object({
    chat_id: ChatId,
    read_by_me_up_to: Type.Optional(MessageIndex),
    threads_read: Type.Record(MessageIndex, MessageIndex),
    archived: Type.Optional(Type.Boolean()),
    date_read_pinned: Type.Optional(Type.BigInt()),
});

export type UserUnblockUserArgs = Static<typeof UserUnblockUserArgs>;
export const UserUnblockUserArgs = Type.Object({
    user_id: UserId,
});

export type UserAddHotGroupExclusionsArgs = Static<typeof UserAddHotGroupExclusionsArgs>;
export const UserAddHotGroupExclusionsArgs = Type.Object({
    groups: Type.Array(ChatId),
    duration: Type.Optional(Type.BigInt()),
});

export type UserContactsContact = Static<typeof UserContactsContact>;
export const UserContactsContact = Type.Object({
    user_id: UserId,
    nickname: Type.Optional(Type.String()),
});

export type UserContactsSuccessResult = Static<typeof UserContactsSuccessResult>;
export const UserContactsSuccessResult = Type.Object({
    contacts: Type.Array(UserContactsContact),
});

export type UserEventsWindowArgs = Static<typeof UserEventsWindowArgs>;
export const UserEventsWindowArgs = Type.Object({
    user_id: UserId,
    thread_root_message_index: Type.Optional(MessageIndex),
    mid_point: MessageIndex,
    max_messages: Type.Number(),
    max_events: Type.Number(),
    latest_known_update: Type.Optional(Type.BigInt()),
});

export type UserDeleteDirectChatArgs = Static<typeof UserDeleteDirectChatArgs>;
export const UserDeleteDirectChatArgs = Type.Object({
    user_id: UserId,
    block_user: Type.Boolean(),
});

export type UserInitialStateCommunitiesInitial = Static<typeof UserInitialStateCommunitiesInitial>;
export const UserInitialStateCommunitiesInitial = Type.Object({
    summaries: Type.Array(UserCommunitySummary),
});

export type UserInitialStateGroupChatsInitial = Static<typeof UserInitialStateGroupChatsInitial>;
export const UserInitialStateGroupChatsInitial = Type.Object({
    summaries: Type.Array(UserGroupChatSummary),
    pinned: Type.Array(ChatId),
});

export type UserDeleteMessagesArgs = Static<typeof UserDeleteMessagesArgs>;
export const UserDeleteMessagesArgs = Type.Object({
    user_id: UserId,
    thread_root_message_index: Type.Optional(MessageIndex),
    message_ids: Type.Array(MessageId),
    correlation_id: Type.BigInt(),
});

export type UserHotGroupExclusionsResponse = Static<typeof UserHotGroupExclusionsResponse>;
export const UserHotGroupExclusionsResponse = Type.Object({
    Success: Type.Array(ChatId),
});

export type UserUpdatesGroupChatsUpdates = Static<typeof UserUpdatesGroupChatsUpdates>;
export const UserUpdatesGroupChatsUpdates = Type.Object({
    added: Type.Array(UserGroupChatSummary),
    updated: Type.Array(UserGroupChatSummaryUpdates),
    removed: Type.Array(ChatId),
    pinned: Type.Optional(Type.Array(ChatId)),
});

export type UserUpdatesCommunitiesUpdates = Static<typeof UserUpdatesCommunitiesUpdates>;
export const UserUpdatesCommunitiesUpdates = Type.Object({
    added: Type.Array(UserCommunitySummary),
    updated: Type.Array(UserCommunitySummaryUpdates),
    removed: Type.Array(CommunityId),
});

export type UserLeaveGroupArgs = Static<typeof UserLeaveGroupArgs>;
export const UserLeaveGroupArgs = Type.Object({
    chat_id: ChatId,
    correlation_id: Type.BigInt(),
});

export type UserMuteNotificationsArgs = Static<typeof UserMuteNotificationsArgs>;
export const UserMuteNotificationsArgs = Type.Object({
    chat_id: ChatId,
});

export type UserMessagesByMessageIndexArgs = Static<typeof UserMessagesByMessageIndexArgs>;
export const UserMessagesByMessageIndexArgs = Type.Object({
    user_id: UserId,
    thread_root_message_index: Type.Optional(MessageIndex),
    messages: Type.Array(MessageIndex),
    latest_known_update: Type.Optional(Type.BigInt()),
});

export type UserApproveTransferArgs = Static<typeof UserApproveTransferArgs>;
export const UserApproveTransferArgs = Type.Object({
    spender: AccountICRC1,
    ledger_canister_id: PrincipalTS,
    amount: Type.BigInt(),
    expires_in: Type.Optional(Type.BigInt()),
    pin: Type.Optional(Type.String()),
});

export type UserDeleteGroupArgs = Static<typeof UserDeleteGroupArgs>;
export const UserDeleteGroupArgs = Type.Object({
    chat_id: ChatId,
});

export type UserEndVideoCallArgs = Static<typeof UserEndVideoCallArgs>;
export const UserEndVideoCallArgs = Type.Object({
    user_id: UserId,
    message_id: MessageId,
});

export type UserTokenSwapsTokenSwap = Static<typeof UserTokenSwapsTokenSwap>;
export const UserTokenSwapsTokenSwap = Type.Object({
    args: UserSwapTokensArgs,
    started: Type.BigInt(),
    transfer: Type.Optional(
        Type.Union([
            Type.Object({
                Ok: Type.BigInt(),
            }),
            Type.Object({
                Err: Type.String(),
            }),
        ])
    ),
    notified_dex: Type.Optional(
        Type.Union([
            Type.Object({
                Ok: Type.Null(),
            }),
            Type.Object({
                Err: Type.String(),
            }),
        ])
    ),
    amount_swapped: Type.Optional(
        Type.Union([
            Type.Object({
                Ok: Type.Union([
                    Type.Object({
                        Ok: Type.BigInt(),
                    }),
                    Type.Object({
                        Err: Type.String(),
                    }),
                ]),
            }),
            Type.Object({
                Err: Type.String(),
            }),
        ])
    ),
    withdrawn_from_dex: Type.Optional(
        Type.Union([
            Type.Object({
                Ok: Type.BigInt(),
            }),
            Type.Object({
                Err: Type.String(),
            }),
        ])
    ),
    success: Type.Optional(Type.Boolean()),
});

export type UserTokenSwapsSuccessResult = Static<typeof UserTokenSwapsSuccessResult>;
export const UserTokenSwapsSuccessResult = Type.Object({
    total: Type.Number(),
    swaps: Type.Array(UserTokenSwapsTokenSwap),
});

export type UserRemoveReactionArgs = Static<typeof UserRemoveReactionArgs>;
export const UserRemoveReactionArgs = Type.Object({
    user_id: UserId,
    thread_root_message_index: Type.Optional(MessageIndex),
    message_id: MessageId,
    reaction: Reaction,
    correlation_id: Type.BigInt(),
});

export type UserSetContactOptionalContact = Static<typeof UserSetContactOptionalContact>;
export const UserSetContactOptionalContact = Type.Object({
    user_id: UserId,
    nickname: OptionUpdateString,
});

export type UserSetContactArgs = Static<typeof UserSetContactArgs>;
export const UserSetContactArgs = Type.Object({
    contact: UserSetContactOptionalContact,
});

export type UserAddReactionArgs = Static<typeof UserAddReactionArgs>;
export const UserAddReactionArgs = Type.Object({
    user_id: UserId,
    thread_root_message_index: Type.Optional(MessageIndex),
    message_id: MessageId,
    reaction: Reaction,
    correlation_id: Type.BigInt(),
});

export type UserReferral = Static<typeof UserReferral>;
export const UserReferral = Type.Object({
    user_id: UserId,
    status: ReferralStatus,
});

export type UserBlockUserArgs = Static<typeof UserBlockUserArgs>;
export const UserBlockUserArgs = Type.Object({
    user_id: UserId,
});

export type UserSetCommunityIndexesArgs = Static<typeof UserSetCommunityIndexesArgs>;
export const UserSetCommunityIndexesArgs = Type.Object({
    indexes: Type.Array(Type.Tuple([CommunityId, Type.Number()])),
});

export type UserStartVideoCallArgs = Static<typeof UserStartVideoCallArgs>;
export const UserStartVideoCallArgs = Type.Object({
    message_id: MessageId,
    initiator: UserId,
    initiator_username: Type.String(),
    initiator_display_name: Type.Optional(Type.String()),
    initiator_avatar_id: Type.Optional(Type.BigInt()),
    max_duration: Type.Optional(Type.BigInt()),
    call_type: VideoCallType,
});

export type UserSendMessageSuccessResult = Static<typeof UserSendMessageSuccessResult>;
export const UserSendMessageSuccessResult = Type.Object({
    chat_id: ChatId,
    event_index: EventIndex,
    message_index: MessageIndex,
    timestamp: Type.BigInt(),
    expires_at: Type.Optional(Type.BigInt()),
});

export type UserEventsByIndexArgs = Static<typeof UserEventsByIndexArgs>;
export const UserEventsByIndexArgs = Type.Object({
    user_id: UserId,
    thread_root_message_index: Type.Optional(MessageIndex),
    events: Type.Array(EventIndex),
    latest_known_update: Type.Optional(Type.BigInt()),
});

export type UserCreateCommunitySuccessResult = Static<typeof UserCreateCommunitySuccessResult>;
export const UserCreateCommunitySuccessResult = Type.Object({
    community_id: CommunityId,
});

export type UserCreateCommunityResponse = Static<typeof UserCreateCommunityResponse>;
export const UserCreateCommunityResponse = Type.Union([
    Type.Object({
        Success: UserCreateCommunitySuccessResult,
    }),
    Type.Object({
        NameTooShort: FieldTooShortResult,
    }),
    Type.Object({
        NameTooLong: FieldTooLongResult,
    }),
    Type.Literal("NameReserved"),
    Type.Object({
        DescriptionTooLong: FieldTooLongResult,
    }),
    Type.Object({
        RulesTooShort: FieldTooShortResult,
    }),
    Type.Object({
        RulesTooLong: FieldTooLongResult,
    }),
    Type.Object({
        AvatarTooBig: FieldTooLongResult,
    }),
    Type.Object({
        BannerTooBig: FieldTooLongResult,
    }),
    Type.Literal("AccessGateInvalid"),
    Type.Object({
        MaxCommunitiesCreated: Type.Number(),
    }),
    Type.Literal("NameTaken"),
    Type.Literal("Throttled"),
    Type.Literal("UserSuspended"),
    Type.Literal("Unauthorized"),
    Type.Literal("DefaultChannelsInvalid"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type UserMarkReadChatMessagesRead = Static<typeof UserMarkReadChatMessagesRead>;
export const UserMarkReadChatMessagesRead = Type.Object({
    chat_id: ChatId,
    read_up_to: Type.Optional(MessageIndex),
    threads: Type.Array(UserMarkReadThreadRead),
    date_read_pinned: Type.Optional(Type.BigInt()),
});

export type UserMarkReadCommunityMessagesRead = Static<typeof UserMarkReadCommunityMessagesRead>;
export const UserMarkReadCommunityMessagesRead = Type.Object({
    community_id: CommunityId,
    channels_read: Type.Array(UserMarkReadChannelMessagesRead),
});

export type UserEventsArgs = Static<typeof UserEventsArgs>;
export const UserEventsArgs = Type.Object({
    user_id: UserId,
    thread_root_message_index: Type.Optional(MessageIndex),
    start_index: EventIndex,
    ascending: Type.Boolean(),
    max_messages: Type.Number(),
    max_events: Type.Number(),
    latest_known_update: Type.Optional(Type.BigInt()),
});

export type UserLeaveCommunityArgs = Static<typeof UserLeaveCommunityArgs>;
export const UserLeaveCommunityArgs = Type.Object({
    community_id: CommunityId,
});

export type UserAcceptP2pSwapArgs = Static<typeof UserAcceptP2pSwapArgs>;
export const UserAcceptP2pSwapArgs = Type.Object({
    user_id: UserId,
    thread_root_message_index: Type.Optional(MessageIndex),
    message_id: MessageId,
    pin: Type.Optional(Type.String()),
});

export type UserDeleteCommunityArgs = Static<typeof UserDeleteCommunityArgs>;
export const UserDeleteCommunityArgs = Type.Object({
    community_id: CommunityId,
});

export type UserChitEventsSuccessResult = Static<typeof UserChitEventsSuccessResult>;
export const UserChitEventsSuccessResult = Type.Object({
    events: Type.Array(ChitEarned),
    total: Type.Number(),
});

export type UserReportMessageArgs = Static<typeof UserReportMessageArgs>;
export const UserReportMessageArgs = Type.Object({
    them: UserId,
    thread_root_message_index: Type.Optional(MessageIndex),
    message_id: MessageId,
    delete: Type.Boolean(),
});

export type VideoContent = Static<typeof VideoContent>;
export const VideoContent = Type.Object({
    width: Type.Number(),
    height: Type.Number(),
    thumbnail_data: ThumbnailData,
    caption: Type.Optional(Type.String()),
    mime_type: Type.String(),
    image_blob_reference: Type.Optional(BlobReference),
    video_blob_reference: Type.Optional(BlobReference),
});

export type GroupPermissions = Static<typeof GroupPermissions>;
export const GroupPermissions = Type.Object({
    change_roles: GroupPermissionRole,
    update_group: GroupPermissionRole,
    add_members: GroupPermissionRole,
    invite_users: GroupPermissionRole,
    remove_members: GroupPermissionRole,
    delete_messages: GroupPermissionRole,
    pin_messages: GroupPermissionRole,
    react_to_messages: GroupPermissionRole,
    mention_all_members: GroupPermissionRole,
    start_video_call: GroupPermissionRole,
    message_permissions: MessagePermissions,
    thread_permissions: Type.Optional(MessagePermissions),
});

export type GroupSubtype = Static<typeof GroupSubtype>;
export const GroupSubtype = Type.Object({
    GovernanceProposals: GovernanceProposalsSubtype,
});

export type P2PSwapReserved = Static<typeof P2PSwapReserved>;
export const P2PSwapReserved = Type.Object({
    reserved_by: UserId,
});

export type UserSummary = Static<typeof UserSummary>;
export const UserSummary = Type.Object({
    user_id: UserId,
    username: Type.String(),
    display_name: Type.Optional(Type.String()),
    avatar_id: Type.Optional(Type.BigInt()),
    is_bot: Type.Boolean(),
    suspended: Type.Boolean(),
    diamond_member: Type.Boolean(),
    diamond_membership_status: DiamondMembershipStatus,
    total_chit_earned: Type.Number(),
    chit_balance: Type.Number(),
    streak: Type.Number(),
    is_unique_person: Type.Boolean(),
});

export type CompletedCryptoTransactionICRC2 = Static<typeof CompletedCryptoTransactionICRC2>;
export const CompletedCryptoTransactionICRC2 = Type.Object({
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: Type.BigInt(),
    spender: UserId,
    from: CryptoAccountICRC1,
    to: CryptoAccountICRC1,
    fee: Type.BigInt(),
    memo: Type.Optional(Type.Array(Type.Number())),
    created: Type.BigInt(),
    block_index: Type.BigInt(),
});

export type AvatarChanged = Static<typeof AvatarChanged>;
export const AvatarChanged = Type.Object({
    new_avatar: Type.Optional(Type.BigInt()),
    previous_avatar: Type.Optional(Type.BigInt()),
    changed_by: UserId,
});

export type MembersRemoved = Static<typeof MembersRemoved>;
export const MembersRemoved = Type.Object({
    user_ids: Type.Array(UserId),
    removed_by: UserId,
});

export type SwapStatusErrorReserved = Static<typeof SwapStatusErrorReserved>;
export const SwapStatusErrorReserved = Type.Object({
    reserved_by: UserId,
});

export type MessagePinned = Static<typeof MessagePinned>;
export const MessagePinned = Type.Object({
    message_index: MessageIndex,
    pinned_by: UserId,
});

export type P2PSwapContentInitial = Static<typeof P2PSwapContentInitial>;
export const P2PSwapContentInitial = Type.Object({
    token0: TokenInfo,
    token0_amount: Type.BigInt(),
    token1: TokenInfo,
    token1_amount: Type.BigInt(),
    expires_in: Type.BigInt(),
    caption: Type.Optional(Type.String()),
});

export type GroupDescriptionChanged = Static<typeof GroupDescriptionChanged>;
export const GroupDescriptionChanged = Type.Object({
    new_description: Type.String(),
    previous_description: Type.String(),
    changed_by: UserId,
});

export type PrizeContent = Static<typeof PrizeContent>;
export const PrizeContent = Type.Object({
    prizes_remaining: Type.Number(),
    prizes_pending: Type.Number(),
    winners: Type.Array(UserId),
    token: Cryptocurrency,
    end_date: Type.BigInt(),
    caption: Type.Optional(Type.String()),
    diamond_only: Type.Boolean(),
});

export type GroupRulesChanged = Static<typeof GroupRulesChanged>;
export const GroupRulesChanged = Type.Object({
    enabled: Type.Boolean(),
    prev_enabled: Type.Boolean(),
    changed_by: UserId,
});

export type GroupCreated = Static<typeof GroupCreated>;
export const GroupCreated = Type.Object({
    name: Type.String(),
    description: Type.String(),
    created_by: UserId,
});

export type HydratedMention = Static<typeof HydratedMention>;
export const HydratedMention = Type.Object({
    thread_root_message_index: Type.Optional(MessageIndex),
    message_id: MessageId,
    message_index: MessageIndex,
    event_index: EventIndex,
    mentioned_by: UserId,
});

export type UserSummaryV2 = Static<typeof UserSummaryV2>;
export const UserSummaryV2 = Type.Object({
    user_id: UserId,
    stable: Type.Optional(UserSummaryStable),
    volatile: Type.Optional(UserSummaryVolatile),
});

export type ExternalUrlUpdated = Static<typeof ExternalUrlUpdated>;
export const ExternalUrlUpdated = Type.Object({
    updated_by: UserId,
    new_url: Type.Optional(Type.String()),
});

export type DeletedGroupInfo = Static<typeof DeletedGroupInfo>;
export const DeletedGroupInfo = Type.Object({
    id: ChatId,
    timestamp: Type.BigInt(),
    deleted_by: UserId,
    group_name: Type.String(),
    name: Type.String(),
    public: Type.Boolean(),
});

export type SwapStatusErrorAccepted = Static<typeof SwapStatusErrorAccepted>;
export const SwapStatusErrorAccepted = Type.Object({
    accepted_by: UserId,
    token1_txn_in: Type.BigInt(),
});

export type P2PSwapCompleted = Static<typeof P2PSwapCompleted>;
export const P2PSwapCompleted = Type.Object({
    accepted_by: UserId,
    token1_txn_in: Type.BigInt(),
    token0_txn_out: Type.BigInt(),
    token1_txn_out: Type.BigInt(),
});

export type GroupInviteCodeChanged = Static<typeof GroupInviteCodeChanged>;
export const GroupInviteCodeChanged = Type.Object({
    change: GroupInviteCodeChange,
    changed_by: UserId,
});

export type GroupNameChanged = Static<typeof GroupNameChanged>;
export const GroupNameChanged = Type.Object({
    new_name: Type.String(),
    previous_name: Type.String(),
    changed_by: UserId,
});

export type AccessGateNonComposite = Static<typeof AccessGateNonComposite>;
export const AccessGateNonComposite = Type.Union([
    Type.Literal("DiamondMember"),
    Type.Literal("LifetimeDiamondMember"),
    Type.Literal("UniquePerson"),
    Type.Object({
        VerifiedCredential: VerifiedCredentialGate,
    }),
    Type.Object({
        SnsNeuron: SnsNeuronGate,
    }),
    Type.Object({
        Payment: PaymentGate,
    }),
    Type.Object({
        TokenBalance: TokenBalanceGate,
    }),
    Type.Literal("Locked"),
    Type.Literal("ReferredByMember"),
]);

export type Chat = Static<typeof Chat>;
export const Chat = Type.Union([
    Type.Object({
        Direct: ChatId,
    }),
    Type.Object({
        Group: ChatId,
    }),
    Type.Object({
        Channel: Type.Tuple([CommunityId, Type.BigInt()]),
    }),
]);

export type DeletedBy = Static<typeof DeletedBy>;
export const DeletedBy = Type.Object({
    deleted_by: UserId,
    timestamp: Type.BigInt(),
});

export type CompletedCryptoTransaction = Static<typeof CompletedCryptoTransaction>;
export const CompletedCryptoTransaction = Type.Union([
    Type.Object({
        NNS: CompletedCryptoTransactionNNS,
    }),
    Type.Object({
        ICRC1: CompletedCryptoTransactionICRC1,
    }),
    Type.Object({
        ICRC2: CompletedCryptoTransactionICRC2,
    }),
]);

export type P2PSwapAccepted = Static<typeof P2PSwapAccepted>;
export const P2PSwapAccepted = Type.Object({
    accepted_by: UserId,
    token1_txn_in: Type.BigInt(),
});

export type MessageUnpinned = Static<typeof MessageUnpinned>;
export const MessageUnpinned = Type.Object({
    message_index: MessageIndex,
    unpinned_by: UserId,
    due_to_message_deleted: Type.Boolean(),
});

export type TotalVotes = Static<typeof TotalVotes>;
export const TotalVotes = Type.Union([
    Type.Object({
        Visible: Type.Record(Type.Number(), Type.Array(UserId)),
    }),
    Type.Object({
        Anonymous: Type.Record(Type.Number(), Type.Number()),
    }),
    Type.Object({
        Hidden: Type.Number(),
    }),
]);

export type MultiUserChat = Static<typeof MultiUserChat>;
export const MultiUserChat = Type.Union([
    Type.Object({
        Group: ChatId,
    }),
    Type.Object({
        Channel: Type.Tuple([CommunityId, Type.BigInt()]),
    }),
]);

export type UsersUnblocked = Static<typeof UsersUnblocked>;
export const UsersUnblocked = Type.Object({
    user_ids: Type.Array(UserId),
    unblocked_by: UserId,
});

export type Tips = Static<typeof Tips>;
export const Tips = Type.Array(
    Type.Tuple([PrincipalTS, Type.Array(Type.Tuple([UserId, Type.BigInt()]))])
);

export type CallParticipant = Static<typeof CallParticipant>;
export const CallParticipant = Type.Object({
    user_id: UserId,
    joined: Type.BigInt(),
});

export type PermissionsChanged = Static<typeof PermissionsChanged>;
export const PermissionsChanged = Type.Object({
    old_permissions_v2: GroupPermissions,
    new_permissions_v2: GroupPermissions,
    changed_by: UserId,
});

export type GroupFrozen = Static<typeof GroupFrozen>;
export const GroupFrozen = Type.Object({
    frozen_by: UserId,
    reason: Type.Optional(Type.String()),
});

export type FailedCryptoTransactionICRC2 = Static<typeof FailedCryptoTransactionICRC2>;
export const FailedCryptoTransactionICRC2 = Type.Object({
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: Type.BigInt(),
    fee: Type.BigInt(),
    spender: UserId,
    from: CryptoAccountICRC1,
    to: CryptoAccountICRC1,
    memo: Type.Optional(Type.Array(Type.Number())),
    created: Type.BigInt(),
    error_message: Type.String(),
});

export type Proposal = Static<typeof Proposal>;
export const Proposal = Type.Union([
    Type.Object({
        NNS: NnsProposal,
    }),
    Type.Object({
        SNS: SnsProposal,
    }),
]);

export type UsersInvited = Static<typeof UsersInvited>;
export const UsersInvited = Type.Object({
    user_ids: Type.Array(UserId),
    invited_by: UserId,
});

export type PendingCryptoTransactionNNS = Static<typeof PendingCryptoTransactionNNS>;
export const PendingCryptoTransactionNNS = Type.Object({
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: Tokens,
    to: UserOrAccount,
    fee: Type.Optional(Tokens),
    memo: Type.Optional(Type.BigInt()),
    created: Type.BigInt(),
});

export type DeletedCommunityInfo = Static<typeof DeletedCommunityInfo>;
export const DeletedCommunityInfo = Type.Object({
    id: CommunityId,
    timestamp: Type.BigInt(),
    deleted_by: UserId,
    name: Type.String(),
    public: Type.Boolean(),
});

export type SwapStatusErrorCompleted = Static<typeof SwapStatusErrorCompleted>;
export const SwapStatusErrorCompleted = Type.Object({
    accepted_by: UserId,
    token1_txn_in: Type.BigInt(),
    token0_txn_out: Type.BigInt(),
    token1_txn_out: Type.BigInt(),
});

export type MembersAdded = Static<typeof MembersAdded>;
export const MembersAdded = Type.Object({
    user_ids: Type.Array(UserId),
    added_by: UserId,
    unblocked: Type.Array(UserId),
});

export type FrozenGroupInfo = Static<typeof FrozenGroupInfo>;
export const FrozenGroupInfo = Type.Object({
    timestamp: Type.BigInt(),
    frozen_by: UserId,
    reason: Type.Optional(Type.String()),
});

export type GroupUnfrozen = Static<typeof GroupUnfrozen>;
export const GroupUnfrozen = Type.Object({
    unfrozen_by: UserId,
});

export type EventsTimeToLiveUpdated = Static<typeof EventsTimeToLiveUpdated>;
export const EventsTimeToLiveUpdated = Type.Object({
    updated_by: UserId,
    new_ttl: Type.Optional(Type.BigInt()),
});

export type MemberJoined = Static<typeof MemberJoined>;
export const MemberJoined = Type.Object({
    user_id: UserId,
    invited_by: Type.Optional(UserId),
});

export type RoleChanged = Static<typeof RoleChanged>;
export const RoleChanged = Type.Object({
    user_ids: Type.Array(UserId),
    changed_by: UserId,
    old_role: GroupRole,
    new_role: GroupRole,
});

export type GroupVisibilityChanged = Static<typeof GroupVisibilityChanged>;
export const GroupVisibilityChanged = Type.Object({
    public: Type.Optional(Type.Boolean()),
    messages_visible_to_non_members: Type.Optional(Type.Boolean()),
    changed_by: UserId,
});

export type GroupMembership = Static<typeof GroupMembership>;
export const GroupMembership = Type.Object({
    joined: Type.BigInt(),
    role: GroupRole,
    mentions: Type.Array(HydratedMention),
    notifications_muted: Type.Boolean(),
    my_metrics: ChatMetrics,
    latest_threads: Type.Array(GroupCanisterThreadDetails),
    rules_accepted: Type.Boolean(),
});

export type OptionUpdateFrozenGroupInfo = Static<typeof OptionUpdateFrozenGroupInfo>;
export const OptionUpdateFrozenGroupInfo = Type.Union([
    Type.Literal("NoChange"),
    Type.Literal("SetToNone"),
    Type.Object({
        SetToSome: FrozenGroupInfo,
    }),
]);

export type ProposalContent = Static<typeof ProposalContent>;
export const ProposalContent = Type.Object({
    governance_canister_id: PrincipalTS,
    proposal: Proposal,
    my_vote: Type.Optional(Type.Boolean()),
});

export type ReplyContext = Static<typeof ReplyContext>;
export const ReplyContext = Type.Object({
    chat_if_other: Type.Optional(Type.Tuple([Chat, Type.Union([MessageIndex, Type.Null()])])),
    event_index: EventIndex,
});

export type ReportedMessage = Static<typeof ReportedMessage>;
export const ReportedMessage = Type.Object({
    reports: Type.Array(MessageReport),
    count: Type.Number(),
});

export type GroupMembershipUpdates = Static<typeof GroupMembershipUpdates>;
export const GroupMembershipUpdates = Type.Object({
    role: Type.Optional(GroupRole),
    mentions: Type.Array(HydratedMention),
    notifications_muted: Type.Optional(Type.Boolean()),
    my_metrics: Type.Optional(ChatMetrics),
    latest_threads: Type.Array(GroupCanisterThreadDetails),
    unfollowed_threads: Type.Array(MessageIndex),
    rules_accepted: Type.Optional(Type.Boolean()),
});

export type DiamondMembershipStatusFull = Static<typeof DiamondMembershipStatusFull>;
export const DiamondMembershipStatusFull = Type.Union([
    Type.Literal("Inactive"),
    Type.Object({
        Active: DiamondMembershipDetails,
    }),
    Type.Literal("Lifetime"),
]);

export type OptionUpdateGroupSubtype = Static<typeof OptionUpdateGroupSubtype>;
export const OptionUpdateGroupSubtype = Type.Union([
    Type.Literal("NoChange"),
    Type.Literal("SetToNone"),
    Type.Object({
        SetToSome: GroupSubtype,
    }),
]);

export type GroupIndexActiveGroupsSuccessResult = Static<
    typeof GroupIndexActiveGroupsSuccessResult
>;
export const GroupIndexActiveGroupsSuccessResult = Type.Object({
    timestamp: Type.BigInt(),
    active_groups: Type.Array(ChatId),
    active_communities: Type.Array(CommunityId),
    deleted_groups: Type.Array(DeletedGroupInfo),
    deleted_communities: Type.Array(DeletedCommunityInfo),
});

export type UserIndexPlatformModeratorsResponse = Static<
    typeof UserIndexPlatformModeratorsResponse
>;
export const UserIndexPlatformModeratorsResponse = Type.Object({
    Success: UserIndexPlatformModeratorsSuccessResult,
});

export type UserIndexSuspectedBotsResponse = Static<typeof UserIndexSuspectedBotsResponse>;
export const UserIndexSuspectedBotsResponse = Type.Object({
    Success: UserIndexSuspectedBotsSuccessResult,
});

export type UserIndexUserResponse = Static<typeof UserIndexUserResponse>;
export const UserIndexUserResponse = Type.Union([
    Type.Object({
        Success: UserSummary,
    }),
    Type.Literal("UserNotFound"),
]);

export type UserIndexSearchResult = Static<typeof UserIndexSearchResult>;
export const UserIndexSearchResult = Type.Object({
    users: Type.Array(UserSummary),
    timestamp: Type.BigInt(),
});

export type UserIndexSearchResponse = Static<typeof UserIndexSearchResponse>;
export const UserIndexSearchResponse = Type.Object({
    Success: UserIndexSearchResult,
});

export type UserIndexChitLeaderboardSuccessResult = Static<
    typeof UserIndexChitLeaderboardSuccessResult
>;
export const UserIndexChitLeaderboardSuccessResult = Type.Object({
    all_time: Type.Array(UserIndexChitLeaderboardChitUserBalance),
    this_month: Type.Array(UserIndexChitLeaderboardChitUserBalance),
    last_month: Type.Array(UserIndexChitLeaderboardChitUserBalance),
});

export type UserIndexChitLeaderboardResponse = Static<typeof UserIndexChitLeaderboardResponse>;
export const UserIndexChitLeaderboardResponse = Type.Object({
    SuccessV2: UserIndexChitLeaderboardSuccessResult,
});

export type UserIndexCurrentUserSuccessResult = Static<typeof UserIndexCurrentUserSuccessResult>;
export const UserIndexCurrentUserSuccessResult = Type.Object({
    user_id: UserId,
    username: Type.String(),
    date_created: Type.BigInt(),
    display_name: Type.Optional(Type.String()),
    avatar_id: Type.Optional(Type.BigInt()),
    canister_upgrade_status: CanisterUpgradeStatus,
    wasm_version: BuildVersion,
    icp_account: Type.Tuple([
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
        Type.Number(),
    ]),
    referrals: Type.Array(UserId),
    is_platform_moderator: Type.Boolean(),
    is_platform_operator: Type.Boolean(),
    suspension_details: Type.Optional(SuspensionDetails),
    is_suspected_bot: Type.Boolean(),
    diamond_membership_details: Type.Optional(DiamondMembershipDetails),
    diamond_membership_status: DiamondMembershipStatusFull,
    moderation_flags_enabled: Type.Number(),
    is_unique_person: Type.Boolean(),
});

export type UserIndexCurrentUserResponse = Static<typeof UserIndexCurrentUserResponse>;
export const UserIndexCurrentUserResponse = Type.Union([
    Type.Object({
        Success: UserIndexCurrentUserSuccessResult,
    }),
    Type.Literal("UserNotFound"),
]);

export type LocalUserIndexAccessTokenArgs = Static<typeof LocalUserIndexAccessTokenArgs>;
export const LocalUserIndexAccessTokenArgs = Type.Object({
    token_type: AccessTokenType,
    chat: Chat,
});

export type LocalUserIndexRegisterUserResponse = Static<typeof LocalUserIndexRegisterUserResponse>;
export const LocalUserIndexRegisterUserResponse = Type.Union([
    Type.Object({
        Success: LocalUserIndexRegisterUserSuccessResult,
    }),
    Type.Literal("RegistrationInProgress"),
    Type.Literal("AlreadyRegistered"),
    Type.Literal("UserLimitReached"),
    Type.Literal("UsernameInvalid"),
    Type.Object({
        UsernameTooShort: Type.Number(),
    }),
    Type.Object({
        UsernameTooLong: Type.Number(),
    }),
    Type.Literal("CyclesBalanceTooLow"),
    Type.Object({
        InternalError: Type.String(),
    }),
    Type.Object({
        PublicKeyInvalid: Type.String(),
    }),
    Type.Literal("ReferralCodeInvalid"),
    Type.Literal("ReferralCodeAlreadyClaimed"),
    Type.Literal("ReferralCodeExpired"),
]);

export type LocalUserIndexChatEventsEventsArgs = Static<typeof LocalUserIndexChatEventsEventsArgs>;
export const LocalUserIndexChatEventsEventsArgs = Type.Object({
    context: LocalUserIndexChatEventsEventsContext,
    args: LocalUserIndexChatEventsEventsArgsInner,
    latest_known_update: Type.Optional(Type.BigInt()),
});

export type LocalUserIndexInviteUsersToChannelResponse = Static<
    typeof LocalUserIndexInviteUsersToChannelResponse
>;
export const LocalUserIndexInviteUsersToChannelResponse = Type.Union([
    Type.Literal("Success"),
    Type.Object({
        PartialSuccess: LocalUserIndexInviteUsersToChannelPartialSuccessResult,
    }),
    Type.Object({
        Failed: LocalUserIndexInviteUsersToChannelFailedResult,
    }),
    Type.Literal("CommunityFrozen"),
    Type.Literal("UserNotInCommunity"),
    Type.Literal("ChannelNotFound"),
    Type.Literal("UserNotInChannel"),
    Type.Literal("UserSuspended"),
    Type.Literal("NotAuthorized"),
    Type.Object({
        TooManyInvites: Type.Number(),
    }),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type LocalUserIndexReportMessageArgs = Static<typeof LocalUserIndexReportMessageArgs>;
export const LocalUserIndexReportMessageArgs = Type.Object({
    chat_id: MultiUserChat,
    thread_root_message_index: Type.Optional(MessageIndex),
    event_index: EventIndex,
    reason_code: Type.Number(),
    notes: Type.Optional(Type.String()),
});

export type ProposalsBotCommonProposalToSubmitAction = Static<
    typeof ProposalsBotCommonProposalToSubmitAction
>;
export const ProposalsBotCommonProposalToSubmitAction = Type.Union([
    Type.Literal("Motion"),
    Type.Object({
        TransferSnsTreasuryFunds: ProposalsBotCommonTransferSnsTreasuryFunds,
    }),
    Type.Literal("UpgradeSnsToNextVersion"),
    Type.Object({
        UpgradeSnsControlledCanister: ProposalsBotCommonUpgradeSnsControlledCanister,
    }),
    Type.Object({
        ExecuteGenericNervousSystemFunction: ProposalsBotCommonExecuteGenericNervousSystemFunction,
    }),
]);

export type ProposalsBotCommonProposalToSubmit = Static<typeof ProposalsBotCommonProposalToSubmit>;
export const ProposalsBotCommonProposalToSubmit = Type.Object({
    title: Type.String(),
    summary: Type.String(),
    url: Type.String(),
    action: ProposalsBotCommonProposalToSubmitAction,
});

export type OnlineUsersLastOnlineResponse = Static<typeof OnlineUsersLastOnlineResponse>;
export const OnlineUsersLastOnlineResponse = Type.Object({
    Success: Type.Array(OnlineUsersLastOnlineUserLastOnline),
});

export type UserManageFavouriteChatsArgs = Static<typeof UserManageFavouriteChatsArgs>;
export const UserManageFavouriteChatsArgs = Type.Object({
    to_add: Type.Array(Chat),
    to_remove: Type.Array(Chat),
});

export type UserCreateGroupResponse = Static<typeof UserCreateGroupResponse>;
export const UserCreateGroupResponse = Type.Union([
    Type.Object({
        Success: UserCreateGroupSuccessResult,
    }),
    Type.Object({
        NameTooShort: FieldTooShortResult,
    }),
    Type.Object({
        NameTooLong: FieldTooLongResult,
    }),
    Type.Literal("NameReserved"),
    Type.Object({
        DescriptionTooLong: FieldTooLongResult,
    }),
    Type.Object({
        RulesTooShort: FieldTooShortResult,
    }),
    Type.Object({
        RulesTooLong: FieldTooLongResult,
    }),
    Type.Object({
        AvatarTooBig: FieldTooLongResult,
    }),
    Type.Literal("AccessGateInvalid"),
    Type.Object({
        MaxGroupsCreated: Type.Number(),
    }),
    Type.Literal("NameTaken"),
    Type.Literal("Throttled"),
    Type.Literal("UserSuspended"),
    Type.Literal("UnauthorizedToCreatePublicGroup"),
    Type.Literal("InternalError"),
]);

export type UserTipMessageArgs = Static<typeof UserTipMessageArgs>;
export const UserTipMessageArgs = Type.Object({
    chat: Chat,
    recipient: UserId,
    thread_root_message_index: Type.Optional(MessageIndex),
    message_id: MessageId,
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: Type.BigInt(),
    fee: Type.BigInt(),
    decimals: Type.Number(),
    pin: Type.Optional(Type.String()),
});

export type UserTipMessageResponse = Static<typeof UserTipMessageResponse>;
export const UserTipMessageResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("ChatNotFound"),
    Type.Literal("MessageNotFound"),
    Type.Literal("CannotTipSelf"),
    Type.Literal("NotAuthorized"),
    Type.Literal("TransferCannotBeZero"),
    Type.Literal("TransferNotToMessageSender"),
    Type.Object({
        TransferFailed: Type.String(),
    }),
    Type.Literal("ChatFrozen"),
    Type.Literal("PinRequired"),
    Type.Object({
        PinIncorrect: Type.BigInt(),
    }),
    Type.Object({
        TooManyFailedPinAttempts: Type.BigInt(),
    }),
    Type.Literal("UserSuspended"),
    Type.Object({
        Retrying: Type.String(),
    }),
    Type.Object({
        InternalError: Type.Tuple([Type.String(), CompletedCryptoTransaction]),
    }),
]);

export type UserChatInList = Static<typeof UserChatInList>;
export const UserChatInList = Type.Union([
    Type.Object({
        Direct: ChatId,
    }),
    Type.Object({
        Group: ChatId,
    }),
    Type.Object({
        Favourite: Chat,
    }),
    Type.Object({
        Community: Type.Tuple([CommunityId, Type.BigInt()]),
    }),
]);

export type UserPinChatArgs = Static<typeof UserPinChatArgs>;
export const UserPinChatArgs = Type.Object({
    chat: UserChatInList,
});

export type UserContactsResponse = Static<typeof UserContactsResponse>;
export const UserContactsResponse = Type.Object({
    Success: UserContactsSuccessResult,
});

export type UserInitialStateFavouriteChatsInitial = Static<
    typeof UserInitialStateFavouriteChatsInitial
>;
export const UserInitialStateFavouriteChatsInitial = Type.Object({
    chats: Type.Array(Chat),
    pinned: Type.Array(Chat),
});

export type UserUpdatesFavouriteChatsUpdates = Static<typeof UserUpdatesFavouriteChatsUpdates>;
export const UserUpdatesFavouriteChatsUpdates = Type.Object({
    chats: Type.Optional(Type.Array(Chat)),
    pinned: Type.Optional(Type.Array(Chat)),
});

export type UserSubmitProposalArgs = Static<typeof UserSubmitProposalArgs>;
export const UserSubmitProposalArgs = Type.Object({
    governance_canister_id: PrincipalTS,
    proposal: ProposalsBotCommonProposalToSubmit,
    ledger: PrincipalTS,
    token: Cryptocurrency,
    proposal_rejection_fee: Type.BigInt(),
    transaction_fee: Type.BigInt(),
});

export type UserSendMessageWithTransferToGroupSuccessResult = Static<
    typeof UserSendMessageWithTransferToGroupSuccessResult
>;
export const UserSendMessageWithTransferToGroupSuccessResult = Type.Object({
    event_index: EventIndex,
    message_index: MessageIndex,
    timestamp: Type.BigInt(),
    expires_at: Type.Optional(Type.BigInt()),
    transfer: CompletedCryptoTransaction,
});

export type UserSetMessageReminderArgs = Static<typeof UserSetMessageReminderArgs>;
export const UserSetMessageReminderArgs = Type.Object({
    chat: Chat,
    thread_root_message_index: Type.Optional(MessageIndex),
    event_index: EventIndex,
    notes: Type.Optional(Type.String()),
    remind_at: Type.BigInt(),
});

export type UserTokenSwapsResponse = Static<typeof UserTokenSwapsResponse>;
export const UserTokenSwapsResponse = Type.Object({
    Success: UserTokenSwapsSuccessResult,
});

export type UserArchiveUnarchiveChatsArgs = Static<typeof UserArchiveUnarchiveChatsArgs>;
export const UserArchiveUnarchiveChatsArgs = Type.Object({
    to_archive: Type.Array(Chat),
    to_unarchive: Type.Array(Chat),
});

export type UserArchiveUnarchiveChatsPartialSuccessResult = Static<
    typeof UserArchiveUnarchiveChatsPartialSuccessResult
>;
export const UserArchiveUnarchiveChatsPartialSuccessResult = Type.Object({
    chats_not_found: Type.Array(Chat),
});

export type UserSendMessageTransferSuccessV2Result = Static<
    typeof UserSendMessageTransferSuccessV2Result
>;
export const UserSendMessageTransferSuccessV2Result = Type.Object({
    chat_id: ChatId,
    event_index: EventIndex,
    message_index: MessageIndex,
    timestamp: Type.BigInt(),
    expires_at: Type.Optional(Type.BigInt()),
    transfer: CompletedCryptoTransaction,
});

export type UserSendMessageResponse = Static<typeof UserSendMessageResponse>;
export const UserSendMessageResponse = Type.Union([
    Type.Object({
        Success: UserSendMessageSuccessResult,
    }),
    Type.Object({
        TransferSuccessV2: UserSendMessageTransferSuccessV2Result,
    }),
    Type.Literal("MessageEmpty"),
    Type.Object({
        TextTooLong: Type.Number(),
    }),
    Type.Literal("RecipientBlocked"),
    Type.Literal("RecipientNotFound"),
    Type.Object({
        InvalidPoll: InvalidPollReason,
    }),
    Type.Object({
        InvalidRequest: Type.String(),
    }),
    Type.Object({
        TransferFailed: Type.String(),
    }),
    Type.Literal("TransferCannotBeZero"),
    Type.Literal("TransferCannotBeToSelf"),
    Type.Object({
        P2PSwapSetUpFailed: Type.String(),
    }),
    Type.Literal("DuplicateMessageId"),
    Type.Literal("UserSuspended"),
    Type.Literal("PinRequired"),
    Type.Object({
        PinIncorrect: Type.BigInt(),
    }),
    Type.Object({
        TooManyFailedPinAttempts: Type.BigInt(),
    }),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type UserSendMessageWithTransferToChannelSuccessResult = Static<
    typeof UserSendMessageWithTransferToChannelSuccessResult
>;
export const UserSendMessageWithTransferToChannelSuccessResult = Type.Object({
    event_index: EventIndex,
    message_index: MessageIndex,
    timestamp: Type.BigInt(),
    expires_at: Type.Optional(Type.BigInt()),
    transfer: CompletedCryptoTransaction,
});

export type UserMarkReadArgs = Static<typeof UserMarkReadArgs>;
export const UserMarkReadArgs = Type.Object({
    messages_read: Type.Array(UserMarkReadChatMessagesRead),
    community_messages_read: Type.Array(UserMarkReadCommunityMessagesRead),
});

export type UserChitEventsResponse = Static<typeof UserChitEventsResponse>;
export const UserChitEventsResponse = Type.Object({
    Success: UserChitEventsSuccessResult,
});

export type UserUnpinChatArgs = Static<typeof UserUnpinChatArgs>;
export const UserUnpinChatArgs = Type.Object({
    chat: UserChatInList,
});

export type PrizeWinnerContent = Static<typeof PrizeWinnerContent>;
export const PrizeWinnerContent = Type.Object({
    winner: UserId,
    transaction: CompletedCryptoTransaction,
    prize_message: MessageIndex,
});

export type VideoCallContent = Static<typeof VideoCallContent>;
export const VideoCallContent = Type.Object({
    call_type: VideoCallType,
    ended: Type.Optional(Type.BigInt()),
    participants: Type.Array(CallParticipant),
    hidden_participants: Type.Number(),
});

export type EventWrapperGroupFrozen = Static<typeof EventWrapperGroupFrozen>;
export const EventWrapperGroupFrozen = Type.Object({
    index: EventIndex,
    timestamp: Type.BigInt(),
    correlation_id: Type.BigInt(),
    expires_at: Type.Optional(Type.BigInt()),
    event: GroupFrozen,
});

export type FailedCryptoTransaction = Static<typeof FailedCryptoTransaction>;
export const FailedCryptoTransaction = Type.Union([
    Type.Object({
        NNS: FailedCryptoTransactionNNS,
    }),
    Type.Object({
        ICRC1: FailedCryptoTransactionICRC1,
    }),
    Type.Object({
        ICRC2: FailedCryptoTransactionICRC2,
    }),
]);

export type CompositeGate = Static<typeof CompositeGate>;
export const CompositeGate = Type.Object({
    inner: Type.Array(AccessGateNonComposite),
    and: Type.Boolean(),
});

export type EventWrapperGroupUnfrozen = Static<typeof EventWrapperGroupUnfrozen>;
export const EventWrapperGroupUnfrozen = Type.Object({
    index: EventIndex,
    timestamp: Type.BigInt(),
    correlation_id: Type.BigInt(),
    expires_at: Type.Optional(Type.BigInt()),
    event: GroupUnfrozen,
});

export type PendingCryptoTransaction = Static<typeof PendingCryptoTransaction>;
export const PendingCryptoTransaction = Type.Union([
    Type.Object({
        NNS: PendingCryptoTransactionNNS,
    }),
    Type.Object({
        ICRC1: PendingCryptoTransactionICRC1,
    }),
    Type.Object({
        ICRC2: PendingCryptoTransactionICRC2,
    }),
]);

export type CryptoTransaction = Static<typeof CryptoTransaction>;
export const CryptoTransaction = Type.Union([
    Type.Object({
        Pending: PendingCryptoTransaction,
    }),
    Type.Object({
        Completed: CompletedCryptoTransaction,
    }),
    Type.Object({
        Failed: FailedCryptoTransaction,
    }),
]);

export type P2PSwapStatus = Static<typeof P2PSwapStatus>;
export const P2PSwapStatus = Type.Union([
    Type.Literal("Open"),
    Type.Object({
        Cancelled: P2PSwapCancelled,
    }),
    Type.Object({
        Expired: P2PSwapCancelled,
    }),
    Type.Object({
        Reserved: P2PSwapReserved,
    }),
    Type.Object({
        Accepted: P2PSwapAccepted,
    }),
    Type.Object({
        Completed: P2PSwapCompleted,
    }),
]);

export type PollVotes = Static<typeof PollVotes>;
export const PollVotes = Type.Object({
    total: TotalVotes,
    user: Type.Array(Type.Number()),
});

export type CurrentUserSummary = Static<typeof CurrentUserSummary>;
export const CurrentUserSummary = Type.Object({
    user_id: UserId,
    username: Type.String(),
    display_name: Type.Optional(Type.String()),
    avatar_id: Type.Optional(Type.BigInt()),
    is_bot: Type.Boolean(),
    is_platform_moderator: Type.Boolean(),
    is_platform_operator: Type.Boolean(),
    suspension_details: Type.Optional(SuspensionDetails),
    is_suspected_bot: Type.Boolean(),
    diamond_membership_details: Type.Optional(DiamondMembershipDetails),
    diamond_membership_status: DiamondMembershipStatusFull,
    moderation_flags_enabled: Type.Number(),
    is_unique_person: Type.Boolean(),
});

export type SwapStatusError = Static<typeof SwapStatusError>;
export const SwapStatusError = Type.Union([
    Type.Object({
        Reserved: SwapStatusErrorReserved,
    }),
    Type.Object({
        Accepted: SwapStatusErrorAccepted,
    }),
    Type.Object({
        Completed: SwapStatusErrorCompleted,
    }),
    Type.Object({
        Expired: SwapStatusErrorExpired,
    }),
    Type.Object({
        Cancelled: SwapStatusErrorCancelled,
    }),
]);

export type P2PSwapContent = Static<typeof P2PSwapContent>;
export const P2PSwapContent = Type.Object({
    swap_id: Type.Number(),
    token0: TokenInfo,
    token0_amount: Type.BigInt(),
    token1: TokenInfo,
    token1_amount: Type.BigInt(),
    expires_at: Type.BigInt(),
    caption: Type.Optional(Type.String()),
    token0_txn_in: Type.BigInt(),
    status: P2PSwapStatus,
});

export type AccessGate = Static<typeof AccessGate>;
export const AccessGate = Type.Union([
    Type.Literal("DiamondMember"),
    Type.Literal("LifetimeDiamondMember"),
    Type.Literal("UniquePerson"),
    Type.Object({
        VerifiedCredential: VerifiedCredentialGate,
    }),
    Type.Object({
        SnsNeuron: SnsNeuronGate,
    }),
    Type.Object({
        Payment: PaymentGate,
    }),
    Type.Object({
        TokenBalance: TokenBalanceGate,
    }),
    Type.Object({
        Composite: CompositeGate,
    }),
    Type.Literal("Locked"),
    Type.Literal("ReferredByMember"),
]);

export type GroupIndexFreezeGroupResponse = Static<typeof GroupIndexFreezeGroupResponse>;
export const GroupIndexFreezeGroupResponse = Type.Union([
    Type.Object({
        Success: EventWrapperGroupFrozen,
    }),
    Type.Literal("ChatAlreadyFrozen"),
    Type.Literal("ChatNotFound"),
    Type.Literal("NotAuthorized"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type GroupIndexUnfreezeCommunityResponse = Static<
    typeof GroupIndexUnfreezeCommunityResponse
>;
export const GroupIndexUnfreezeCommunityResponse = Type.Union([
    Type.Object({
        Success: EventWrapperGroupUnfrozen,
    }),
    Type.Literal("CommunityNotFrozen"),
    Type.Literal("CommunityNotFound"),
    Type.Literal("NotAuthorized"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type GroupIndexFreezeCommunityResponse = Static<typeof GroupIndexFreezeCommunityResponse>;
export const GroupIndexFreezeCommunityResponse = Type.Union([
    Type.Object({
        Success: EventWrapperGroupFrozen,
    }),
    Type.Literal("CommunityAlreadyFrozen"),
    Type.Literal("CommunityNotFound"),
    Type.Literal("NotAuthorized"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type GroupIndexActiveGroupsResponse = Static<typeof GroupIndexActiveGroupsResponse>;
export const GroupIndexActiveGroupsResponse = Type.Object({
    Success: GroupIndexActiveGroupsSuccessResult,
});

export type GroupIndexUnfreezeGroupResponse = Static<typeof GroupIndexUnfreezeGroupResponse>;
export const GroupIndexUnfreezeGroupResponse = Type.Union([
    Type.Object({
        Success: EventWrapperGroupUnfrozen,
    }),
    Type.Literal("ChatNotFrozen"),
    Type.Literal("ChatNotFound"),
    Type.Literal("NotAuthorized"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type UserIndexUsersResult = Static<typeof UserIndexUsersResult>;
export const UserIndexUsersResult = Type.Object({
    users: Type.Array(UserSummaryV2),
    current_user: Type.Optional(CurrentUserSummary),
    deleted: Type.Array(UserId),
    timestamp: Type.BigInt(),
});

export type UserIndexUsersResponse = Static<typeof UserIndexUsersResponse>;
export const UserIndexUsersResponse = Type.Object({
    Success: UserIndexUsersResult,
});

export type LocalUserIndexChatEventsArgs = Static<typeof LocalUserIndexChatEventsArgs>;
export const LocalUserIndexChatEventsArgs = Type.Object({
    requests: Type.Array(LocalUserIndexChatEventsEventsArgs),
});

export type UserCreateGroupArgs = Static<typeof UserCreateGroupArgs>;
export const UserCreateGroupArgs = Type.Object({
    is_public: Type.Boolean(),
    name: Type.String(),
    description: Type.String(),
    rules: Rules,
    avatar: Type.Optional(Document),
    history_visible_to_new_joiners: Type.Boolean(),
    messages_visible_to_non_members: Type.Optional(Type.Boolean()),
    permissions_v2: Type.Optional(GroupPermissions),
    events_ttl: Type.Optional(Type.BigInt()),
    gate: Type.Optional(AccessGate),
});

export type UserCancelP2pSwapResponse = Static<typeof UserCancelP2pSwapResponse>;
export const UserCancelP2pSwapResponse = Type.Union([
    Type.Literal("Success"),
    Type.Literal("ChatNotFound"),
    Type.Object({
        StatusError: SwapStatusError,
    }),
    Type.Literal("SwapNotFound"),
]);

export type UserSendMessageWithTransferToGroupResponse = Static<
    typeof UserSendMessageWithTransferToGroupResponse
>;
export const UserSendMessageWithTransferToGroupResponse = Type.Union([
    Type.Object({
        Success: UserSendMessageWithTransferToGroupSuccessResult,
    }),
    Type.Object({
        TextTooLong: Type.Number(),
    }),
    Type.Literal("RecipientBlocked"),
    Type.Object({
        CallerNotInGroup: Type.Union([CompletedCryptoTransaction, Type.Null()]),
    }),
    Type.Object({
        CryptocurrencyNotSupported: Cryptocurrency,
    }),
    Type.Object({
        InvalidRequest: Type.String(),
    }),
    Type.Object({
        TransferFailed: Type.String(),
    }),
    Type.Literal("TransferCannotBeZero"),
    Type.Literal("TransferCannotBeToSelf"),
    Type.Object({
        P2PSwapSetUpFailed: Type.String(),
    }),
    Type.Literal("UserSuspended"),
    Type.Literal("ChatFrozen"),
    Type.Literal("RulesNotAccepted"),
    Type.Object({
        Retrying: Type.Tuple([Type.String(), CompletedCryptoTransaction]),
    }),
    Type.Literal("PinRequired"),
    Type.Object({
        PinIncorrect: Type.BigInt(),
    }),
    Type.Object({
        TooManyFailedPinAttempts: Type.BigInt(),
    }),
]);

export type UserWithdrawCryptoArgs = Static<typeof UserWithdrawCryptoArgs>;
export const UserWithdrawCryptoArgs = Type.Object({
    withdrawal: PendingCryptoTransaction,
    pin: Type.Optional(Type.String()),
});

export type UserWithdrawCryptoResponse = Static<typeof UserWithdrawCryptoResponse>;
export const UserWithdrawCryptoResponse = Type.Union([
    Type.Object({
        Success: CompletedCryptoTransaction,
    }),
    Type.Object({
        TransactionFailed: FailedCryptoTransaction,
    }),
    Type.Literal("CurrencyNotSupported"),
    Type.Literal("PinRequired"),
    Type.Object({
        PinIncorrect: Type.BigInt(),
    }),
    Type.Object({
        TooManyFailedPinAttempts: Type.BigInt(),
    }),
]);

export type UserArchiveUnarchiveChatsResponse = Static<typeof UserArchiveUnarchiveChatsResponse>;
export const UserArchiveUnarchiveChatsResponse = Type.Union([
    Type.Literal("Success"),
    Type.Object({
        PartialSuccess: UserArchiveUnarchiveChatsPartialSuccessResult,
    }),
    Type.Literal("Failure"),
    Type.Literal("UserSuspended"),
]);

export type UserCreateCommunityArgs = Static<typeof UserCreateCommunityArgs>;
export const UserCreateCommunityArgs = Type.Object({
    is_public: Type.Boolean(),
    name: Type.String(),
    description: Type.String(),
    rules: Rules,
    avatar: Type.Optional(Document),
    banner: Type.Optional(Document),
    history_visible_to_new_joiners: Type.Boolean(),
    permissions: Type.Optional(CommunityPermissions),
    gate: Type.Optional(AccessGate),
    default_channels: Type.Array(Type.String()),
    default_channel_rules: Type.Optional(Rules),
    primary_language: Type.String(),
});

export type UserSendMessageWithTransferToChannelResponse = Static<
    typeof UserSendMessageWithTransferToChannelResponse
>;
export const UserSendMessageWithTransferToChannelResponse = Type.Union([
    Type.Object({
        Success: UserSendMessageWithTransferToChannelSuccessResult,
    }),
    Type.Object({
        TextTooLong: Type.Number(),
    }),
    Type.Literal("RecipientBlocked"),
    Type.Object({
        UserNotInCommunity: Type.Union([CompletedCryptoTransaction, Type.Null()]),
    }),
    Type.Object({
        UserNotInChannel: CompletedCryptoTransaction,
    }),
    Type.Object({
        ChannelNotFound: CompletedCryptoTransaction,
    }),
    Type.Object({
        CryptocurrencyNotSupported: Cryptocurrency,
    }),
    Type.Object({
        InvalidRequest: Type.String(),
    }),
    Type.Object({
        TransferFailed: Type.String(),
    }),
    Type.Literal("TransferCannotBeZero"),
    Type.Literal("TransferCannotBeToSelf"),
    Type.Object({
        P2PSwapSetUpFailed: Type.String(),
    }),
    Type.Literal("UserSuspended"),
    Type.Literal("CommunityFrozen"),
    Type.Literal("RulesNotAccepted"),
    Type.Literal("CommunityRulesNotAccepted"),
    Type.Object({
        Retrying: Type.Tuple([Type.String(), CompletedCryptoTransaction]),
    }),
    Type.Literal("PinRequired"),
    Type.Object({
        PinIncorrect: Type.BigInt(),
    }),
    Type.Object({
        TooManyFailedPinAttempts: Type.BigInt(),
    }),
]);

export type UserAcceptP2pSwapResponse = Static<typeof UserAcceptP2pSwapResponse>;
export const UserAcceptP2pSwapResponse = Type.Union([
    Type.Object({
        Success: AcceptSwapSuccess,
    }),
    Type.Literal("ChatNotFound"),
    Type.Literal("InsufficientFunds"),
    Type.Object({
        StatusError: SwapStatusError,
    }),
    Type.Literal("SwapNotFound"),
    Type.Literal("UserSuspended"),
    Type.Literal("PinRequired"),
    Type.Object({
        PinIncorrect: Type.BigInt(),
    }),
    Type.Object({
        TooManyFailedPinAttempts: Type.BigInt(),
    }),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type PollContent = Static<typeof PollContent>;
export const PollContent = Type.Object({
    config: PollConfig,
    votes: PollVotes,
    ended: Type.Boolean(),
});

export type CryptoContent = Static<typeof CryptoContent>;
export const CryptoContent = Type.Object({
    recipient: UserId,
    transfer: CryptoTransaction,
    caption: Type.Optional(Type.String()),
});

export type PrizeContentInitial = Static<typeof PrizeContentInitial>;
export const PrizeContentInitial = Type.Object({
    prizes_v2: Type.Array(Type.BigInt()),
    transfer: CryptoTransaction,
    end_date: Type.BigInt(),
    caption: Type.Optional(Type.String()),
    diamond_only: Type.Boolean(),
});

export type OptionUpdateAccessGate = Static<typeof OptionUpdateAccessGate>;
export const OptionUpdateAccessGate = Type.Union([
    Type.Literal("NoChange"),
    Type.Literal("SetToNone"),
    Type.Object({
        SetToSome: AccessGate,
    }),
]);

export type MessageContent = Static<typeof MessageContent>;
export const MessageContent = Type.Union([
    Type.Object({
        Text: TextContent,
    }),
    Type.Object({
        Image: ImageContent,
    }),
    Type.Object({
        Video: VideoContent,
    }),
    Type.Object({
        Audio: AudioContent,
    }),
    Type.Object({
        File: FileContent,
    }),
    Type.Object({
        Poll: PollContent,
    }),
    Type.Object({
        Crypto: CryptoContent,
    }),
    Type.Object({
        Deleted: DeletedBy,
    }),
    Type.Object({
        Giphy: GiphyContent,
    }),
    Type.Object({
        GovernanceProposal: ProposalContent,
    }),
    Type.Object({
        Prize: PrizeContent,
    }),
    Type.Object({
        PrizeWinner: PrizeWinnerContent,
    }),
    Type.Object({
        MessageReminderCreated: MessageReminderCreatedContent,
    }),
    Type.Object({
        MessageReminder: MessageReminderContent,
    }),
    Type.Object({
        ReportedMessage: ReportedMessage,
    }),
    Type.Object({
        P2PSwap: P2PSwapContent,
    }),
    Type.Object({
        VideoCall: VideoCallContent,
    }),
    Type.Object({
        Custom: CustomContent,
    }),
]);

export type MessageMatch = Static<typeof MessageMatch>;
export const MessageMatch = Type.Object({
    sender: UserId,
    message_index: MessageIndex,
    content: MessageContent,
    score: Type.Number(),
});

export type GroupMatch = Static<typeof GroupMatch>;
export const GroupMatch = Type.Object({
    id: ChatId,
    name: Type.String(),
    description: Type.String(),
    avatar_id: Type.Optional(Type.BigInt()),
    member_count: Type.Number(),
    gate: Type.Optional(AccessGate),
    subtype: Type.Optional(GroupSubtype),
});

export type CommunityMatch = Static<typeof CommunityMatch>;
export const CommunityMatch = Type.Object({
    id: CommunityId,
    score: Type.Number(),
    name: Type.String(),
    description: Type.String(),
    avatar_id: Type.Optional(Type.BigInt()),
    banner_id: Type.Optional(Type.BigInt()),
    member_count: Type.Number(),
    channel_count: Type.Number(),
    gate: Type.Optional(AccessGate),
    moderation_flags: Type.Number(),
    primary_language: Type.String(),
});

export type MessageContentInitial = Static<typeof MessageContentInitial>;
export const MessageContentInitial = Type.Union([
    Type.Object({
        Text: TextContent,
    }),
    Type.Object({
        Image: ImageContent,
    }),
    Type.Object({
        Video: VideoContent,
    }),
    Type.Object({
        Audio: AudioContent,
    }),
    Type.Object({
        File: FileContent,
    }),
    Type.Object({
        Poll: PollContent,
    }),
    Type.Object({
        Crypto: CryptoContent,
    }),
    Type.Object({
        Deleted: DeletedBy,
    }),
    Type.Object({
        Giphy: GiphyContent,
    }),
    Type.Object({
        GovernanceProposal: ProposalContent,
    }),
    Type.Object({
        Prize: PrizeContentInitial,
    }),
    Type.Object({
        MessageReminderCreated: MessageReminderCreatedContent,
    }),
    Type.Object({
        MessageReminder: MessageReminderContent,
    }),
    Type.Object({
        P2PSwap: P2PSwapContentInitial,
    }),
    Type.Object({
        Custom: CustomContent,
    }),
]);

export type GroupGateUpdated = Static<typeof GroupGateUpdated>;
export const GroupGateUpdated = Type.Object({
    updated_by: UserId,
    new_gate: Type.Optional(AccessGate),
});

export type GroupIndexExploreCommunitiesSuccessResult = Static<
    typeof GroupIndexExploreCommunitiesSuccessResult
>;
export const GroupIndexExploreCommunitiesSuccessResult = Type.Object({
    matches: Type.Array(CommunityMatch),
    total: Type.Number(),
});

export type GroupIndexExploreCommunitiesResponse = Static<
    typeof GroupIndexExploreCommunitiesResponse
>;
export const GroupIndexExploreCommunitiesResponse = Type.Union([
    Type.Object({
        Success: GroupIndexExploreCommunitiesSuccessResult,
    }),
    Type.Object({
        TermTooShort: Type.Number(),
    }),
    Type.Object({
        TermTooLong: Type.Number(),
    }),
    Type.Literal("InvalidTerm"),
    Type.Literal("InvalidFlags"),
]);

export type GroupIndexExploreGroupsSuccessResult = Static<
    typeof GroupIndexExploreGroupsSuccessResult
>;
export const GroupIndexExploreGroupsSuccessResult = Type.Object({
    matches: Type.Array(GroupMatch),
    total: Type.Number(),
});

export type GroupIndexExploreGroupsResponse = Static<typeof GroupIndexExploreGroupsResponse>;
export const GroupIndexExploreGroupsResponse = Type.Union([
    Type.Object({
        Success: GroupIndexExploreGroupsSuccessResult,
    }),
    Type.Object({
        TermTooShort: Type.Number(),
    }),
    Type.Object({
        TermTooLong: Type.Number(),
    }),
    Type.Literal("InvalidTerm"),
]);

export type UserSearchMessagesSuccessResult = Static<typeof UserSearchMessagesSuccessResult>;
export const UserSearchMessagesSuccessResult = Type.Object({
    matches: Type.Array(MessageMatch),
});

export type UserSearchMessagesResponse = Static<typeof UserSearchMessagesResponse>;
export const UserSearchMessagesResponse = Type.Union([
    Type.Object({
        Success: UserSearchMessagesSuccessResult,
    }),
    Type.Literal("InvalidTerm"),
    Type.Object({
        TermTooLong: Type.Number(),
    }),
    Type.Object({
        TermTooShort: Type.Number(),
    }),
    Type.Literal("ChatNotFound"),
]);

export type UserDeletedMessageSuccessResult = Static<typeof UserDeletedMessageSuccessResult>;
export const UserDeletedMessageSuccessResult = Type.Object({
    content: MessageContent,
});

export type UserDeletedMessageResponse = Static<typeof UserDeletedMessageResponse>;
export const UserDeletedMessageResponse = Type.Union([
    Type.Object({
        Success: UserDeletedMessageSuccessResult,
    }),
    Type.Literal("ChatNotFound"),
    Type.Literal("NotAuthorized"),
    Type.Literal("MessageNotFound"),
    Type.Literal("MessageHardDeleted"),
]);

export type UserSendMessageWithTransferToGroupArgs = Static<
    typeof UserSendMessageWithTransferToGroupArgs
>;
export const UserSendMessageWithTransferToGroupArgs = Type.Object({
    group_id: ChatId,
    thread_root_message_index: Type.Optional(MessageIndex),
    message_id: MessageId,
    content: MessageContentInitial,
    sender_name: Type.String(),
    sender_display_name: Type.Optional(Type.String()),
    replies_to: Type.Optional(GroupReplyContext),
    mentioned: Type.Array(User),
    block_level_markdown: Type.Boolean(),
    correlation_id: Type.BigInt(),
    rules_accepted: Type.Optional(Version),
    message_filter_failed: Type.Optional(Type.BigInt()),
    pin: Type.Optional(Type.String()),
});

export type UserSendMessageArgs = Static<typeof UserSendMessageArgs>;
export const UserSendMessageArgs = Type.Object({
    recipient: UserId,
    thread_root_message_index: Type.Optional(MessageIndex),
    message_id: MessageId,
    content: MessageContentInitial,
    replies_to: Type.Optional(ReplyContext),
    forwarding: Type.Boolean(),
    block_level_markdown: Type.Boolean(),
    message_filter_failed: Type.Optional(Type.BigInt()),
    pin: Type.Optional(Type.String()),
    correlation_id: Type.BigInt(),
});

export type UserSendMessageWithTransferToChannelArgs = Static<
    typeof UserSendMessageWithTransferToChannelArgs
>;
export const UserSendMessageWithTransferToChannelArgs = Type.Object({
    community_id: CommunityId,
    channel_id: Type.BigInt(),
    thread_root_message_index: Type.Optional(MessageIndex),
    message_id: MessageId,
    content: MessageContentInitial,
    sender_name: Type.String(),
    sender_display_name: Type.Optional(Type.String()),
    replies_to: Type.Optional(GroupReplyContext),
    mentioned: Type.Array(User),
    block_level_markdown: Type.Boolean(),
    community_rules_accepted: Type.Optional(Version),
    channel_rules_accepted: Type.Optional(Version),
    message_filter_failed: Type.Optional(Type.BigInt()),
    pin: Type.Optional(Type.String()),
});

export type UserEditMessageArgs = Static<typeof UserEditMessageArgs>;
export const UserEditMessageArgs = Type.Object({
    user_id: UserId,
    thread_root_message_index: Type.Optional(MessageIndex),
    message_id: MessageId,
    content: MessageContentInitial,
    block_level_markdown: Type.Optional(Type.Boolean()),
    correlation_id: Type.BigInt(),
});

export type Message = Static<typeof Message>;
export const Message = Type.Object({
    message_index: MessageIndex,
    message_id: MessageId,
    sender: UserId,
    content: MessageContent,
    replies_to: Type.Optional(ReplyContext),
    reactions: Type.Array(Type.Tuple([Reaction, Type.Array(UserId)])),
    tips: Tips,
    thread_summary: Type.Optional(ThreadSummary),
    edited: Type.Boolean(),
    forwarded: Type.Boolean(),
    block_level_markdown: Type.Boolean(),
});

export type EventWrapperMessage = Static<typeof EventWrapperMessage>;
export const EventWrapperMessage = Type.Object({
    index: EventIndex,
    timestamp: Type.BigInt(),
    correlation_id: Type.BigInt(),
    expires_at: Type.Optional(Type.BigInt()),
    event: Message,
});

export type ChatEvent = Static<typeof ChatEvent>;
export const ChatEvent = Type.Union([
    Type.Literal("Empty"),
    Type.Object({
        Message: Message,
    }),
    Type.Object({
        GroupChatCreated: GroupCreated,
    }),
    Type.Object({
        DirectChatCreated: DirectChatCreated,
    }),
    Type.Object({
        GroupNameChanged: GroupNameChanged,
    }),
    Type.Object({
        GroupDescriptionChanged: GroupDescriptionChanged,
    }),
    Type.Object({
        GroupRulesChanged: GroupRulesChanged,
    }),
    Type.Object({
        AvatarChanged: AvatarChanged,
    }),
    Type.Object({
        ParticipantsAdded: MembersAdded,
    }),
    Type.Object({
        ParticipantsRemoved: MembersRemoved,
    }),
    Type.Object({
        ParticipantJoined: MemberJoined,
    }),
    Type.Object({
        ParticipantLeft: MemberLeft,
    }),
    Type.Object({
        RoleChanged: RoleChanged,
    }),
    Type.Object({
        UsersBlocked: UsersBlocked,
    }),
    Type.Object({
        UsersUnblocked: UsersUnblocked,
    }),
    Type.Object({
        MessagePinned: MessagePinned,
    }),
    Type.Object({
        MessageUnpinned: MessageUnpinned,
    }),
    Type.Object({
        PermissionsChanged: PermissionsChanged,
    }),
    Type.Object({
        GroupVisibilityChanged: GroupVisibilityChanged,
    }),
    Type.Object({
        GroupInviteCodeChanged: GroupInviteCodeChanged,
    }),
    Type.Object({
        ChatFrozen: GroupFrozen,
    }),
    Type.Object({
        ChatUnfrozen: GroupUnfrozen,
    }),
    Type.Object({
        EventsTimeToLiveUpdated: EventsTimeToLiveUpdated,
    }),
    Type.Object({
        GroupGateUpdated: GroupGateUpdated,
    }),
    Type.Object({
        UsersInvited: UsersInvited,
    }),
    Type.Object({
        MembersAddedToDefaultChannel: MembersAddedToDefaultChannel,
    }),
    Type.Object({
        ExternalUrlUpdated: ExternalUrlUpdated,
    }),
]);

export type GroupChatSummary = Static<typeof GroupChatSummary>;
export const GroupChatSummary = Type.Object({
    chat_id: ChatId,
    local_user_index_canister_id: PrincipalTS,
    last_updated: Type.BigInt(),
    name: Type.String(),
    description: Type.String(),
    subtype: Type.Optional(GroupSubtype),
    avatar_id: Type.Optional(Type.BigInt()),
    is_public: Type.Boolean(),
    history_visible_to_new_joiners: Type.Boolean(),
    messages_visible_to_non_members: Type.Boolean(),
    min_visible_event_index: EventIndex,
    min_visible_message_index: MessageIndex,
    latest_message: Type.Optional(EventWrapperMessage),
    latest_event_index: EventIndex,
    latest_message_index: Type.Optional(MessageIndex),
    joined: Type.BigInt(),
    read_by_me_up_to: Type.Optional(MessageIndex),
    notifications_muted: Type.Boolean(),
    participant_count: Type.Number(),
    role: GroupRole,
    mentions: Type.Array(HydratedMention),
    wasm_version: BuildVersion,
    permissions_v2: GroupPermissions,
    metrics: ChatMetrics,
    my_metrics: ChatMetrics,
    latest_threads: Type.Array(ThreadSyncDetails),
    archived: Type.Boolean(),
    frozen: Type.Optional(FrozenGroupInfo),
    date_last_pinned: Type.Optional(Type.BigInt()),
    date_read_pinned: Type.Optional(Type.BigInt()),
    events_ttl: Type.Optional(Type.BigInt()),
    events_ttl_last_updated: Type.BigInt(),
    gate: Type.Optional(AccessGate),
    rules_accepted: Type.Boolean(),
    video_call_in_progress: Type.Optional(VideoCall),
});

export type CommunityCanisterChannelSummaryUpdates = Static<
    typeof CommunityCanisterChannelSummaryUpdates
>;
export const CommunityCanisterChannelSummaryUpdates = Type.Object({
    channel_id: Type.BigInt(),
    last_updated: Type.BigInt(),
    name: Type.Optional(Type.String()),
    description: Type.Optional(Type.String()),
    subtype: OptionUpdateGroupSubtype,
    avatar_id: OptionUpdateU128,
    is_public: Type.Optional(Type.Boolean()),
    messages_visible_to_non_members: Type.Optional(Type.Boolean()),
    latest_message: Type.Optional(EventWrapperMessage),
    latest_message_sender_display_name: Type.Optional(Type.String()),
    latest_event_index: Type.Optional(EventIndex),
    latest_message_index: Type.Optional(MessageIndex),
    member_count: Type.Optional(Type.Number()),
    permissions_v2: Type.Optional(GroupPermissions),
    updated_events: Type.Array(
        Type.Tuple([Type.Union([MessageIndex, Type.Null()]), EventIndex, Type.BigInt()])
    ),
    metrics: Type.Optional(ChatMetrics),
    date_last_pinned: Type.Optional(Type.BigInt()),
    events_ttl: OptionUpdateU64,
    events_ttl_last_updated: Type.Optional(Type.BigInt()),
    gate: OptionUpdateAccessGate,
    membership: Type.Optional(GroupMembershipUpdates),
    video_call_in_progress: OptionUpdateVideoCall,
    external_url: OptionUpdateString,
});

export type UserUndeleteMessagesSuccessResult = Static<typeof UserUndeleteMessagesSuccessResult>;
export const UserUndeleteMessagesSuccessResult = Type.Object({
    messages: Type.Array(Message),
});

export type UserUndeleteMessagesResponse = Static<typeof UserUndeleteMessagesResponse>;
export const UserUndeleteMessagesResponse = Type.Union([
    Type.Object({
        Success: UserUndeleteMessagesSuccessResult,
    }),
    Type.Literal("ChatNotFound"),
    Type.Literal("UserSuspended"),
]);

export type DirectChatSummary = Static<typeof DirectChatSummary>;
export const DirectChatSummary = Type.Object({
    them: UserId,
    last_updated: Type.BigInt(),
    latest_message: EventWrapperMessage,
    latest_event_index: EventIndex,
    latest_message_index: MessageIndex,
    date_created: Type.BigInt(),
    read_by_me_up_to: Type.Optional(MessageIndex),
    read_by_them_up_to: Type.Optional(MessageIndex),
    notifications_muted: Type.Boolean(),
    metrics: ChatMetrics,
    my_metrics: ChatMetrics,
    archived: Type.Boolean(),
    events_ttl: Type.Optional(Type.BigInt()),
    events_ttl_last_updated: Type.BigInt(),
    video_call_in_progress: Type.Optional(VideoCall),
});

export type MessagesResponse = Static<typeof MessagesResponse>;
export const MessagesResponse = Type.Object({
    messages: Type.Array(EventWrapperMessage),
    latest_event_index: EventIndex,
    chat_last_updated: Type.BigInt(),
});

export type GroupCanisterGroupChatSummary = Static<typeof GroupCanisterGroupChatSummary>;
export const GroupCanisterGroupChatSummary = Type.Object({
    chat_id: ChatId,
    local_user_index_canister_id: PrincipalTS,
    last_updated: Type.BigInt(),
    name: Type.String(),
    description: Type.String(),
    subtype: Type.Optional(GroupSubtype),
    avatar_id: Type.Optional(Type.BigInt()),
    is_public: Type.Boolean(),
    history_visible_to_new_joiners: Type.Boolean(),
    messages_visible_to_non_members: Type.Boolean(),
    min_visible_event_index: EventIndex,
    min_visible_message_index: MessageIndex,
    latest_message: Type.Optional(EventWrapperMessage),
    latest_event_index: EventIndex,
    latest_message_index: Type.Optional(MessageIndex),
    joined: Type.BigInt(),
    participant_count: Type.Number(),
    role: GroupRole,
    mentions: Type.Array(HydratedMention),
    wasm_version: BuildVersion,
    permissions_v2: GroupPermissions,
    notifications_muted: Type.Boolean(),
    metrics: ChatMetrics,
    my_metrics: ChatMetrics,
    latest_threads: Type.Array(GroupCanisterThreadDetails),
    frozen: Type.Optional(FrozenGroupInfo),
    date_last_pinned: Type.Optional(Type.BigInt()),
    events_ttl: Type.Optional(Type.BigInt()),
    events_ttl_last_updated: Type.BigInt(),
    gate: Type.Optional(AccessGate),
    rules_accepted: Type.Boolean(),
    membership: Type.Optional(GroupMembership),
    video_call_in_progress: Type.Optional(VideoCall),
});

export type EventWrapperChatEvent = Static<typeof EventWrapperChatEvent>;
export const EventWrapperChatEvent = Type.Object({
    index: EventIndex,
    timestamp: Type.BigInt(),
    correlation_id: Type.BigInt(),
    expires_at: Type.Optional(Type.BigInt()),
    event: ChatEvent,
});

export type GroupCanisterGroupChatSummaryUpdates = Static<
    typeof GroupCanisterGroupChatSummaryUpdates
>;
export const GroupCanisterGroupChatSummaryUpdates = Type.Object({
    chat_id: ChatId,
    last_updated: Type.BigInt(),
    name: Type.Optional(Type.String()),
    description: Type.Optional(Type.String()),
    subtype: OptionUpdateGroupSubtype,
    avatar_id: OptionUpdateU128,
    latest_message: Type.Optional(EventWrapperMessage),
    latest_event_index: Type.Optional(EventIndex),
    latest_message_index: Type.Optional(MessageIndex),
    participant_count: Type.Optional(Type.Number()),
    role: Type.Optional(GroupRole),
    mentions: Type.Array(HydratedMention),
    wasm_version: Type.Optional(BuildVersion),
    permissions_v2: Type.Optional(GroupPermissions),
    updated_events: Type.Array(
        Type.Tuple([Type.Union([MessageIndex, Type.Null()]), EventIndex, Type.BigInt()])
    ),
    metrics: Type.Optional(ChatMetrics),
    my_metrics: Type.Optional(ChatMetrics),
    is_public: Type.Optional(Type.Boolean()),
    messages_visible_to_non_members: Type.Optional(Type.Boolean()),
    latest_threads: Type.Array(GroupCanisterThreadDetails),
    unfollowed_threads: Type.Array(MessageIndex),
    notifications_muted: Type.Optional(Type.Boolean()),
    frozen: OptionUpdateFrozenGroupInfo,
    date_last_pinned: Type.Optional(Type.BigInt()),
    events_ttl: OptionUpdateU64,
    events_ttl_last_updated: Type.Optional(Type.BigInt()),
    gate: OptionUpdateAccessGate,
    rules_accepted: Type.Optional(Type.Boolean()),
    membership: Type.Optional(GroupMembershipUpdates),
    video_call_in_progress: OptionUpdateVideoCall,
});

export type DirectChatSummaryUpdates = Static<typeof DirectChatSummaryUpdates>;
export const DirectChatSummaryUpdates = Type.Object({
    chat_id: ChatId,
    last_updated: Type.BigInt(),
    latest_message: Type.Optional(EventWrapperMessage),
    latest_event_index: Type.Optional(EventIndex),
    latest_message_index: Type.Optional(MessageIndex),
    read_by_me_up_to: Type.Optional(MessageIndex),
    read_by_them_up_to: Type.Optional(MessageIndex),
    notifications_muted: Type.Optional(Type.Boolean()),
    updated_events: Type.Array(Type.Tuple([EventIndex, Type.BigInt()])),
    metrics: Type.Optional(ChatMetrics),
    my_metrics: Type.Optional(ChatMetrics),
    archived: Type.Optional(Type.Boolean()),
    events_ttl: OptionUpdateU64,
    events_ttl_last_updated: Type.Optional(Type.BigInt()),
    video_call_in_progress: OptionUpdateVideoCall,
});

export type PublicGroupSummary = Static<typeof PublicGroupSummary>;
export const PublicGroupSummary = Type.Object({
    chat_id: ChatId,
    local_user_index_canister_id: PrincipalTS,
    last_updated: Type.BigInt(),
    name: Type.String(),
    description: Type.String(),
    subtype: Type.Optional(GroupSubtype),
    history_visible_to_new_joiners: Type.Boolean(),
    messages_visible_to_non_members: Type.Boolean(),
    avatar_id: Type.Optional(Type.BigInt()),
    latest_message: Type.Optional(EventWrapperMessage),
    latest_event_index: EventIndex,
    latest_message_index: Type.Optional(MessageIndex),
    participant_count: Type.Number(),
    wasm_version: BuildVersion,
    is_public: Type.Boolean(),
    frozen: Type.Optional(FrozenGroupInfo),
    events_ttl: Type.Optional(Type.BigInt()),
    events_ttl_last_updated: Type.BigInt(),
    gate: Type.Optional(AccessGate),
});

export type CommunityCanisterChannelSummary = Static<typeof CommunityCanisterChannelSummary>;
export const CommunityCanisterChannelSummary = Type.Object({
    channel_id: Type.BigInt(),
    last_updated: Type.BigInt(),
    name: Type.String(),
    description: Type.String(),
    subtype: Type.Optional(GroupSubtype),
    avatar_id: Type.Optional(Type.BigInt()),
    is_public: Type.Boolean(),
    history_visible_to_new_joiners: Type.Boolean(),
    messages_visible_to_non_members: Type.Boolean(),
    min_visible_event_index: EventIndex,
    min_visible_message_index: MessageIndex,
    latest_message: Type.Optional(EventWrapperMessage),
    latest_message_sender_display_name: Type.Optional(Type.String()),
    latest_event_index: EventIndex,
    latest_message_index: Type.Optional(MessageIndex),
    member_count: Type.Number(),
    permissions_v2: GroupPermissions,
    metrics: ChatMetrics,
    date_last_pinned: Type.Optional(Type.BigInt()),
    events_ttl: Type.Optional(Type.BigInt()),
    events_ttl_last_updated: Type.BigInt(),
    gate: Type.Optional(AccessGate),
    membership: Type.Optional(GroupMembership),
    video_call_in_progress: Type.Optional(VideoCall),
    is_invited: Type.Optional(Type.Boolean()),
    external_url: Type.Optional(Type.String()),
});

export type GroupIndexRecommendedGroupsSuccessResult = Static<
    typeof GroupIndexRecommendedGroupsSuccessResult
>;
export const GroupIndexRecommendedGroupsSuccessResult = Type.Object({
    groups: Type.Array(PublicGroupSummary),
});

export type GroupIndexRecommendedGroupsResponse = Static<
    typeof GroupIndexRecommendedGroupsResponse
>;
export const GroupIndexRecommendedGroupsResponse = Type.Object({
    Success: GroupIndexRecommendedGroupsSuccessResult,
});

export type LocalUserIndexJoinGroupResponse = Static<typeof LocalUserIndexJoinGroupResponse>;
export const LocalUserIndexJoinGroupResponse = Type.Union([
    Type.Object({
        Success: GroupCanisterGroupChatSummary,
    }),
    Type.Literal("AlreadyInGroup"),
    Type.Object({
        AlreadyInGroupV2: GroupCanisterGroupChatSummary,
    }),
    Type.Object({
        GateCheckFailed: GateCheckFailedReason,
    }),
    Type.Literal("GroupNotFound"),
    Type.Literal("GroupNotPublic"),
    Type.Literal("NotInvited"),
    Type.Object({
        ParticipantLimitReached: Type.Number(),
    }),
    Type.Literal("Blocked"),
    Type.Literal("UserSuspended"),
    Type.Literal("ChatFrozen"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type UserInitialStateDirectChatsInitial = Static<typeof UserInitialStateDirectChatsInitial>;
export const UserInitialStateDirectChatsInitial = Type.Object({
    summaries: Type.Array(DirectChatSummary),
    pinned: Type.Array(ChatId),
});

export type UserUpdatesDirectChatsUpdates = Static<typeof UserUpdatesDirectChatsUpdates>;
export const UserUpdatesDirectChatsUpdates = Type.Object({
    added: Type.Array(DirectChatSummary),
    updated: Type.Array(DirectChatSummaryUpdates),
    removed: Type.Array(ChatId),
    pinned: Type.Optional(Type.Array(ChatId)),
});

export type UserMessagesByMessageIndexResponse = Static<typeof UserMessagesByMessageIndexResponse>;
export const UserMessagesByMessageIndexResponse = Type.Union([
    Type.Object({
        Success: MessagesResponse,
    }),
    Type.Literal("ChatNotFound"),
    Type.Literal("ThreadMessageNotFound"),
    Type.Object({
        ReplicaNotUpToDateV2: Type.BigInt(),
    }),
]);

export type EventsResponse = Static<typeof EventsResponse>;
export const EventsResponse = Type.Object({
    events: Type.Array(EventWrapperChatEvent),
    expired_event_ranges: Type.Array(Type.Tuple([EventIndex, EventIndex])),
    expired_message_ranges: Type.Array(Type.Tuple([MessageIndex, MessageIndex])),
    latest_event_index: EventIndex,
    chat_last_updated: Type.BigInt(),
});

export type CommunityCanisterCommunitySummary = Static<typeof CommunityCanisterCommunitySummary>;
export const CommunityCanisterCommunitySummary = Type.Object({
    community_id: CommunityId,
    local_user_index_canister_id: PrincipalTS,
    last_updated: Type.BigInt(),
    name: Type.String(),
    description: Type.String(),
    avatar_id: Type.Optional(Type.BigInt()),
    banner_id: Type.Optional(Type.BigInt()),
    is_public: Type.Boolean(),
    member_count: Type.Number(),
    permissions: CommunityPermissions,
    frozen: Type.Optional(FrozenGroupInfo),
    gate: Type.Optional(AccessGate),
    primary_language: Type.String(),
    latest_event_index: EventIndex,
    channels: Type.Array(CommunityCanisterChannelSummary),
    membership: Type.Optional(CommunityMembership),
    user_groups: Type.Array(UserGroupSummary),
    is_invited: Type.Optional(Type.Boolean()),
    metrics: ChatMetrics,
});

export type CommunityCanisterCommunitySummaryUpdates = Static<
    typeof CommunityCanisterCommunitySummaryUpdates
>;
export const CommunityCanisterCommunitySummaryUpdates = Type.Object({
    community_id: CommunityId,
    last_updated: Type.BigInt(),
    name: Type.Optional(Type.String()),
    description: Type.Optional(Type.String()),
    avatar_id: OptionUpdateU128,
    banner_id: OptionUpdateU128,
    is_public: Type.Optional(Type.Boolean()),
    member_count: Type.Optional(Type.Number()),
    permissions: Type.Optional(CommunityPermissions),
    frozen: OptionUpdateFrozenGroupInfo,
    gate: OptionUpdateAccessGate,
    primary_language: Type.Optional(Type.String()),
    latest_event_index: Type.Optional(EventIndex),
    channels_added: Type.Array(CommunityCanisterChannelSummary),
    channels_updated: Type.Array(CommunityCanisterChannelSummaryUpdates),
    channels_removed: Type.Array(Type.BigInt()),
    membership: Type.Optional(CommunityMembershipUpdates),
    user_groups: Type.Array(UserGroupSummary),
    user_groups_deleted: Type.Array(Type.Number()),
    metrics: Type.Optional(ChatMetrics),
});

export type LocalUserIndexChatEventsEventsResponse = Static<
    typeof LocalUserIndexChatEventsEventsResponse
>;
export const LocalUserIndexChatEventsEventsResponse = Type.Union([
    Type.Object({
        Success: EventsResponse,
    }),
    Type.Literal("NotFound"),
    Type.Object({
        ReplicaNotUpToDate: Type.BigInt(),
    }),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type LocalUserIndexChatEventsSuccessResult = Static<
    typeof LocalUserIndexChatEventsSuccessResult
>;
export const LocalUserIndexChatEventsSuccessResult = Type.Object({
    responses: Type.Array(LocalUserIndexChatEventsEventsResponse),
    timestamp: Type.BigInt(),
});

export type LocalUserIndexChatEventsResponse = Static<typeof LocalUserIndexChatEventsResponse>;
export const LocalUserIndexChatEventsResponse = Type.Object({
    Success: LocalUserIndexChatEventsSuccessResult,
});

export type LocalUserIndexJoinCommunityResponse = Static<
    typeof LocalUserIndexJoinCommunityResponse
>;
export const LocalUserIndexJoinCommunityResponse = Type.Union([
    Type.Object({
        Success: CommunityCanisterCommunitySummary,
    }),
    Type.Object({
        AlreadyInCommunity: CommunityCanisterCommunitySummary,
    }),
    Type.Object({
        GateCheckFailed: GateCheckFailedReason,
    }),
    Type.Literal("CommunityNotFound"),
    Type.Literal("CommunityNotPublic"),
    Type.Literal("NotInvited"),
    Type.Object({
        MemberLimitReached: Type.Number(),
    }),
    Type.Literal("UserBlocked"),
    Type.Literal("UserSuspended"),
    Type.Literal("CommunityFrozen"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type LocalUserIndexJoinChannelResponse = Static<typeof LocalUserIndexJoinChannelResponse>;
export const LocalUserIndexJoinChannelResponse = Type.Union([
    Type.Object({
        Success: CommunityCanisterChannelSummary,
    }),
    Type.Object({
        SuccessJoinedCommunity: CommunityCanisterCommunitySummary,
    }),
    Type.Object({
        AlreadyInChannel: CommunityCanisterChannelSummary,
    }),
    Type.Object({
        GateCheckFailed: GateCheckFailedReason,
    }),
    Type.Literal("CommunityNotFound"),
    Type.Literal("CommunityNotPublic"),
    Type.Literal("ChannelNotFound"),
    Type.Object({
        MemberLimitReached: Type.Number(),
    }),
    Type.Literal("UserBlocked"),
    Type.Literal("UserSuspended"),
    Type.Literal("CommunityFrozen"),
    Type.Literal("NotInvited"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type LocalUserIndexGroupAndCommunitySummaryUpdatesSummaryUpdatesResponse = Static<
    typeof LocalUserIndexGroupAndCommunitySummaryUpdatesSummaryUpdatesResponse
>;
export const LocalUserIndexGroupAndCommunitySummaryUpdatesSummaryUpdatesResponse = Type.Union([
    Type.Object({
        SuccessGroup: GroupCanisterGroupChatSummary,
    }),
    Type.Object({
        SuccessCommunity: CommunityCanisterCommunitySummary,
    }),
    Type.Object({
        SuccessGroupUpdates: GroupCanisterGroupChatSummaryUpdates,
    }),
    Type.Object({
        SuccessCommunityUpdates: CommunityCanisterCommunitySummaryUpdates,
    }),
    Type.Literal("SuccessNoUpdates"),
    Type.Literal("NotFound"),
    Type.Object({
        InternalError: Type.String(),
    }),
]);

export type LocalUserIndexGroupAndCommunitySummaryUpdatesResponse = Static<
    typeof LocalUserIndexGroupAndCommunitySummaryUpdatesResponse
>;
export const LocalUserIndexGroupAndCommunitySummaryUpdatesResponse = Type.Object({
    Success: Type.Array(LocalUserIndexGroupAndCommunitySummaryUpdatesSummaryUpdatesResponse),
});

export type UserEventsResponse = Static<typeof UserEventsResponse>;
export const UserEventsResponse = Type.Union([
    Type.Object({
        Success: EventsResponse,
    }),
    Type.Literal("ChatNotFound"),
    Type.Literal("ThreadMessageNotFound"),
    Type.Object({
        ReplicaNotUpToDateV2: Type.BigInt(),
    }),
]);

export type UserInitialStateSuccessResult = Static<typeof UserInitialStateSuccessResult>;
export const UserInitialStateSuccessResult = Type.Object({
    timestamp: Type.BigInt(),
    direct_chats: UserInitialStateDirectChatsInitial,
    group_chats: UserInitialStateGroupChatsInitial,
    favourite_chats: UserInitialStateFavouriteChatsInitial,
    communities: UserInitialStateCommunitiesInitial,
    avatar_id: Type.Optional(Type.BigInt()),
    blocked_users: Type.Array(UserId),
    suspended: Type.Boolean(),
    pin_number_settings: Type.Optional(PinNumberSettings),
    local_user_index_canister_id: PrincipalTS,
    achievements: Type.Array(ChitEarned),
    achievements_last_seen: Type.BigInt(),
    total_chit_earned: Type.Number(),
    chit_balance: Type.Number(),
    streak: Type.Number(),
    streak_ends: Type.BigInt(),
    next_daily_claim: Type.BigInt(),
    is_unique_person: Type.Boolean(),
    wallet_config: UserWalletConfig,
    referrals: Type.Array(UserReferral),
});

export type UserInitialStateResponse = Static<typeof UserInitialStateResponse>;
export const UserInitialStateResponse = Type.Object({
    Success: UserInitialStateSuccessResult,
});

export type UserUpdatesSuccessResult = Static<typeof UserUpdatesSuccessResult>;
export const UserUpdatesSuccessResult = Type.Object({
    timestamp: Type.BigInt(),
    username: Type.Optional(Type.String()),
    display_name: OptionUpdateString,
    direct_chats: UserUpdatesDirectChatsUpdates,
    group_chats: UserUpdatesGroupChatsUpdates,
    favourite_chats: UserUpdatesFavouriteChatsUpdates,
    communities: UserUpdatesCommunitiesUpdates,
    avatar_id: OptionUpdateU128,
    blocked_users: Type.Optional(Type.Array(UserId)),
    suspended: Type.Optional(Type.Boolean()),
    pin_number_settings: OptionUpdatePinNumberSettings,
    achievements: Type.Array(ChitEarned),
    achievements_last_seen: Type.Optional(Type.BigInt()),
    total_chit_earned: Type.Number(),
    chit_balance: Type.Number(),
    streak: Type.Number(),
    streak_ends: Type.BigInt(),
    next_daily_claim: Type.BigInt(),
    is_unique_person: Type.Optional(Type.Boolean()),
    wallet_config: Type.Optional(UserWalletConfig),
    referrals: Type.Array(UserReferral),
});

export type UserUpdatesResponse = Static<typeof UserUpdatesResponse>;
export const UserUpdatesResponse = Type.Union([
    Type.Object({
        Success: UserUpdatesSuccessResult,
    }),
    Type.Literal("SuccessNoUpdates"),
]);
