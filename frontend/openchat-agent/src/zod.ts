// Generated by ts-to-zod
import { z } from "zod";
import type {
    CompositeGate,
    AccessGate,
    GroupIndex_RecommendedGroups_SuccessResult,
    PublicGroupSummary,
    GroupIndex_RecommendedGroups_Response,
    GroupIndex_ExploreCommunities_Response,
    GroupIndex_ExploreCommunities_SuccessResult,
    CommunityMatch,
    GroupIndex_ExploreGroups_SuccessResult,
    GroupMatch,
    GroupIndex_ExploreGroups_Response,
} from "../tsBindingsMerged";

export const messageReminderContentSchema = z.object({
    reminder_id: z.coerce.bigint(),
    notes: z.string().optional(),
});

export const pollConfigSchema = z.object({
    text: z.string().optional(),
    options: z.array(z.string()),
    end_date: z.coerce.bigint().optional(),
    anonymous: z.boolean(),
    show_votes_before_end_date: z.boolean(),
    allow_multiple_votes_per_user: z.boolean(),
    allow_user_to_change_vote: z.boolean(),
});

export const thumbnailDataSchema = z.string();

export const blobReferenceSchema = z.object({
    canister_id: z.string(),
    blob_id: z.coerce.bigint(),
});

export const reactionSchema = z.string();

export const principalSchema = z.string();

export const userIdSchema = z.string();

export const messageIndexSchema = z.number();

export const videoCallTypeSchema = z.union([z.literal("Broadcast"), z.literal("Default")]);

export const callParticipantSchema = z.object({
    user_id: userIdSchema,
    joined: z.coerce.bigint(),
});

export const eventIndexSchema = z.number();

export const groupFrozenSchema = z.object({
    frozen_by: userIdSchema,
    reason: z.string().optional(),
});

export const governanceProposalsSubtypeSchema = z.object({
    is_nns: z.boolean(),
    governance_canister_id: principalSchema,
});

export const accountICRC1Schema = z.object({
    owner: principalSchema,
    subaccount: z
        .tuple([
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
            z.number(),
        ])
        .optional(),
});

export const diamondMembershipPlanDurationSchema = z.union([
    z.literal("OneMonth"),
    z.literal("ThreeMonths"),
    z.literal("OneYear"),
    z.literal("Lifetime"),
]);

export const suspensionActionSchema = z.union([
    z.object({
        Unsuspend: z.coerce.bigint(),
    }),
    z.object({
        Delete: z.coerce.bigint(),
    }),
]);

export const giphyImageVariantSchema = z.object({
    width: z.number(),
    height: z.number(),
    url: z.string(),
    mime_type: z.string(),
});

export const p2PSwapReservedSchema = z.object({
    reserved_by: userIdSchema,
});

export const snsNeuronGateSchema = z.object({
    governance_canister_id: principalSchema,
    min_stake_e8s: z.coerce.bigint().optional(),
    min_dissolve_delay: z.coerce.bigint().optional(),
});

export const diamondMembershipStatusSchema = z.union([
    z.literal("Inactive"),
    z.literal("Active"),
    z.literal("Lifetime"),
]);

export const cryptocurrencySchema = z.union([
    z.literal("InternetComputer"),
    z.literal("SNS1"),
    z.literal("CKBTC"),
    z.literal("CHAT"),
    z.literal("KINIC"),
    z.object({
        Other: z.string(),
    }),
]);

export const cryptoAccountICRC1Schema = z.union([
    z.literal("Mint"),
    z.object({
        Account: accountICRC1Schema,
    }),
]);

export const proposalDecisionStatusSchema = z.union([
    z.literal("Unspecified"),
    z.literal("Open"),
    z.literal("Rejected"),
    z.literal("Adopted"),
    z.literal("Executed"),
    z.literal("Failed"),
]);

export const canisterUpgradeStatusSchema = z.union([
    z.literal("InProgress"),
    z.literal("NotRequired"),
]);

export const chatIdSchema = z.string();

export const proposalRewardStatusSchema = z.union([
    z.literal("Unspecified"),
    z.literal("AcceptVotes"),
    z.literal("ReadyToSettle"),
    z.literal("Settled"),
]);

export const tallySchema = z.object({
    yes: z.coerce.bigint(),
    no: z.coerce.bigint(),
    total: z.coerce.bigint(),
    timestamp: z.coerce.bigint(),
});

export const groupUnfrozenSchema = z.object({
    unfrozen_by: userIdSchema,
});

export const pendingCryptoTransactionICRC1Schema = z.object({
    ledger: z.string(),
    token: cryptocurrencySchema,
    amount: z.coerce.bigint(),
    to: accountICRC1Schema,
    fee: z.coerce.bigint(),
    memo: z.array(z.number()).optional(),
    created: z.coerce.bigint(),
});

export const pendingCryptoTransactionICRC2Schema = z.object({
    ledger: principalSchema,
    token: cryptocurrencySchema,
    amount: z.coerce.bigint(),
    from: accountICRC1Schema,
    to: accountICRC1Schema,
    fee: z.coerce.bigint(),
    memo: z.array(z.number()).optional(),
    created: z.coerce.bigint(),
});

export const prizeContentSchema = z.object({
    prizes_remaining: z.number(),
    prizes_pending: z.number(),
    winners: z.array(userIdSchema),
    token: cryptocurrencySchema,
    end_date: z.coerce.bigint(),
    caption: z.string().optional(),
    diamond_only: z.boolean(),
});

export const userSummaryVolatileSchema = z.object({
    total_chit_earned: z.number(),
    chit_balance: z.number(),
    streak: z.number(),
});

export const p2PSwapCancelledSchema = z.object({
    token0_txn_out: z.coerce.bigint().optional(),
});

export const p2PSwapAcceptedSchema = z.object({
    accepted_by: userIdSchema,
    token1_txn_in: z.coerce.bigint(),
});

export const p2PSwapCompletedSchema = z.object({
    accepted_by: userIdSchema,
    token1_txn_in: z.coerce.bigint(),
    token0_txn_out: z.coerce.bigint(),
    token1_txn_out: z.coerce.bigint(),
});

export const totalVotesSchema = z.union([
    z.object({
        Visible: z.record(z.array(userIdSchema)),
    }),
    z.object({
        Anonymous: z.record(z.number()),
    }),
    z.object({
        Hidden: z.number(),
    }),
]);

export const deletedGroupInfoSchema = z.object({
    id: chatIdSchema,
    timestamp: z.coerce.bigint(),
    deleted_by: userIdSchema,
    group_name: z.string(),
    name: z.string(),
    public: z.boolean(),
});

export const diamondMembershipFeesByDurationSchema = z.object({
    one_month: z.coerce.bigint(),
    three_months: z.coerce.bigint(),
    one_year: z.coerce.bigint(),
    lifetime: z.coerce.bigint(),
});

export const fileContentSchema = z.object({
    name: z.string(),
    caption: z.string().optional(),
    mime_type: z.string(),
    file_size: z.number(),
    blob_reference: blobReferenceSchema.optional(),
});

export const botConfigSchema = z.object({
    is_oc_controlled: z.boolean(),
    supports_direct_messages: z.boolean(),
    can_be_added_to_groups: z.boolean(),
});

export const customContentSchema = z.object({
    kind: z.string(),
    data: z.array(z.number()),
});

export const failedCryptoTransactionICRC1Schema = z.object({
    ledger: principalSchema,
    token: cryptocurrencySchema,
    amount: z.coerce.bigint(),
    fee: z.coerce.bigint(),
    from: cryptoAccountICRC1Schema,
    to: cryptoAccountICRC1Schema,
    memo: z.array(z.number()).optional(),
    created: z.coerce.bigint(),
    error_message: z.string(),
});

export const suspensionDetailsSchema = z.object({
    reason: z.string(),
    action: suspensionActionSchema,
    suspended_by: userIdSchema,
});

export const communityIdSchema = z.string();

export const deletedBySchema = z.object({
    deleted_by: userIdSchema,
    timestamp: z.coerce.bigint(),
});

export const completedCryptoTransactionICRC1Schema = z.object({
    ledger: principalSchema,
    token: cryptocurrencySchema,
    amount: z.coerce.bigint(),
    from: cryptoAccountICRC1Schema,
    to: cryptoAccountICRC1Schema,
    fee: z.coerce.bigint(),
    memo: z.array(z.number()).optional(),
    created: z.coerce.bigint(),
    block_index: z.coerce.bigint(),
});

export const completedCryptoTransactionICRC2Schema = z.object({
    ledger: principalSchema,
    token: cryptocurrencySchema,
    amount: z.coerce.bigint(),
    spender: userIdSchema,
    from: cryptoAccountICRC1Schema,
    to: cryptoAccountICRC1Schema,
    fee: z.coerce.bigint(),
    memo: z.array(z.number()).optional(),
    created: z.coerce.bigint(),
    block_index: z.coerce.bigint(),
});

export const tokenBalanceGateSchema = z.object({
    ledger_canister_id: principalSchema,
    min_balance: z.coerce.bigint(),
});

export const tokenInfoSchema = z.object({
    token: cryptocurrencySchema,
    ledger: principalSchema,
    decimals: z.number(),
    fee: z.coerce.bigint(),
});

export const tokensSchema = z.object({
    e8s: z.coerce.bigint(),
});

export const cryptoAccountNNSSchema = z.union([
    z.literal("Mint"),
    z.object({
        Account: z.string(),
    }),
]);

export const tipsSchema = z.array(
    z.tuple([principalSchema, z.array(z.tuple([userIdSchema, z.coerce.bigint()]))]),
);

export const groupIndexRecommendedGroupsArgsSchema = z.object({
    count: z.number(),
    exclusions: z.array(chatIdSchema),
});

export const groupIndexFreezeGroupSuspensionDetailsSchema = z.object({
    duration: z.coerce.bigint().optional(),
    reason: z.string(),
});

export const eventWrapperGroupFrozenSchema = z.object({
    index: eventIndexSchema,
    timestamp: z.coerce.bigint(),
    correlation_id: z.coerce.bigint(),
    expires_at: z.coerce.bigint().optional(),
    event: groupFrozenSchema,
});

export const groupIndexAddHotGroupExclusionArgsSchema = z.object({
    chat_id: chatIdSchema,
});

export const groupIndexAddHotGroupExclusionResponseSchema = z.union([
    z.literal("Success"),
    z.literal("ChatAlreadyExcluded"),
    z.literal("ChatNotFound"),
    z.literal("NotAuthorized"),
    z.object({
        InternalError: z.string(),
    }),
]);

export const groupIndexMarkLocalGroupIndexFullResponseSchema = z.union([
    z.literal("Success"),
    z.literal("LocalGroupIndexNotFound"),
    z.literal("NotAuthorized"),
    z.object({
        InternalError: z.string(),
    }),
]);

export const groupIndexMarkLocalGroupIndexFullArgsSchema = z.object({
    canister_id: principalSchema,
    full: z.boolean(),
});

export const groupIndexLookupChannelByGroupIdSuccessResultSchema = z.object({
    community_id: communityIdSchema,
    channel_id: z.coerce.bigint(),
});

export const groupIndexLookupChannelByGroupIdResponseSchema = z.union([
    z.object({
        Success: groupIndexLookupChannelByGroupIdSuccessResultSchema,
    }),
    z.literal("NotFound"),
]);

export const groupIndexLookupChannelByGroupIdArgsSchema = z.object({
    group_id: chatIdSchema,
});

export const groupIndexExploreCommunitiesArgsSchema = z.object({
    search_term: z.string().optional(),
    languages: z.array(z.string()),
    page_index: z.number(),
    page_size: z.number(),
    include_moderation_flags: z.number(),
});

export const groupIndexFreezeCommunityResponseSchema = z.union([
    z.object({
        Success: eventWrapperGroupFrozenSchema,
    }),
    z.literal("CommunityAlreadyFrozen"),
    z.literal("CommunityNotFound"),
    z.literal("NotAuthorized"),
    z.object({
        InternalError: z.string(),
    }),
]);

export const groupIndexFreezeCommunitySuspensionDetailsSchema = z.object({
    duration: z.coerce.bigint().optional(),
    reason: z.string(),
});

export const groupIndexFreezeCommunityArgsSchema = z.object({
    community_id: communityIdSchema,
    reason: z.string().optional(),
    suspend_members: groupIndexFreezeCommunitySuspensionDetailsSchema.optional(),
});

export const groupIndexSetGroupUpgradeConcurrencyResponseSchema = z.union([
    z.literal("Success"),
    z.literal("NotAuthorized"),
    z.object({
        InternalError: z.string(),
    }),
]);

export const groupIndexSetGroupUpgradeConcurrencyArgsSchema = z.object({
    value: z.number(),
});

export const groupIndexDeleteFrozenGroupResponseSchema = z.union([
    z.literal("Success"),
    z.literal("ChatNotFrozen"),
    z.literal("ChatNotFound"),
    z.literal("NotAuthorized"),
    z.object({
        InternalError: z.string(),
    }),
]);

export const groupIndexDeleteFrozenGroupArgsSchema = z.object({
    chat_id: chatIdSchema,
});

export const groupIndexSetCommunityModerationFlagsResponseSchema = z.union([
    z.literal("Success"),
    z.literal("Unchanged"),
    z.literal("CommunityNotFound"),
    z.literal("NotAuthorized"),
    z.literal("InvalidFlags"),
    z.object({
        InternalError: z.string(),
    }),
]);

export const groupIndexSetCommunityModerationFlagsArgsSchema = z.object({
    community_id: communityIdSchema,
    flags: z.number(),
});

export const groupIndexRemoveHotGroupExclusionArgsSchema = z.object({
    chat_id: chatIdSchema,
});

export const groupIndexRemoveHotGroupExclusionResponseSchema = z.union([
    z.literal("Success"),
    z.literal("ChatNotExcluded"),
    z.literal("ChatNotFound"),
    z.literal("NotAuthorized"),
    z.object({
        InternalError: z.string(),
    }),
]);

export const groupIndexExploreGroupsArgsSchema = z.object({
    search_term: z.string().optional(),
    page_index: z.number(),
    page_size: z.number(),
});

export const deletedCommunityInfoSchema = z.object({
    id: communityIdSchema,
    timestamp: z.coerce.bigint(),
    deleted_by: userIdSchema,
    name: z.string(),
    public: z.boolean(),
});

export const groupIndexActiveGroupsArgsSchema = z.object({
    group_ids: z.array(chatIdSchema),
    community_ids: z.array(communityIdSchema),
    active_since: z.coerce.bigint().optional(),
});

export const groupIndexActiveGroupsSuccessResultSchema = z.object({
    timestamp: z.coerce.bigint(),
    active_groups: z.array(chatIdSchema),
    active_communities: z.array(communityIdSchema),
    deleted_groups: z.array(deletedGroupInfoSchema),
    deleted_communities: z.array(deletedCommunityInfoSchema),
});

export const groupIndexSetCommunityUpgradeConcurrencyArgsSchema = z.object({
    value: z.number(),
});

export const groupIndexSetCommunityUpgradeConcurrencyResponseSchema = z.union([
    z.literal("Success"),
    z.literal("NotAuthorized"),
    z.object({
        InternalError: z.string(),
    }),
]);

export const groupIndexUnfreezeGroupArgsSchema = z.object({
    chat_id: chatIdSchema,
});

export const eventWrapperGroupUnfrozenSchema = z.object({
    index: eventIndexSchema,
    timestamp: z.coerce.bigint(),
    correlation_id: z.coerce.bigint(),
    expires_at: z.coerce.bigint().optional(),
    event: groupUnfrozenSchema,
});

export const failedCryptoTransactionICRC2Schema = z.object({
    ledger: principalSchema,
    token: cryptocurrencySchema,
    amount: z.coerce.bigint(),
    fee: z.coerce.bigint(),
    spender: userIdSchema,
    from: cryptoAccountICRC1Schema,
    to: cryptoAccountICRC1Schema,
    memo: z.array(z.number()).optional(),
    created: z.coerce.bigint(),
    error_message: z.string(),
});

export const nnsProposalSchema = z.object({
    id: z.coerce.bigint(),
    topic: z.number(),
    proposer: z.coerce.bigint(),
    created: z.coerce.bigint(),
    title: z.string(),
    summary: z.string(),
    url: z.string(),
    status: proposalDecisionStatusSchema,
    reward_status: proposalRewardStatusSchema,
    tally: tallySchema,
    deadline: z.coerce.bigint(),
    payload_text_rendering: z.string().optional(),
    last_updated: z.coerce.bigint(),
});

export const snsProposalSchema = z.object({
    id: z.coerce.bigint(),
    action: z.coerce.bigint(),
    proposer: z.tuple([
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
    ]),
    created: z.coerce.bigint(),
    title: z.string(),
    summary: z.string(),
    url: z.string(),
    status: proposalDecisionStatusSchema,
    reward_status: proposalRewardStatusSchema,
    tally: tallySchema,
    deadline: z.coerce.bigint(),
    payload_text_rendering: z.string().optional(),
    minimum_yes_proportion_of_total: z.number(),
    minimum_yes_proportion_of_exercised: z.number(),
    last_updated: z.coerce.bigint(),
});

export const userOrAccountSchema = z.union([
    z.object({
        User: userIdSchema,
    }),
    z.object({
        Account: z.string(),
    }),
]);

export const messageIdSchema = z.coerce.bigint();

export const threadSummarySchema = z.object({
    participant_ids: z.array(userIdSchema),
    followed_by_me: z.boolean(),
    reply_count: z.number(),
    latest_event_index: eventIndexSchema,
    latest_event_timestamp: z.coerce.bigint(),
});

export const groupSubtypeSchema = z.object({
    GovernanceProposals: governanceProposalsSubtypeSchema,
});

export const buildVersionSchema = z.object({
    major: z.number(),
    minor: z.number(),
    patch: z.number(),
});

export const frozenGroupInfoSchema = z.object({
    timestamp: z.coerce.bigint(),
    frozen_by: userIdSchema,
    reason: z.string().optional(),
});

export const textContentSchema = z.object({
    text: z.string(),
});

export const imageContentSchema = z.object({
    width: z.number(),
    height: z.number(),
    thumbnail_data: thumbnailDataSchema,
    caption: z.string().optional(),
    mime_type: z.string(),
    blob_reference: blobReferenceSchema.optional(),
});

export const videoContentSchema = z.object({
    width: z.number(),
    height: z.number(),
    thumbnail_data: thumbnailDataSchema,
    caption: z.string().optional(),
    mime_type: z.string(),
    image_blob_reference: blobReferenceSchema.optional(),
    video_blob_reference: blobReferenceSchema.optional(),
});

export const audioContentSchema = z.object({
    caption: z.string().optional(),
    mime_type: z.string(),
    blob_reference: blobReferenceSchema.optional(),
});

export const giphyContentSchema = z.object({
    caption: z.string().optional(),
    title: z.string(),
    desktop: giphyImageVariantSchema,
    mobile: giphyImageVariantSchema,
});

export const messageReminderCreatedContentSchema = z.object({
    reminder_id: z.coerce.bigint(),
    remind_at: z.coerce.bigint(),
    notes: z.string().optional(),
    hidden: z.boolean(),
});

export const videoCallContentSchema = z.object({
    call_type: videoCallTypeSchema,
    ended: z.coerce.bigint().optional(),
    participants: z.array(callParticipantSchema),
    hidden_participants: z.number(),
});

export const chitSchema = z.object({
    balance: z.number(),
    streak: z.number(),
});

export const emptySchema = z.record(z.never());

export const proposalSchema = z.union([
    z.object({
        NNS: nnsProposalSchema,
    }),
    z.object({
        SNS: snsProposalSchema,
    }),
]);

export const chatSchema = z.union([
    z.object({
        Direct: chatIdSchema,
    }),
    z.object({
        Group: chatIdSchema,
    }),
    z.object({
        Channel: z.tuple([communityIdSchema, z.coerce.bigint()]),
    }),
]);

export const userIndexDiamondMembershipFeesDiamondMembershipFeesSchema = z.object({
    token: cryptocurrencySchema,
    one_month: z.coerce.bigint(),
    three_months: z.coerce.bigint(),
    one_year: z.coerce.bigint(),
    lifetime: z.coerce.bigint(),
});

export const userIndexDiamondMembershipFeesResponseSchema = z.object({
    Success: z.array(userIndexDiamondMembershipFeesDiamondMembershipFeesSchema),
});

export const userIndexUsersChitSuccessResultSchema = z.object({
    chit: z.array(chitSchema),
});

export const userIndexUsersChitArgsSchema = z.object({
    users: z.array(userIdSchema),
    year: z.number(),
    month: z.number(),
});

export const userIndexPublicKeyResponseSchema = z.union([
    z.object({
        Success: z.string(),
    }),
    z.literal("NotInitialised"),
]);

export const userIndexUpdateDiamondMembershipSubscriptionResponseSchema = z.union([
    z.literal("Success"),
    z.literal("NotDiamondMember"),
    z.literal("AlreadyLifetimeDiamondMember"),
]);

export const diamondMembershipSubscriptionSchema = z.union([
    z.literal("Disabled"),
    z.literal("OneMonth"),
    z.literal("ThreeMonths"),
    z.literal("OneYear"),
]);

export const userIndexSuspendUserResponseSchema = z.union([
    z.literal("Success"),
    z.literal("UserAlreadySuspended"),
    z.literal("UserNotFound"),
    z.object({
        InternalError: z.string(),
    }),
]);

export const userIndexSuspendUserArgsSchema = z.object({
    user_id: userIdSchema,
    duration: z.coerce.bigint().optional(),
    reason: z.string(),
});

export const userIndexCheckUsernameResponseSchema = z.union([
    z.literal("Success"),
    z.literal("UsernameTaken"),
    z.literal("UsernameInvalid"),
    z.object({
        UsernameTooShort: z.number(),
    }),
    z.object({
        UsernameTooLong: z.number(),
    }),
]);

export const userIndexCheckUsernameArgsSchema = z.object({
    username: z.string(),
});

export const userIndexSetModerationFlagsResponseSchema = z.literal("Success");

export const userIndexSetModerationFlagsArgsSchema = z.object({
    moderation_flags_enabled: z.number(),
});

export const userIndexPlatformOperatorsSuccessResultSchema = z.object({
    users: z.array(userIdSchema),
});

export const userIndexPlatformModeratorsSuccessResultSchema = z.object({
    users: z.array(userIdSchema),
});

export const userIndexSetUserUpgradeConcurrencyResponseSchema = z.literal("Success");

export const userIndexSetUserUpgradeConcurrencyArgsSchema = z.object({
    value: z.number(),
});

export const userIndexSuspectedBotsSuccessResultSchema = z.object({
    users: z.array(userIdSchema),
});

export const userIndexSuspectedBotsArgsSchema = z.object({
    after: userIdSchema.optional(),
    count: z.number(),
});

export const userSummarySchema = z.object({
    user_id: userIdSchema,
    username: z.string(),
    display_name: z.string().optional(),
    avatar_id: z.coerce.bigint().optional(),
    is_bot: z.boolean(),
    suspended: z.boolean(),
    diamond_member: z.boolean(),
    diamond_membership_status: diamondMembershipStatusSchema,
    total_chit_earned: z.number(),
    chit_balance: z.number(),
    streak: z.number(),
    is_unique_person: z.boolean(),
});

export const userIndexUserArgsSchema = z.object({
    user_id: userIdSchema.optional(),
    username: z.string().optional(),
});

export const userIndexReferralMetricsReferralMetricsSchema = z.object({
    users_who_referred: z.number(),
    users_who_referred_paid_diamond: z.number(),
    users_who_referred_unpaid_diamond: z.number(),
    users_who_referred_90_percent_unpaid_diamond: z.number(),
    referrals_of_paid_diamond: z.number(),
    referrals_of_unpaid_diamond: z.number(),
    referrals_other: z.number(),
    icp_raised_by_referrals_to_paid_diamond: z.number(),
});

export const userIndexPayForDiamondMembershipSuccessResultSchema = z.object({
    expires_at: z.coerce.bigint(),
    pay_in_chat: z.boolean(),
    subscription: diamondMembershipSubscriptionSchema,
    proof_jwt: z.string(),
});

export const userIndexPayForDiamondMembershipResponseSchema = z.union([
    z.object({
        Success: userIndexPayForDiamondMembershipSuccessResultSchema,
    }),
    z.literal("AlreadyLifetimeDiamondMember"),
    z.literal("CurrencyNotSupported"),
    z.literal("PriceMismatch"),
    z.literal("PaymentAlreadyInProgress"),
    z.literal("UserNotFound"),
    z.object({
        InsufficientFunds: z.coerce.bigint(),
    }),
    z.object({
        TransferFailed: z.string(),
    }),
    z.object({
        InternalError: z.string(),
    }),
]);

export const userIndexPayForDiamondMembershipArgsSchema = z.object({
    duration: diamondMembershipPlanDurationSchema,
    token: cryptocurrencySchema,
    expected_price_e8s: z.coerce.bigint(),
    recurring: z.boolean(),
});

export const userIndexSearchResultSchema = z.object({
    users: z.array(userSummarySchema),
    timestamp: z.coerce.bigint(),
});

export const userIndexSearchResponseSchema = z.object({
    Success: userIndexSearchResultSchema,
});

export const userIndexSearchArgsSchema = z.object({
    search_term: z.string(),
    max_results: z.number(),
});

export const userIndexUnsuspendUserResponseSchema = z.union([
    z.literal("Success"),
    z.literal("UserNotSuspended"),
    z.literal("UserNotFound"),
    z.object({
        InternalError: z.string(),
    }),
]);

export const userIndexUnsuspendUserArgsSchema = z.object({
    user_id: userIdSchema,
});

export const userIndexUsersUserGroupSchema = z.object({
    users: z.array(userIdSchema),
    updated_since: z.coerce.bigint(),
});

export const userIndexSubmitProofOfUniquePersonhoodResponseSchema = z.union([
    z.literal("Success"),
    z.object({
        Invalid: z.string(),
    }),
    z.literal("UserNotFound"),
]);

export const userIndexSubmitProofOfUniquePersonhoodArgsSchema = z.object({
    user_ii_principal: principalSchema,
    credential_jwt: z.string(),
});

export const userIndexChitLeaderboardChitUserBalanceSchema = z.object({
    user_id: userIdSchema,
    username: z.string(),
    balance: z.number(),
});

export const userIndexSetUsernameArgsSchema = z.object({
    username: z.string(),
});

export const userIndexSetUsernameResponseSchema = z.union([
    z.literal("Success"),
    z.literal("UsernameTaken"),
    z.literal("UserNotFound"),
    z.literal("UsernameInvalid"),
    z.object({
        UsernameTooShort: z.number(),
    }),
    z.object({
        UsernameTooLong: z.number(),
    }),
]);

export const userIndexSetDisplayNameArgsSchema = z.object({
    display_name: z.string().optional(),
});

export const userIndexSetDisplayNameResponseSchema = z.union([
    z.literal("Success"),
    z.literal("Unauthorized"),
    z.literal("UserNotFound"),
    z.literal("DisplayNameInvalid"),
    z.object({
        DisplayNameTooShort: z.number(),
    }),
    z.object({
        DisplayNameTooLong: z.number(),
    }),
]);

export const userIndexSetDiamondMembershipFeesResponseSchema = z.union([
    z.literal("Success"),
    z.literal("Invalid"),
]);

export const diamondMembershipFeesSchema = z.object({
    chat_fees: diamondMembershipFeesByDurationSchema,
    icp_fees: diamondMembershipFeesByDurationSchema,
});

export const userIndexPlatformModeratorsGroupResponseSchema = z.object({
    Success: chatIdSchema,
});

export const userIndexReportedMessagesSuccessResultSchema = z.object({
    json: z.string(),
});

export const userIndexReportedMessagesArgsSchema = z.object({
    user_id: userIdSchema.optional(),
});

export const userIndexUserRegistrationCanisterResponseSchema = z.union([
    z.object({
        Success: principalSchema,
    }),
    z.literal("NewRegistrationsClosed"),
]);

export const diamondMembershipDetailsSchema = z.object({
    expires_at: z.coerce.bigint(),
    pay_in_chat: z.boolean(),
    subscription: diamondMembershipSubscriptionSchema,
});

export const diamondMembershipStatusFullSchema = z.union([
    z.literal("Inactive"),
    z.object({
        Active: diamondMembershipDetailsSchema,
    }),
    z.literal("Lifetime"),
]);

export const messageReportSchema = z.object({
    reported_by: userIdSchema,
    timestamp: z.coerce.bigint(),
    reason_code: z.number(),
    notes: z.string().optional(),
});

export const verifiedCredentialArgumentValueSchema = z.union([
    z.object({
        String: z.string(),
    }),
    z.object({
        Int: z.number(),
    }),
]);

export const failedCryptoTransactionNNSSchema = z.object({
    ledger: principalSchema,
    token: cryptocurrencySchema,
    amount: tokensSchema,
    fee: tokensSchema,
    from: cryptoAccountNNSSchema,
    to: cryptoAccountNNSSchema,
    memo: z.coerce.bigint(),
    created: z.coerce.bigint(),
    transaction_hash: z.tuple([
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
    ]),
    error_message: z.string(),
});

export const p2PSwapStatusSchema = z.union([
    z.literal("Open"),
    z.object({
        Cancelled: p2PSwapCancelledSchema,
    }),
    z.object({
        Expired: p2PSwapCancelledSchema,
    }),
    z.object({
        Reserved: p2PSwapReservedSchema,
    }),
    z.object({
        Accepted: p2PSwapAcceptedSchema,
    }),
    z.object({
        Completed: p2PSwapCompletedSchema,
    }),
]);

export const verifiedCredentialGateSchema = z.object({
    issuer_canister_id: principalSchema,
    issuer_origin: z.string(),
    credential_type: z.string(),
    credential_name: z.string(),
    credential_arguments: z.record(verifiedCredentialArgumentValueSchema),
});

export const paymentGateSchema = z.object({
    ledger_canister_id: principalSchema,
    amount: z.coerce.bigint(),
    fee: z.coerce.bigint(),
});

export const pollVotesSchema = z.object({
    total: totalVotesSchema,
    user: z.array(z.number()),
});

export const failedCryptoTransactionSchema = z.union([
    z.object({
        NNS: failedCryptoTransactionNNSSchema,
    }),
    z.object({
        ICRC1: failedCryptoTransactionICRC1Schema,
    }),
    z.object({
        ICRC2: failedCryptoTransactionICRC2Schema,
    }),
]);

export const pendingCryptoTransactionNNSSchema = z.object({
    ledger: principalSchema,
    token: cryptocurrencySchema,
    amount: tokensSchema,
    to: userOrAccountSchema,
    fee: tokensSchema.optional(),
    memo: z.coerce.bigint().optional(),
    created: z.coerce.bigint(),
});

export const userSummaryStableSchema = z.object({
    username: z.string(),
    display_name: z.string().optional(),
    avatar_id: z.coerce.bigint().optional(),
    is_bot: z.boolean(),
    suspended: z.boolean(),
    diamond_membership_status: diamondMembershipStatusSchema,
    is_unique_person: z.boolean(),
    bot_config: botConfigSchema.optional(),
});

export const pendingCryptoTransactionSchema = z.union([
    z.object({
        NNS: pendingCryptoTransactionNNSSchema,
    }),
    z.object({
        ICRC1: pendingCryptoTransactionICRC1Schema,
    }),
    z.object({
        ICRC2: pendingCryptoTransactionICRC2Schema,
    }),
]);

export const currentUserSummarySchema = z.object({
    user_id: userIdSchema,
    username: z.string(),
    display_name: z.string().optional(),
    avatar_id: z.coerce.bigint().optional(),
    is_bot: z.boolean(),
    is_platform_moderator: z.boolean(),
    is_platform_operator: z.boolean(),
    suspension_details: suspensionDetailsSchema.optional(),
    is_suspected_bot: z.boolean(),
    diamond_membership_details: diamondMembershipDetailsSchema.optional(),
    diamond_membership_status: diamondMembershipStatusFullSchema,
    moderation_flags_enabled: z.number(),
    is_unique_person: z.boolean(),
});

export const completedCryptoTransactionNNSSchema = z.object({
    ledger: principalSchema,
    token: cryptocurrencySchema,
    amount: tokensSchema,
    fee: tokensSchema,
    from: cryptoAccountNNSSchema,
    to: cryptoAccountNNSSchema,
    memo: z.coerce.bigint(),
    created: z.coerce.bigint(),
    transaction_hash: z.tuple([
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
    ]),
    block_index: z.coerce.bigint(),
});

export const groupIndexFreezeGroupArgsSchema = z.object({
    chat_id: chatIdSchema,
    reason: z.string().optional(),
    suspend_members: groupIndexFreezeGroupSuspensionDetailsSchema.optional(),
});

export const groupIndexFreezeGroupResponseSchema = z.union([
    z.object({
        Success: eventWrapperGroupFrozenSchema,
    }),
    z.literal("ChatAlreadyFrozen"),
    z.literal("ChatNotFound"),
    z.literal("NotAuthorized"),
    z.object({
        InternalError: z.string(),
    }),
]);

export const groupIndexActiveGroupsResponseSchema = z.object({
    Success: groupIndexActiveGroupsSuccessResultSchema,
});

export const groupIndexUnfreezeGroupResponseSchema = z.union([
    z.object({
        Success: eventWrapperGroupUnfrozenSchema,
    }),
    z.literal("ChatNotFrozen"),
    z.literal("ChatNotFound"),
    z.literal("NotAuthorized"),
    z.object({
        InternalError: z.string(),
    }),
]);

export const replyContextSchema = z.object({
    chat_if_other: z.tuple([chatSchema, messageIndexSchema.nullable()]).optional(),
    event_index: eventIndexSchema,
});

export const pollContentSchema = z.object({
    config: pollConfigSchema,
    votes: pollVotesSchema,
    ended: z.boolean(),
});

export const proposalContentSchema = z.object({
    governance_canister_id: principalSchema,
    proposal: proposalSchema,
    my_vote: z.boolean().optional(),
});

export const reportedMessageSchema = z.object({
    reports: z.array(messageReportSchema),
    count: z.number(),
});

export const p2PSwapContentSchema = z.object({
    swap_id: z.number(),
    token0: tokenInfoSchema,
    token0_amount: z.coerce.bigint(),
    token1: tokenInfoSchema,
    token1_amount: z.coerce.bigint(),
    expires_at: z.coerce.bigint(),
    caption: z.string().optional(),
    token0_txn_in: z.coerce.bigint(),
    status: p2PSwapStatusSchema,
});

export const userIndexUsersChitResponseSchema = z.object({
    Success: userIndexUsersChitSuccessResultSchema,
});

export const userIndexUpdateDiamondMembershipSubscriptionArgsSchema = z.object({
    pay_in_chat: z.boolean().optional(),
    subscription: diamondMembershipSubscriptionSchema.optional(),
});

export const userIndexPlatformOperatorsResponseSchema = z.object({
    Success: userIndexPlatformOperatorsSuccessResultSchema,
});

export const userIndexPlatformModeratorsResponseSchema = z.object({
    Success: userIndexPlatformModeratorsSuccessResultSchema,
});

export const userIndexSuspectedBotsResponseSchema = z.object({
    Success: userIndexSuspectedBotsSuccessResultSchema,
});

export const userIndexUserResponseSchema = z.union([
    z.object({
        Success: userSummarySchema,
    }),
    z.literal("UserNotFound"),
]);

export const userIndexReferralMetricsResponseSchema = z.object({
    Success: userIndexReferralMetricsReferralMetricsSchema,
});

export const userSummaryV2Schema = z.object({
    user_id: userIdSchema,
    stable: userSummaryStableSchema.optional(),
    volatile: userSummaryVolatileSchema.optional(),
});

export const userIndexUsersArgsSchema = z.object({
    user_groups: z.array(userIndexUsersUserGroupSchema),
    users_suspended_since: z.coerce.bigint().optional(),
});

export const userIndexUsersResultSchema = z.object({
    users: z.array(userSummaryV2Schema),
    current_user: currentUserSummarySchema.optional(),
    deleted: z.array(userIdSchema),
    timestamp: z.coerce.bigint(),
});

export const userIndexChitLeaderboardResponseSchema = z.object({
    Success: z.array(userIndexChitLeaderboardChitUserBalanceSchema),
});

export const userIndexSetDiamondMembershipFeesArgsSchema = z.object({
    fees: diamondMembershipFeesSchema,
});

export const userIndexReportedMessagesResponseSchema = z.object({
    Success: userIndexReportedMessagesSuccessResultSchema,
});

export const userIndexCurrentUserSuccessResultSchema = z.object({
    user_id: userIdSchema,
    username: z.string(),
    date_created: z.coerce.bigint(),
    display_name: z.string().optional(),
    avatar_id: z.coerce.bigint().optional(),
    canister_upgrade_status: canisterUpgradeStatusSchema,
    wasm_version: buildVersionSchema,
    icp_account: z.tuple([
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
        z.number(),
    ]),
    referrals: z.array(userIdSchema),
    is_platform_moderator: z.boolean(),
    is_platform_operator: z.boolean(),
    suspension_details: suspensionDetailsSchema.optional(),
    is_suspected_bot: z.boolean(),
    diamond_membership_details: diamondMembershipDetailsSchema.optional(),
    diamond_membership_status: diamondMembershipStatusFullSchema,
    moderation_flags_enabled: z.number(),
    is_unique_person: z.boolean(),
});

export const completedCryptoTransactionSchema = z.union([
    z.object({
        NNS: completedCryptoTransactionNNSSchema,
    }),
    z.object({
        ICRC1: completedCryptoTransactionICRC1Schema,
    }),
    z.object({
        ICRC2: completedCryptoTransactionICRC2Schema,
    }),
]);

export const cryptoTransactionSchema = z.union([
    z.object({
        Pending: pendingCryptoTransactionSchema,
    }),
    z.object({
        Completed: completedCryptoTransactionSchema,
    }),
    z.object({
        Failed: failedCryptoTransactionSchema,
    }),
]);

export const cryptoContentSchema = z.object({
    recipient: userIdSchema,
    transfer: cryptoTransactionSchema,
    caption: z.string().optional(),
});

export const prizeWinnerContentSchema = z.object({
    winner: userIdSchema,
    transaction: completedCryptoTransactionSchema,
    prize_message: messageIndexSchema,
});

export const userIndexUsersResponseSchema = z.object({
    Success: userIndexUsersResultSchema,
});

export const userIndexCurrentUserResponseSchema = z.union([
    z.object({
        Success: userIndexCurrentUserSuccessResultSchema,
    }),
    z.literal("UserNotFound"),
]);

export const messageContentSchema = z.union([
    z.object({
        Text: textContentSchema,
    }),
    z.object({
        Image: imageContentSchema,
    }),
    z.object({
        Video: videoContentSchema,
    }),
    z.object({
        Audio: audioContentSchema,
    }),
    z.object({
        File: fileContentSchema,
    }),
    z.object({
        Poll: pollContentSchema,
    }),
    z.object({
        Crypto: cryptoContentSchema,
    }),
    z.object({
        Deleted: deletedBySchema,
    }),
    z.object({
        Giphy: giphyContentSchema,
    }),
    z.object({
        GovernanceProposal: proposalContentSchema,
    }),
    z.object({
        Prize: prizeContentSchema,
    }),
    z.object({
        PrizeWinner: prizeWinnerContentSchema,
    }),
    z.object({
        MessageReminderCreated: messageReminderCreatedContentSchema,
    }),
    z.object({
        MessageReminder: messageReminderContentSchema,
    }),
    z.object({
        ReportedMessage: reportedMessageSchema,
    }),
    z.object({
        P2PSwap: p2PSwapContentSchema,
    }),
    z.object({
        VideoCall: videoCallContentSchema,
    }),
    z.object({
        Custom: customContentSchema,
    }),
]);

export const messageSchema = z.object({
    message_index: messageIndexSchema,
    message_id: messageIdSchema,
    sender: userIdSchema,
    content: messageContentSchema,
    replies_to: replyContextSchema.optional(),
    reactions: z.array(z.tuple([reactionSchema, z.array(userIdSchema)])),
    tips: tipsSchema,
    thread_summary: threadSummarySchema.optional(),
    edited: z.boolean(),
    forwarded: z.boolean(),
    block_level_markdown: z.boolean(),
});

export const eventWrapperMessageSchema = z.object({
    index: eventIndexSchema,
    timestamp: z.coerce.bigint(),
    correlation_id: z.coerce.bigint(),
    expires_at: z.coerce.bigint().optional(),
    event: messageSchema,
});

export const compositeGateSchema: z.ZodSchema<CompositeGate> = z.lazy(() =>
    z.object({
        inner: z.array(accessGateSchema),
        and: z.boolean(),
    }),
);

export const accessGateSchema: z.ZodSchema<AccessGate> = z.lazy(() =>
    z.union([
        z.literal("DiamondMember"),
        z.literal("LifetimeDiamondMember"),
        z.literal("UniquePerson"),
        z.object({
            VerifiedCredential: verifiedCredentialGateSchema,
        }),
        z.object({
            SnsNeuron: snsNeuronGateSchema,
        }),
        z.object({
            Payment: paymentGateSchema,
        }),
        z.object({
            TokenBalance: tokenBalanceGateSchema,
        }),
        z.object({
            Composite: compositeGateSchema,
        }),
        z.literal("Locked"),
    ]),
);

export const groupIndexRecommendedGroupsSuccessResultSchema: z.ZodSchema<GroupIndex_RecommendedGroups_SuccessResult> =
    z.lazy(() =>
        z.object({
            groups: z.array(publicGroupSummarySchema),
        }),
    );

export const publicGroupSummarySchema: z.ZodSchema<PublicGroupSummary> = z.lazy(() =>
    z.object({
        chat_id: chatIdSchema,
        local_user_index_canister_id: principalSchema,
        last_updated: z.coerce.bigint(),
        name: z.string(),
        description: z.string(),
        subtype: groupSubtypeSchema.optional(),
        history_visible_to_new_joiners: z.boolean(),
        messages_visible_to_non_members: z.boolean(),
        avatar_id: z.coerce.bigint().optional(),
        latest_message: eventWrapperMessageSchema.optional(),
        latest_event_index: eventIndexSchema,
        latest_message_index: messageIndexSchema.optional(),
        participant_count: z.number(),
        wasm_version: buildVersionSchema,
        is_public: z.boolean(),
        frozen: frozenGroupInfoSchema.optional(),
        events_ttl: z.coerce.bigint().optional(),
        events_ttl_last_updated: z.coerce.bigint(),
        gate: accessGateSchema.optional(),
    }),
);

export const groupIndexRecommendedGroupsResponseSchema: z.ZodSchema<GroupIndex_RecommendedGroups_Response> =
    z.lazy(() =>
        z.object({
            Success: groupIndexRecommendedGroupsSuccessResultSchema,
        }),
    );

export const groupIndexExploreCommunitiesResponseSchema: z.ZodSchema<GroupIndex_ExploreCommunities_Response> =
    z.lazy(() =>
        z.union([
            z.object({
                Success: groupIndexExploreCommunitiesSuccessResultSchema,
            }),
            z.object({
                TermTooShort: z.number(),
            }),
            z.object({
                TermTooLong: z.number(),
            }),
            z.literal("InvalidTerm"),
            z.literal("InvalidFlags"),
        ]),
    );

export const groupIndexExploreCommunitiesSuccessResultSchema: z.ZodSchema<GroupIndex_ExploreCommunities_SuccessResult> =
    z.lazy(() =>
        z.object({
            matches: z.array(communityMatchSchema),
            total: z.number(),
        }),
    );

export const communityMatchSchema: z.ZodSchema<CommunityMatch> = z.lazy(() =>
    z.object({
        id: communityIdSchema,
        score: z.number(),
        name: z.string(),
        description: z.string(),
        avatar_id: z.coerce.bigint().optional(),
        banner_id: z.coerce.bigint().optional(),
        member_count: z.number(),
        channel_count: z.number(),
        gate: accessGateSchema.optional(),
        moderation_flags: z.number(),
        primary_language: z.string(),
    }),
);

export const groupIndexExploreGroupsSuccessResultSchema: z.ZodSchema<GroupIndex_ExploreGroups_SuccessResult> =
    z.lazy(() =>
        z.object({
            matches: z.array(groupMatchSchema),
            total: z.number(),
        }),
    );

export const groupMatchSchema: z.ZodSchema<GroupMatch> = z.lazy(() =>
    z.object({
        id: chatIdSchema,
        name: z.string(),
        description: z.string(),
        avatar_id: z.coerce.bigint().optional(),
        member_count: z.number(),
        gate: accessGateSchema.optional(),
        subtype: groupSubtypeSchema.optional(),
    }),
);

export const groupIndexExploreGroupsResponseSchema: z.ZodSchema<GroupIndex_ExploreGroups_Response> =
    z.lazy(() =>
        z.union([
            z.object({
                Success: groupIndexExploreGroupsSuccessResultSchema,
            }),
            z.object({
                TermTooShort: z.number(),
            }),
            z.object({
                TermTooLong: z.number(),
            }),
            z.literal("InvalidTerm"),
        ]),
    );
