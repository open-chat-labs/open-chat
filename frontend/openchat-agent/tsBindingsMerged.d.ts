// Autogenerated by `ts_gen.sh`. Do not edit manually
export type MessageReminderContent = { reminder_id: bigint, notes?: string, };
export type PollContent = { config: PollConfig, votes: PollVotes, ended: boolean, };
export type VideoContent = {
    width: number,
    height: number,
    thumbnail_data: ThumbnailData,
    caption?: string,
    mime_type: string,
    image_blob_reference?: BlobReference,
    video_blob_reference?: BlobReference,
};
export type Reaction = string;
export type PaymentGate = { ledger_canister_id: PrincipalTS, amount: bigint, fee: bigint, };
export type PrizeWinnerContent = {
    winner: UserId,
    transaction: CompletedCryptoTransaction,
    prize_message: MessageIndex,
};
export type VideoCallContent = {
    call_type: VideoCallType,
    ended?: bigint,
    participants: Array<CallParticipant>,
    hidden_participants: number,
};
export type EventWrapperGroupFrozen = {
    index: EventIndex,
    timestamp: bigint,
    correlation_id: bigint,
    expires_at?: bigint,
    event: GroupFrozen,
};
export type MessageIndex = number;
export type GroupSubtype = { "GovernanceProposals": GovernanceProposalsSubtype };
export type AccountICRC1 = {
    owner: PrincipalTS,
    subaccount?: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number],
};
export type DiamondMembershipPlanDuration = "OneMonth" | "ThreeMonths" | "OneYear" | "Lifetime";
export type EventIndex = number;
export type CryptoContent = { recipient: UserId, transfer: CryptoTransaction, caption?: string, };
export type SuspensionAction = { "Unsuspend": bigint } | { "Delete": bigint };
export type GiphyContent = { caption?: string, title: string, desktop: GiphyImageVariant, mobile: GiphyImageVariant, };
export type P2PSwapReserved = { reserved_by: UserId, };
export type FailedCryptoTransaction =
    { "NNS": FailedCryptoTransactionNNS }
    | { "ICRC1": FailedCryptoTransactionICRC1 }
    | { "ICRC2": FailedCryptoTransactionICRC2 };
export type SnsNeuronGate = {
    governance_canister_id: PrincipalTS,
    min_stake_e8s?: bigint,
    min_dissolve_delay?: bigint,
};
export type UserSummary = {
    user_id: UserId,
    username: string,
    display_name?: string,
    avatar_id?: bigint,
    is_bot: boolean,
    suspended: boolean,
    diamond_member: boolean,
    diamond_membership_status: DiamondMembershipStatus,
    total_chit_earned: number,
    chit_balance: number,
    streak: number,
    is_unique_person: boolean,
};
export type CompletedCryptoTransactionICRC2 = {
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: bigint,
    spender: UserId,
    from: CryptoAccountICRC1,
    to: CryptoAccountICRC1,
    fee: bigint,
    memo?: Array<number>,
    created: bigint,
    block_index: bigint,
};
export type ProposalDecisionStatus = "Unspecified" | "Open" | "Rejected" | "Adopted" | "Executed" | "Failed";
export type CanisterUpgradeStatus = "InProgress" | "NotRequired";
export type ChatId = PrincipalTS;
export type CryptoAccountICRC1 = "Mint" | { "Account": AccountICRC1 };
export type VerifiedCredentialGate = {
    issuer_canister_id: PrincipalTS,
    issuer_origin: string,
    credential_type: string,
    credential_name: string,
    credential_arguments: { [key: string]: VerifiedCredentialArgumentValue },
};
export type NnsProposal = {
    id: bigint,
    topic: number,
    proposer: bigint,
    created: bigint,
    title: string,
    summary: string,
    url: string,
    status: ProposalDecisionStatus,
    reward_status: ProposalRewardStatus,
    tally: Tally,
    deadline: bigint,
    payload_text_rendering?: string,
    last_updated: bigint,
};
export type CompositeGate = { inner: Array<AccessGate>, and: boolean, };
export type EventWrapperGroupUnfrozen = {
    index: EventIndex,
    timestamp: bigint,
    correlation_id: bigint,
    expires_at?: bigint,
    event: GroupUnfrozen,
};
export type BlobReference = { canister_id: PrincipalTS, blob_id: bigint, };
export type PendingCryptoTransactionICRC1 = {
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: bigint,
    to: AccountICRC1,
    fee: bigint,
    memo?: Array<number>,
    created: bigint,
};
export type VideoCallType = "Broadcast" | "Default";
export type PendingCryptoTransaction = { "NNS": PendingCryptoTransactionNNS } | {
    "ICRC1": PendingCryptoTransactionICRC1
} | { "ICRC2": PendingCryptoTransactionICRC2 };
export type PrizeContent = {
    prizes_remaining: number,
    prizes_pending: number,
    winners: Array<UserId>,
    token: Cryptocurrency,
    end_date: bigint,
    caption?: string,
    diamond_only: boolean,
};
export type UserSummaryV2 = { user_id: UserId, stable?: UserSummaryStable, volatile?: UserSummaryVolatile, };
export type CryptoTransaction =
    { "Pending": PendingCryptoTransaction }
    | { "Completed": CompletedCryptoTransaction }
    | { "Failed": FailedCryptoTransaction };
export type P2PSwapStatus = "Open" | { "Cancelled": P2PSwapCancelled } | { "Expired": P2PSwapCancelled } | {
    "Reserved": P2PSwapReserved
} | { "Accepted": P2PSwapAccepted } | { "Completed": P2PSwapCompleted };
export type PollVotes = { total: TotalVotes, user: Array<number>, };
export type DeletedGroupInfo = {
    id: ChatId,
    timestamp: bigint,
    deleted_by: UserId,
    group_name: string,
    name: string,
    public: boolean,
};
export type DiamondMembershipFees = {
    chat_fees: DiamondMembershipFeesByDuration,
    icp_fees: DiamondMembershipFeesByDuration,
};
export type FileContent = {
    name: string,
    caption?: string,
    mime_type: string,
    file_size: number,
    blob_reference?: BlobReference,
};
export type P2PSwapCompleted = {
    accepted_by: UserId,
    token1_txn_in: bigint,
    token0_txn_out: bigint,
    token1_txn_out: bigint,
};
export type UserSummaryStable = {
    username: string,
    display_name?: string,
    avatar_id?: bigint,
    is_bot: boolean,
    suspended: boolean,
    diamond_membership_status: DiamondMembershipStatus,
    is_unique_person: boolean,
    bot_config?: BotConfig,
};
export type CustomContent = { kind: string, data: Array<number>, };
export type FailedCryptoTransactionICRC1 = {
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: bigint,
    fee: bigint,
    from: CryptoAccountICRC1,
    to: CryptoAccountICRC1,
    memo?: Array<number>,
    created: bigint,
    error_message: string,
};
export type CurrentUserSummary = {
    user_id: UserId,
    username: string,
    display_name?: string,
    avatar_id?: bigint,
    is_bot: boolean,
    is_platform_moderator: boolean,
    is_platform_operator: boolean,
    suspension_details?: SuspensionDetails,
    is_suspected_bot: boolean,
    diamond_membership_details?: DiamondMembershipDetails,
    diamond_membership_status: DiamondMembershipStatusFull,
    moderation_flags_enabled: number,
    is_unique_person: boolean,
};
export type Chat = { "Direct": ChatId } | { "Group": ChatId } | { "Channel": [CommunityId, bigint] };
export type DeletedBy = { deleted_by: UserId, timestamp: bigint, };
export type CompletedCryptoTransaction = { "NNS": CompletedCryptoTransactionNNS } | {
    "ICRC1": CompletedCryptoTransactionICRC1
} | { "ICRC2": CompletedCryptoTransactionICRC2 };
export type TokenBalanceGate = { ledger_canister_id: PrincipalTS, min_balance: bigint, };
export type P2PSwapAccepted = { accepted_by: UserId, token1_txn_in: bigint, };
export type TokenInfo = { token: Cryptocurrency, ledger: PrincipalTS, decimals: number, fee: bigint, };
export type CompletedCryptoTransactionNNS = {
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: Tokens,
    fee: Tokens,
    from: CryptoAccountNNS,
    to: CryptoAccountNNS,
    memo: bigint,
    created: bigint,
    transaction_hash: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number],
    block_index: bigint,
};
export type TotalVotes =
    { "Visible": { [key: number]: Array<UserId> } }
    | { "Anonymous": { [key: number]: number } }
    | { "Hidden": number };
export type Tips = Array<[Array<number>, Array<[UserId, bigint]>]>;
export type CallParticipant = { user_id: UserId, joined: bigint, };
export type GroupFrozen = { frozen_by: UserId, reason?: string, };
export type FailedCryptoTransactionICRC2 = {
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: bigint,
    fee: bigint,
    spender: UserId,
    from: CryptoAccountICRC1,
    to: CryptoAccountICRC1,
    memo?: Array<number>,
    created: bigint,
    error_message: string,
};
export type Proposal = { "NNS": NnsProposal } | { "SNS": SnsProposal };
export type Tokens = { e8s: bigint, };
export type PendingCryptoTransactionNNS = {
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: Tokens,
    to: UserOrAccount,
    fee?: Tokens,
    memo?: bigint,
    created: bigint,
};
export type DeletedCommunityInfo = {
    id: CommunityId,
    timestamp: bigint,
    deleted_by: UserId,
    name: string,
    public: boolean,
};
export type UserSummaryVolatile = { total_chit_earned: number, chit_balance: number, streak: number, };
export type Message = {
    message_index: MessageIndex,
    message_id: MessageId,
    sender: UserId,
    content: MessageContent,
    replies_to?: ReplyContext,
    reactions: Array<[Reaction, Array<UserId>]>,
    tips: Tips,
    thread_summary?: ThreadSummary,
    edited: boolean,
    forwarded: boolean,
    block_level_markdown: boolean,
};
export type ProposalRewardStatus = "Unspecified" | "AcceptVotes" | "ReadyToSettle" | "Settled";
export type PublicGroupSummary = {
    chat_id: ChatId,
    local_user_index_canister_id: PrincipalTS,
    last_updated: bigint,
    name: string,
    description: string,
    subtype?: GroupSubtype,
    history_visible_to_new_joiners: boolean,
    messages_visible_to_non_members: boolean,
    avatar_id?: bigint,
    latest_message?: EventWrapperMessage,
    latest_event_index: EventIndex,
    latest_message_index?: MessageIndex,
    participant_count: number,
    wasm_version: BuildVersion,
    is_public: boolean,
    frozen?: FrozenGroupInfo,
    events_ttl?: bigint,
    events_ttl_last_updated: bigint,
    gate?: AccessGate,
};
export type FrozenGroupInfo = { timestamp: bigint, frozen_by: UserId, reason?: string, };
export type MessageContent = { "Text": TextContent } | { "Image": ImageContent } | { "Video": VideoContent } | {
    "Audio": AudioContent
} | { "File": FileContent } | { "Poll": PollContent } | { "Crypto": CryptoContent } | { "Deleted": DeletedBy } | {
    "Giphy": GiphyContent
} | { "GovernanceProposal": ProposalContent } | { "Prize": PrizeContent } | { "PrizeWinner": PrizeWinnerContent } | {
    "MessageReminderCreated": MessageReminderCreatedContent
} | { "MessageReminder": MessageReminderContent } | { "ReportedMessage": ReportedMessage } | {
    "P2PSwap": P2PSwapContent
} | { "VideoCall": VideoCallContent } | { "Custom": CustomContent };
export type GroupUnfrozen = { unfrozen_by: UserId, };
export type Chit = { balance: number, streak: number, };
export type GiphyImageVariant = { width: number, height: number, url: string, mime_type: string, };
export type PendingCryptoTransactionICRC2 = {
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: bigint,
    from: AccountICRC1,
    to: AccountICRC1,
    fee: bigint,
    memo?: Array<number>,
    created: bigint,
};
export type Empty = Record<string, never>;
export type ThumbnailData = string;
export type AudioContent = { caption?: string, mime_type: string, blob_reference?: BlobReference, };
export type ImageContent = {
    width: number,
    height: number,
    thumbnail_data: ThumbnailData,
    caption?: string,
    mime_type: string,
    blob_reference?: BlobReference,
};
export type BuildVersion = { major: number, minor: number, patch: number, };
export type Cryptocurrency = "InternetComputer" | "SNS1" | "CKBTC" | "CHAT" | "KINIC" | { "Other": string };
export type UserId = PrincipalTS;
export type CryptoAccountNNS = "Mint" | {
    "Account": [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number]
};
export type CommunityId = PrincipalTS;
export type MessageReminderCreatedContent = {
    reminder_id: bigint,
    remind_at: bigint,
    notes?: string,
    hidden: boolean,
};
export type CompletedCryptoTransactionICRC1 = {
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: bigint,
    from: CryptoAccountICRC1,
    to: CryptoAccountICRC1,
    fee: bigint,
    memo?: Array<number>,
    created: bigint,
    block_index: bigint,
};
export type ProposalContent = { governance_canister_id: PrincipalTS, proposal: Proposal, my_vote?: boolean, };
export type UserOrAccount = { "User": UserId } | {
    "Account": [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number]
};
export type ReplyContext = { chat_if_other?: [Chat, MessageIndex | null], event_index: EventIndex, };
export type GovernanceProposalsSubtype = { is_nns: boolean, governance_canister_id: PrincipalTS, };
export type BotConfig = {
    is_oc_controlled: boolean,
    supports_direct_messages: boolean,
    can_be_added_to_groups: boolean,
};
export type ReportedMessage = { reports: Array<MessageReport>, count: number, };
export type GroupMatch = {
    id: ChatId,
    name: string,
    description: string,
    avatar_id?: bigint,
    member_count: number,
    gate?: AccessGate,
    subtype?: GroupSubtype,
};
export type PrincipalTS = Uint8Array;
export type CommunityMatch = {
    id: CommunityId,
    score: number,
    name: string,
    description: string,
    avatar_id?: bigint,
    banner_id?: bigint,
    member_count: number,
    channel_count: number,
    gate?: AccessGate,
    moderation_flags: number,
    primary_language: string,
};
export type VerifiedCredentialArgumentValue = { "String": string } | { "Int": number };
export type P2PSwapCancelled = { token0_txn_out?: bigint, };
export type FailedCryptoTransactionNNS = {
    ledger: PrincipalTS,
    token: Cryptocurrency,
    amount: Tokens,
    fee: Tokens,
    from: CryptoAccountNNS,
    to: CryptoAccountNNS,
    memo: bigint,
    created: bigint,
    transaction_hash: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number],
    error_message: string,
};
export type TextContent = { text: string, };
export type SnsProposal = {
    id: bigint,
    action: bigint,
    proposer: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number],
    created: bigint,
    title: string,
    summary: string,
    url: string,
    status: ProposalDecisionStatus,
    reward_status: ProposalRewardStatus,
    tally: Tally,
    deadline: bigint,
    payload_text_rendering?: string,
    minimum_yes_proportion_of_total: number,
    minimum_yes_proportion_of_exercised: number,
    last_updated: bigint,
};
export type MessageId = bigint;
export type EventWrapperMessage = {
    index: EventIndex,
    timestamp: bigint,
    correlation_id: bigint,
    expires_at?: bigint,
    event: Message,
};
export type MessageReport = { reported_by: UserId, timestamp: bigint, reason_code: number, notes?: string, };
export type ThreadSummary = {
    participant_ids: Array<UserId>,
    followed_by_me: boolean,
    reply_count: number,
    latest_event_index: EventIndex,
    latest_event_timestamp: bigint,
};
export type DiamondMembershipStatusFull = "Inactive" | { "Active": DiamondMembershipDetails } | "Lifetime";
export type SuspensionDetails = { reason: string, action: SuspensionAction, suspended_by: UserId, };
export type DiamondMembershipStatus = "Inactive" | "Active" | "Lifetime";
export type DiamondMembershipDetails = {
    expires_at: bigint,
    pay_in_chat: boolean,
    subscription: DiamondMembershipSubscription,
};
export type P2PSwapContent = {
    swap_id: number,
    token0: TokenInfo,
    token0_amount: bigint,
    token1: TokenInfo,
    token1_amount: bigint,
    expires_at: bigint,
    caption?: string,
    token0_txn_in: bigint,
    status: P2PSwapStatus,
};
export type PollConfig = {
    text?: string,
    options: Array<string>,
    end_date?: bigint,
    anonymous: boolean,
    show_votes_before_end_date: boolean,
    allow_multiple_votes_per_user: boolean,
    allow_user_to_change_vote: boolean,
};
export type Tally = { yes: bigint, no: bigint, total: bigint, timestamp: bigint, };
export type DiamondMembershipFeesByDuration = {
    one_month: bigint,
    three_months: bigint,
    one_year: bigint,
    lifetime: bigint,
};
export type AccessGate = "DiamondMember" | "LifetimeDiamondMember" | "UniquePerson" | {
    "VerifiedCredential": VerifiedCredentialGate
} | { "SnsNeuron": SnsNeuronGate } | { "Payment": PaymentGate } | { "TokenBalance": TokenBalanceGate } | {
    "Composite": CompositeGate
} | "Locked";
export type DiamondMembershipSubscription = "Disabled" | "OneMonth" | "ThreeMonths" | "OneYear";
export type groupIndexRecommendedGroupsSuccessResult = { groups: Array<PublicGroupSummary>, };
export type groupIndexRecommendedGroupsResponse = { "Success": groupIndexRecommendedGroupsSuccessResult };
export type groupIndexRecommendedGroupsArgs = { count: number, exclusions: Array<ChatId>, };
export type groupIndexFreezeGroupArgs = {
    chat_id: ChatId,
    reason?: string,
    suspend_members?: groupIndexFreezeGroupSuspensionDetails,
};
export type groupIndexFreezeGroupSuspensionDetails = { duration?: bigint, reason: string, };
export type groupIndexFreezeGroupResponse =
    { "Success": EventWrapperGroupFrozen }
    | "ChatAlreadyFrozen"
    | "ChatNotFound"
    | "NotAuthorized"
    | { "InternalError": string };
export type groupIndexAddHotGroupExclusionArgs = { chat_id: ChatId, };
export type groupIndexAddHotGroupExclusionResponse =
    "Success"
    | "ChatAlreadyExcluded"
    | "ChatNotFound"
    | "NotAuthorized"
    | { "InternalError": string };
export type groupIndexMarkLocalGroupIndexFullArgs = { canister_id: PrincipalTS, full: boolean, };
export type groupIndexMarkLocalGroupIndexFullResponse = "Success" | "LocalGroupIndexNotFound" | "NotAuthorized" | {
    "InternalError": string
};
export type groupIndexLookupChannelByGroupIdSuccessResult = { community_id: CommunityId, channel_id: bigint, };
export type groupIndexLookupChannelByGroupIdResponse =
    { "Success": groupIndexLookupChannelByGroupIdSuccessResult }
    | "NotFound";
export type groupIndexLookupChannelByGroupIdArgs = { group_id: ChatId, };
export type groupIndexExploreCommunitiesSuccessResult = { matches: Array<CommunityMatch>, total: number, };
export type groupIndexExploreCommunitiesResponse = { "Success": groupIndexExploreCommunitiesSuccessResult } | {
    "TermTooShort": number
} | { "TermTooLong": number } | "InvalidTerm" | "InvalidFlags";
export type groupIndexExploreCommunitiesArgs = {
    search_term?: string,
    languages: Array<string>,
    page_index: number,
    page_size: number,
    include_moderation_flags: number,
};
export type groupIndexFreezeCommunityResponse =
    { "Success": EventWrapperGroupFrozen }
    | "CommunityAlreadyFrozen"
    | "CommunityNotFound"
    | "NotAuthorized"
    | { "InternalError": string };
export type groupIndexFreezeCommunityArgs = {
    community_id: CommunityId,
    reason?: string,
    suspend_members?: groupIndexFreezeCommunitySuspensionDetails,
};
export type groupIndexFreezeCommunitySuspensionDetails = { duration?: bigint, reason: string, };
export type groupIndexSetGroupUpgradeConcurrencyResponse = "Success" | "NotAuthorized" | { "InternalError": string };
export type groupIndexSetGroupUpgradeConcurrencyArgs = { value: number, };
export type groupIndexDeleteFrozenGroupArgs = { chat_id: ChatId, };
export type groupIndexDeleteFrozenGroupResponse = "Success" | "ChatNotFrozen" | "ChatNotFound" | "NotAuthorized" | {
    "InternalError": string
};
export type groupIndexSetCommunityModerationFlagsResponse =
    "Success"
    | "Unchanged"
    | "CommunityNotFound"
    | "NotAuthorized"
    | "InvalidFlags"
    | { "InternalError": string };
export type groupIndexSetCommunityModerationFlagsArgs = { community_id: CommunityId, flags: number, };
export type groupIndexRemoveHotGroupExclusionResponse =
    "Success"
    | "ChatNotExcluded"
    | "ChatNotFound"
    | "NotAuthorized"
    | { "InternalError": string };
export type groupIndexRemoveHotGroupExclusionArgs = { chat_id: ChatId, };
export type groupIndexExploreGroupsSuccessResult = { matches: Array<GroupMatch>, total: number, };
export type groupIndexExploreGroupsArgs = { search_term?: string, page_index: number, page_size: number, };
export type groupIndexExploreGroupsResponse = { "Success": groupIndexExploreGroupsSuccessResult } | {
    "TermTooShort": number
} | { "TermTooLong": number } | "InvalidTerm";
export type groupIndexActiveGroupsResponse = { "Success": groupIndexActiveGroupsSuccessResult };
export type groupIndexActiveGroupsArgs = {
    group_ids: Array<ChatId>,
    community_ids: Array<CommunityId>,
    active_since?: bigint,
};
export type groupIndexActiveGroupsSuccessResult = {
    timestamp: bigint,
    active_groups: Array<ChatId>,
    active_communities: Array<CommunityId>,
    deleted_groups: Array<DeletedGroupInfo>,
    deleted_communities: Array<DeletedCommunityInfo>,
};
export type groupIndexSetCommunityUpgradeConcurrencyResponse = "Success" | "NotAuthorized" | {
    "InternalError": string
};
export type groupIndexSetCommunityUpgradeConcurrencyArgs = { value: number, };
export type groupIndexUnfreezeGroupArgs = { chat_id: ChatId, };
export type groupIndexUnfreezeGroupResponse =
    { "Success": EventWrapperGroupUnfrozen }
    | "ChatNotFrozen"
    | "ChatNotFound"
    | "NotAuthorized"
    | { "InternalError": string };
export type userIndexDiamondMembershipFeesResponse = {
    "Success": Array<userIndexDiamondMembershipFeesDiamondMembershipFees>
};
export type userIndexDiamondMembershipFeesDiamondMembershipFees = {
    token: Cryptocurrency,
    one_month: bigint,
    three_months: bigint,
    one_year: bigint,
    lifetime: bigint,
};
export type userIndexUsersChitResponse = { "Success": userIndexUsersChitSuccessResult };
export type userIndexUsersChitSuccessResult = { chit: Array<Chit>, };
export type userIndexUsersChitArgs = { users: Array<UserId>, year: number, month: number, };
export type userIndexPublicKeyResponse = { "Success": string } | "NotInitialised";
export type userIndexUpdateDiamondMembershipSubscriptionArgs = {
    pay_in_chat?: boolean,
    subscription?: DiamondMembershipSubscription,
};
export type userIndexUpdateDiamondMembershipSubscriptionResponse =
    "Success"
    | "NotDiamondMember"
    | "AlreadyLifetimeDiamondMember";
export type userIndexSuspendUserResponse = "Success" | "UserAlreadySuspended" | "UserNotFound" | {
    "InternalError": string
};
export type userIndexSuspendUserArgs = { user_id: UserId, duration?: bigint, reason: string, };
export type userIndexCheckUsernameResponse = "Success" | "UsernameTaken" | "UsernameInvalid" | {
    "UsernameTooShort": number
} | { "UsernameTooLong": number };
export type userIndexCheckUsernameArgs = { username: string, };
export type userIndexSetModerationFlagsArgs = { moderation_flags_enabled: number, };
export type userIndexSetModerationFlagsResponse = "Success";
export type userIndexPlatformOperatorsSuccessResult = { users: Array<UserId>, };
export type userIndexPlatformOperatorsResponse = { "Success": userIndexPlatformOperatorsSuccessResult };
export type userIndexPlatformModeratorsResponse = { "Success": userIndexPlatformModeratorsSuccessResult };
export type userIndexPlatformModeratorsSuccessResult = { users: Array<UserId>, };
export type userIndexSetUserUpgradeConcurrencyArgs = { value: number, };
export type userIndexSetUserUpgradeConcurrencyResponse = "Success";
export type userIndexSuspectedBotsResponse = { "Success": userIndexSuspectedBotsSuccessResult };
export type userIndexSuspectedBotsSuccessResult = { users: Array<UserId>, };
export type userIndexSuspectedBotsArgs = { after?: UserId, count: number, };
export type userIndexUserResponse = { "Success": UserSummary } | "UserNotFound";
export type userIndexUserArgs = { user_id?: UserId, username?: string, };
export type userIndexReferralMetricsResponse = { "Success": userIndexReferralMetricsReferralMetrics };
export type userIndexReferralMetricsReferralMetrics = {
    users_who_referred: number,
    users_who_referred_paid_diamond: number,
    users_who_referred_unpaid_diamond: number,
    users_who_referred_90_percent_unpaid_diamond: number,
    referrals_of_paid_diamond: number,
    referrals_of_unpaid_diamond: number,
    referrals_other: number,
    icp_raised_by_referrals_to_paid_diamond: number,
};
export type userIndexPayForDiamondMembershipSuccessResult = {
    expires_at: bigint,
    pay_in_chat: boolean,
    subscription: DiamondMembershipSubscription,
    proof_jwt: string,
};
export type userIndexPayForDiamondMembershipResponse =
    { "Success": userIndexPayForDiamondMembershipSuccessResult }
    | "AlreadyLifetimeDiamondMember"
    | "CurrencyNotSupported"
    | "PriceMismatch"
    | "PaymentAlreadyInProgress"
    | "UserNotFound"
    | { "InsufficientFunds": bigint }
    | { "TransferFailed": string }
    | { "InternalError": string };
export type userIndexPayForDiamondMembershipArgs = {
    duration: DiamondMembershipPlanDuration,
    token: Cryptocurrency,
    expected_price_e8s: bigint,
    recurring: boolean,
};
export type userIndexSearchArgs = { search_term: string, max_results: number, };
export type userIndexSearchResult = { users: Array<UserSummary>, timestamp: bigint, };
export type userIndexSearchResponse = { "Success": userIndexSearchResult };
export type userIndexUnsuspendUserArgs = { user_id: UserId, };
export type userIndexUnsuspendUserResponse = "Success" | "UserNotSuspended" | "UserNotFound" | {
    "InternalError": string
};
export type userIndexUsersUserGroup = { users: Array<UserId>, updated_since: bigint, };
export type userIndexUsersResult = {
    users: Array<UserSummaryV2>,
    current_user?: CurrentUserSummary,
    deleted: Array<UserId>,
    timestamp: bigint,
};
export type userIndexUsersArgs = { user_groups: Array<userIndexUsersUserGroup>, users_suspended_since?: bigint, };
export type userIndexUsersResponse = { "Success": userIndexUsersResult };
export type userIndexSubmitProofOfUniquePersonhoodResponse = "Success" | { "Invalid": string } | "UserNotFound";
export type userIndexSubmitProofOfUniquePersonhoodArgs = { user_ii_principal: PrincipalTS, credential_jwt: string, };
export type userIndexChitLeaderboardResponse = { "Success": Array<userIndexChitLeaderboardChitUserBalance> };
export type userIndexChitLeaderboardChitUserBalance = { user_id: UserId, username: string, balance: number, };
export type userIndexSetUsernameResponse = "Success" | "UsernameTaken" | "UserNotFound" | "UsernameInvalid" | {
    "UsernameTooShort": number
} | { "UsernameTooLong": number };
export type userIndexSetUsernameArgs = { username: string, };
export type userIndexSetDisplayNameResponse = "Success" | "Unauthorized" | "UserNotFound" | "DisplayNameInvalid" | {
    "DisplayNameTooShort": number
} | { "DisplayNameTooLong": number };
export type userIndexSetDisplayNameArgs = { display_name?: string, };
export type userIndexSetDiamondMembershipFeesResponse = "Success" | "Invalid";
export type userIndexSetDiamondMembershipFeesArgs = { fees: DiamondMembershipFees, };
export type userIndexPlatformModeratorsGroupResponse = { "Success": ChatId };
export type userIndexReportedMessagesArgs = { user_id?: UserId, };
export type userIndexReportedMessagesSuccessResult = { json: string, };
export type userIndexReportedMessagesResponse = { "Success": userIndexReportedMessagesSuccessResult };
export type userIndexUserRegistrationCanisterResponse = { "Success": PrincipalTS } | "NewRegistrationsClosed";
export type userIndexCurrentUserSuccessResult = {
    user_id: UserId,
    username: string,
    date_created: bigint,
    display_name?: string,
    avatar_id?: bigint,
    canister_upgrade_status: CanisterUpgradeStatus,
    wasm_version: BuildVersion,
    icp_account: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number],
    referrals: Array<UserId>,
    is_platform_moderator: boolean,
    is_platform_operator: boolean,
    suspension_details?: SuspensionDetails,
    is_suspected_bot: boolean,
    diamond_membership_details?: DiamondMembershipDetails,
    diamond_membership_status: DiamondMembershipStatusFull,
    moderation_flags_enabled: number,
    is_unique_person: boolean,
};
export type userIndexCurrentUserResponse = { "Success": userIndexCurrentUserSuccessResult } | "UserNotFound";
