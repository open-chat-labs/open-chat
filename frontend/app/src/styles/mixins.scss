@function toRem($value: 16) {
    $remValue: math.div($value, 16) + rem;
    @return $remValue;
}

$breakpoints: (
    xxs: 354px,
    xs: 576px,
    sm: 768px,
    md: 992px,
    lg: 1200px,
    // this is the default width on 15' macbook
    xl: 1792px,
    xxl: 2000px,
);

$font-weights: (
    light: 200,
    book: 400,
    medium: 500,
    bold: 700,
);

// =============================================
// FONT-SIZES
// =============================================

// Usage: @include font-size(fs-100);
// The purpose of the key-numbers is to have them ordered relative to their font-size.
// The key-numbers are not related in any other way to the font-size or line-height.
$font-sizes: (
    fs-50: (
        font-size: toRem(11),
        line-height: 1.3,
    ),
    fs-60: (
        font-size: toRem(12),
        line-height: 1.35,
    ),
    fs-70: (
        font-size: toRem(13),
        line-height: 1.4,
    ),
    fs-80: (
        font-size: toRem(14),
        line-height: 1.4,
    ),
    fs-90: (
        font-size: toRem(15),
        line-height: 1.45,
    ),
    fs-100: (
        font-size: toRem(16),
        line-height: 1.5,
    ),
    fs-110: (
        font-size: toRem(18),
        line-height: 1.3,
    ),
    fs-120: (
        font-size: toRem(20),
        line-height: 1.2,
    ),
    fs-130: (
        font-size: toRem(22),
        line-height: 1.2,
    ),
    fs-140: (
        font-size: toRem(24),
        line-height: 1.2,
    ),
    fs-160: (
        font-size: toRem(28),
        line-height: 1.2,
    ),
    fs-180: (
        font-size: toRem(32),
        line-height: 1.2,
    ),
    fs-200: (
        font-size: toRem(36),
        line-height: 1.2,
    ),
    fs-220: (
        font-size: toRem(40),
        line-height: 1.2,
    ),
    fs-230: (
        font-size: toRem(48),
        line-height: 1.2,
    ),
    fs-240: (
        font-size: toRem(60),
        line-height: 1.2,
    ),
    fs-250: (
        font-size: toRem(70),
        line-height: 1.2,
    ),
    fs-260: (
        font-size: toRem(80),
        line-height: 1.2,
    ),
);

// =========================================================
// SPACING
// =========================================================

$sp1: 2px;
$sp2: 4px;
$sp3: 8px;
$sp4: 16px;
$sp5: 24px;
$sp6: 32px;
$sp7: 48px;
$sp8: 64px;
$sp9: 96px;
$sp10: 144px;
$sp11: 192px;

@mixin fullScreenImg($img) {
    background: linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.5)), url($img);
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
}

@mixin ellipsis($width: auto) {
    width: $width;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin fullHeight() {
    height: 100vh;
    height: calc(var(--vh, 1vh) * 100);
}

/* Media query stuff */

@mixin size-above($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $breakpoint-value: map-get($breakpoints, $breakpoint);
        @media (min-width: $breakpoint-value) {
            @content;
        }
    } @else {
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}

@mixin mobile() {
    @include size-below(sm) {
        @content;
    }
}

@mixin size-below-n($n) {
    @media (max-width: ($n - 1)) {
        @content;
    }
}

@mixin size-below($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $breakpoint-value: map-get($breakpoints, $breakpoint);
        @media (max-width: ($breakpoint-value - 1)) {
            @content;
        }
    } @else {
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}

@mixin spin($speed: 0.8s) {
    animation: loading-spinner $speed linear infinite;
}

@mixin pulse() {
    animation: pulse 1s linear infinite;
}

@mixin pop($duration: 150ms) {
    animation: pop $duration ease-out;
}

@mixin loading-spinner(
    $size: 1.2em,
    $offset: 0.6em,
    $spinner-color: #191919,
    $background-image: "/assets/spinner.svg",
    $speed: 0.8s,
    $opacity: 0.5
) {
    position: relative;

    &::after {
        content: "";
        display: block;
        width: $size;
        height: $size;
        position: absolute;
        // border: 3px solid;
        opacity: $opacity;
        background-image: url($background-image);
        left: calc(50% - #{$offset});
        top: calc(50% - #{$offset});
        transform-origin: 50% 50%;
        @include spin($speed);
        color: $spinner-color;
        z-index: 10;
    }
}

@keyframes loading-spinner {
    to {
        transform: rotate(360deg);
    }
}

@keyframes pulse {
    0% {
        transform: scale(0.9);
    }
    50% {
        transform: scale(1.1);
    }
    100% {
        transform: scale(0.9);
    }
}

@keyframes pop {
    0% {
        transform: scale(0.7);
    }
    60% {
        transform: scale(1.1);
    }
    100% {
        transform: scale(1);
    }
}

@mixin gold() {
    color: #ffffff;
    border: none;
    background: linear-gradient(
        to bottom,
        #cfc09f 22%,
        #ffecb3 30%,
        #cfc09f 40%,
        #cfc09f 50%,
        #634f2c 78%
    );
    animation: shimmer 15s ease-in-out infinite;
    background-size: 120% 120%;
}

@keyframes shimmer {
    0% {
        background-position: 0 0%;
    }
    50% {
        background-position: 0 75%;
    }
    100% {
        background-position: 0 0%;
    }
}

/* z-index stuff */

/* 
    Add items to this map in the order that they need to stack in the UI 
    then apply z-index using the z-index mixin and the real z-indexes will 
    be sorted out magically
*/
$z-indexed-items: (
    "global": (
        "login",
        "bubble-stem",
        "left-panel",
        "current-user",
        "right-panel",
        "date-label",
        "section-header",
        "fab",
        "action-list",
        "powered-by",
        "features",
        "phone",
        "phone-image",
        "landing-page-menu",
        "left-nav",
        "footer-overlay",
        "zoom",
        "overlay",
        "toast",
        "tooltip",
        "popup-menu",
        "upgrade-banner",
        "profiler",
    ),
);

$z-index-map: ();

@each $group-name, $group-list in $z-indexed-items {
    $counter: 1;
    $group-map: ();
    @each $item in $group-list {
        $group-map: map-merge(
            $group-map,
            (
                $item: $counter,
            )
        );
        $counter: $counter + 1;
    }
    $z-index-map: map-merge(
        $z-index-map,
        (
            $group-name: $group-map,
        )
    );
}

@mixin z-index($key, $group: "global") {
    @if map-has-key($z-index-map, $group) {
        @if map-has-key(map-get($z-index-map, $group), $key) {
            z-index: map-get(map-get($z-index-map, $group), $key);
        } @else {
            @error ('@include z-index() expects $key to be found in map z-indexed-items #{$group}, given `#{$key}`');
        }
    } @else {
        @error ('@include z-index() expects $group to be found in map z-indexed-items, given `#{$group}`');
    }
}

$shadow-level-1: 0 2px 5px 0 rgba(25, 25, 25, 0.3);
$shadow-level-2: 0 2px 10px 0 rgba(25, 25, 25, 0.3);
$shadow-level-3: 2px 6px 12px 0 rgba(25, 25, 25, 0.55);

@mixin box-shadow($level) {
    @if $level == 1 {
        box-shadow: $shadow-level-1;
    } @else if $level == 2 {
        box-shadow: $shadow-level-2;
    } @else if $level == 3 {
        box-shadow: $shadow-level-3;
    } @else {
        @error ('box-shadow $level does not exist!');
    }
}

@mixin font-size($type: fs-100, $line-height: null) {
    // Generating mixins below: Do not change
    $type: map-get($font-sizes, $type);

    // LINE-HEIGHTS
    @if map-has-key($type, line-height) {
        @if $line-height {
            line-height: toRem($line-height);
        } @else {
            line-height: map-get($type, line-height);
        }
    }

    // FONT-SIZES
    @if map-has-key($type, font-size) {
        font-size: map-get($type, font-size);
    }
}

@mixin font-family($weight: book) {
    @if $weight == book {
        font-family: "Roboto", sans-serif;
    }

    @if $weight == light {
        font-family: "Roboto", sans-serif;
    }

    @if $weight == medium {
        font-family: "Manrope", sans-serif;
    }

    @if $weight == bold {
        font-family: "Manrope", sans-serif;
    }
}

@mixin font($weight: book, $style: null, $size: null, $line-height: null) {
    // Error handling
    @if map-has-key($font-weights, $weight) {
        font-weight: map-get($font-weights, $weight);
        @include font-family($weight);
    } @else {
        @error ('@include font() expects $weight to be found in map font, given `#{$weight}`');
    }

    @if $style {
        font-style: $style;
    }

    @if $size {
        @include font-size($size, $line-height);
    }
}

@mixin nice-scrollbar() {
    &::-webkit-scrollbar {
        background-color: transparent;
        width: 5px;
    }

    &::-webkit-scrollbar-track {
        background-color: transparent;
    }

    &::-webkit-scrollbar-thumb {
        // background-color: rgba(34, 167, 242, 0.4);
        background-color: var(--scrollbar-bg);
        border-radius: 2px;
    }

    overflow-y: overlay;
    scrollbar-color: var(--scrollbar-bg) transparent;
    scrollbar-width: thin;
}

@mixin unread() {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: var(--accent);
    text-shadow: 1px 1px 1px var(--accentDarker);
    border-radius: 12px;
    @include font(bold, normal, fs-50);
    color: #ffffff;
    min-width: $sp5;
    padding: 0 $sp2;
    height: $sp5;

    @include mobile() {
        min-width: 18px;
        height: 18px;
    }
}

@mixin message-list() {
    flex: auto;
    background-color: var(--panel-bg);
    padding: $sp3 $sp4;
    overflow-x: hidden;
    overscroll-behavior-y: contain;
    position: relative;

    @include nice-scrollbar();

    @include mobile() {
        padding: 10px;
        -webkit-overflow-scrolling: touch;
    }
}

@mixin lp-content-padding($gutter: 160, $mobile-gutter: 24) {
    padding: 0 toRem($gutter);
    @include mobile() {
        padding: 0 toRem($mobile-gutter);
    }
}

@mixin input($whitespace: nowrap) {
    padding: $sp3 $sp4;
    @include font(book, normal, fs-100);
    color: var(--txt);
    background-color: var(--input-bg);
    // border: 1px solid var(--bd);
    border: 1px solid transparent;
    border-radius: $sp2;
    outline: none;
    box-shadow: var(--input-sh);
    white-space: $whitespace;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin diamond() {
    &::after {
        content: "💎";
        margin-inline-start: 5px;
    }
}

@mixin make_coin_spokes($spokes, $index) {
    .spoke:nth-child(#{$index}) {
        transform: rotateY(90deg) rotateX(math.div(180deg, ($spokes)) * $index);
    }

    @if $index > 0 {
        @include make_coin_spokes($spokes, $index - 1);
    }
}

@mixin bullet_list() {
    text-align: left;
    list-style: none;
    margin: 0 0 toRem(12) toRem(22);
    padding: 0;
    position: relative;

    > li {
        &:before {
            position: absolute;
            content: "\25AA";
            left: toRem(-25);
            color: #23a2ee;
        }
    }

    ul {
        margin-top: toRem(8);
        list-style: disc;

        > li {
            margin-left: toRem(16);
        }
    }
}

@mixin spinning_coin(
    $coin_face: url("/assets/ckbtc_nobackground.svg"),
    $coin_diam: 9rem,
    $shadow: null
) {
    $coin_depth: ($coin_diam * 0.1);
    $speed: 2s;

    .purse {
        height: $coin_diam;
        width: $coin_diam;
        perspective: 1000;
        @if $shadow != null {
            -webkit-box-reflect: below
                0
                linear-gradient(
                    hsla(0, 0%, 100%, 0),
                    hsla(0, 0%, 100%, 0) 45%,
                    hsla(0, 0%, 100%, 0.2)
                );
        }
    }

    .coin {
        height: $coin_diam;
        width: $coin_diam;
        position: absolute;
        transform-style: preserve-3d;
        transform-origin: 50%;
        animation: spin_coin $speed infinite;
        animation-timing-function: linear;

        .front,
        .back {
            position: absolute;
            background-image: $coin_face;
            height: $coin_diam;
            width: $coin_diam;
            border-radius: 50%;
            background-size: cover;
        }

        .front {
            transform: translateZ(math.div($coin_depth, 2));
        }

        .back {
            transform: translateZ(math.div($coin_depth, -2)) rotateY(180deg);
        }

        .side {
            $facets: 32;
            $spokes: math.div($facets, 2);
            $degs: math.sin(math.div(math.$pi, $facets));
            $facet_length: $coin_diam * $degs;

            transform: translateX(($coin_diam * 0.45));
            transform-style: preserve-3d;
            backface-visibility: hidden;

            .spoke {
                height: ($coin_diam);
                width: ($coin_depth);
                position: absolute;

                transform-style: preserve-3d;
                backface-visibility: hidden;

                // The Facets
                &:before,
                &:after {
                    content: "";
                    display: block;
                    height: $facet_length;
                    width: $coin_depth;
                    position: absolute;
                    transform: rotateX((math.div((180deg - (math.div(360, $facets))), 2)));

                    background: hsl(42, 52%, 68%);
                    background: linear-gradient(
                        to bottom,
                        hsl(42, 60%, 75%) 0%,
                        hsl(42, 60%, 75%) 74%,
                        hsl(42, 40%, 60%) 75%,
                        hsl(42, 40%, 60%) 100%
                    );
                    background-size: 100% (math.div(($facets * $facet_length), 144));
                }

                &:before {
                    transform-origin: top center;
                }

                &:after {
                    bottom: 0;
                    transform-origin: center bottom;
                }
            }

            @include make_coin_spokes($spokes, $spokes);
        }
    }

    @keyframes spin_coin {
        from {
            transform: rotateY(0deg);
        }
        to {
            transform: rotateY(360deg);
        }
    }
}

@mixin no_user_select() {
    -webkit-touch-callout: none; // Safari
    -webkit-user-select: none; // Safari
    -khtml-user-select: none; // Konqueror HTML
    -moz-user-select: none; // Old versions of Firefox
    -ms-user-select: none; // Internet Explorer/Edge
    user-select: none; // Non-prefixed version, currently supported by Chrome, Edge, Opera and Firefox
}
